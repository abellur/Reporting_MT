<job>
  <name>JB_Extract_Irregular_Policy_Data</name>
  <description>This is a job to load policy data that created during data conversion and have problem in OLTP, but not easy to fix in OLTP, to DRA policy staging tables.</description>
  <extended_description>Date         By     Description
11/17/2105   Jma    Issue 167194. Create the job to load irregular risk data to STG_RISK table.</extended_description>
  <job_version/>
  <job_status>0</job_status>
  <directory>/public/ETL/OLTP_To_Staging/Jobs</directory>
  <created_user>-</created_user>
  <created_date>2015/11/17 13:48:54.633</created_date>
  <modified_user>-</modified_user>
  <modified_date>2018/10/08 22:17:07.819</modified_date>
  <parameters>
    </parameters>
  <connection>
    <name>Delphi_OLTP</name>
    <server>${G_OLTP_DB_HOST}</server>
    <type>ORACLE</type>
    <access>Native</access>
    <database>${G_OLTP_DB_NAME}</database>
    <port>${G_OLTP_DB_PORT}</port>
    <username>${G_OLTP_DB_USERNAME}</username>
    <password>${G_OLTP_DB_PWD}</password>
    <servername/>
    <data_tablespace>${G_OLTP_DB_DATA}</data_tablespace>
    <index_tablespace>${G_OLTP_DB_INDEX}</index_tablespace>
    <attributes>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_LOWERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_UPPERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>IS_CLUSTERED</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>PORT_NUMBER</code>
        <attribute>${G_OLTP_DB_PORT}</attribute>
      </attribute>
      <attribute>
        <code>QUOTE_ALL_FIELDS</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>SUPPORTS_BOOLEAN_DATA_TYPE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>USE_POOLING</code>
        <attribute>N</attribute>
      </attribute>
    </attributes>
  </connection>
  <slaveservers>
    <slaveserver>
      <name>4Sight BI - PDI Server</name>
      <hostname>10.0.0.21</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>joe</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>Carte 1</name>
      <hostname>localhost</hostname>
      <port>9081</port>
      <webAppName/>
      <username>cluster</username>
      <password>Encrypted 2be98afc86aa7f2e4cb1aa265cd86aac8</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>DI Server</name>
      <hostname>localhost</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>joe</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_ETL_DEV</name>
      <hostname>magspentaho</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>shota</username>
      <password>Encrypted 2be98afc86aa7f2e4cb79ce63d69dbbdb</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_ETL_SERVER</name>
      <hostname>http://magspentaho</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>shota</username>
      <password>Encrypted 2be98afc86aa7f2e4cb79ce63d69dbbdb</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_ETL_TEST</name>
      <hostname>magspentahotest</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_PENTAHO</name>
      <hostname>magspentaho</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_PENTAHO_BTS</name>
      <hostname>129.144.25.104</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_PENTAHO_DEV</name>
      <hostname>magspentahodev</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>Master</name>
      <hostname>localhost</hostname>
      <port>8081</port>
      <webAppName/>
      <username>cluster</username>
      <password>Encrypted 2be98afc86aa7f2e4cb1aa265cd86aac8</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>SERVER1</name>
      <hostname>LOCALHOST</hostname>
      <port>3306</port>
      <webAppName/>
      <username>root</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>SLAVE ONE</name>
      <hostname>192.168.2.101</hostname>
      <port>3306</port>
      <webAppName/>
      <username>root</username>
      <password>Encrypted 2be98afc86aa7f2e4a418bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>SLAVE TWO</name>
      <hostname>192.168.2.101</hostname>
      <port>3306</port>
      <webAppName/>
      <username>root</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>Slave1</name>
      <hostname>localhost</hostname>
      <port>8082</port>
      <webAppName/>
      <username>cluster</username>
      <password>Encrypted 2be98afc86aa7f2e4cb1aa265cd86aac8</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>Slave2</name>
      <hostname>localhost</hostname>
      <port>8083</port>
      <webAppName/>
      <username>cluster</username>
      <password>Encrypted 2be98afc86aa7f2e4cb1aa265cd86aac8</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>Slave3</name>
      <hostname>localhost</hostname>
      <port>8084</port>
      <webAppName/>
      <username>cluster</username>
      <password>Encrypted 2be98afc86aa7f2e4cb1aa265cd86aac8</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>local DIS</name>
      <hostname>localhost</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>magspentahodev</name>
      <hostname>magspentahodev</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
  </slaveservers>
  <job-log-table>
    <connection/>
    <schema/>
    <table/>
    <size_limit_lines/>
    <interval/>
    <timeout_days/>
    <field>
      <id>ID_JOB</id>
      <enabled>Y</enabled>
      <name>ID_JOB</name>
    </field>
    <field>
      <id>CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>CHANNEL_ID</name>
    </field>
    <field>
      <id>JOBNAME</id>
      <enabled>Y</enabled>
      <name>JOBNAME</name>
    </field>
    <field>
      <id>STATUS</id>
      <enabled>Y</enabled>
      <name>STATUS</name>
    </field>
    <field>
      <id>LINES_READ</id>
      <enabled>Y</enabled>
      <name>LINES_READ</name>
    </field>
    <field>
      <id>LINES_WRITTEN</id>
      <enabled>Y</enabled>
      <name>LINES_WRITTEN</name>
    </field>
    <field>
      <id>LINES_UPDATED</id>
      <enabled>Y</enabled>
      <name>LINES_UPDATED</name>
    </field>
    <field>
      <id>LINES_INPUT</id>
      <enabled>Y</enabled>
      <name>LINES_INPUT</name>
    </field>
    <field>
      <id>LINES_OUTPUT</id>
      <enabled>Y</enabled>
      <name>LINES_OUTPUT</name>
    </field>
    <field>
      <id>LINES_REJECTED</id>
      <enabled>Y</enabled>
      <name>LINES_REJECTED</name>
    </field>
    <field>
      <id>ERRORS</id>
      <enabled>Y</enabled>
      <name>ERRORS</name>
    </field>
    <field>
      <id>STARTDATE</id>
      <enabled>Y</enabled>
      <name>STARTDATE</name>
    </field>
    <field>
      <id>ENDDATE</id>
      <enabled>Y</enabled>
      <name>ENDDATE</name>
    </field>
    <field>
      <id>LOGDATE</id>
      <enabled>Y</enabled>
      <name>LOGDATE</name>
    </field>
    <field>
      <id>DEPDATE</id>
      <enabled>Y</enabled>
      <name>DEPDATE</name>
    </field>
    <field>
      <id>REPLAYDATE</id>
      <enabled>Y</enabled>
      <name>REPLAYDATE</name>
    </field>
    <field>
      <id>LOG_FIELD</id>
      <enabled>Y</enabled>
      <name>LOG_FIELD</name>
    </field>
    <field>
      <id>EXECUTING_SERVER</id>
      <enabled>N</enabled>
      <name>EXECUTING_SERVER</name>
    </field>
    <field>
      <id>EXECUTING_USER</id>
      <enabled>N</enabled>
      <name>EXECUTING_USER</name>
    </field>
    <field>
      <id>START_JOB_ENTRY</id>
      <enabled>N</enabled>
      <name>START_JOB_ENTRY</name>
    </field>
    <field>
      <id>CLIENT</id>
      <enabled>N</enabled>
      <name>CLIENT</name>
    </field>
  </job-log-table>
  <jobentry-log-table>
    <connection/>
    <schema/>
    <table/>
    <timeout_days/>
    <field>
      <id>ID_BATCH</id>
      <enabled>Y</enabled>
      <name>ID_BATCH</name>
    </field>
    <field>
      <id>CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>CHANNEL_ID</name>
    </field>
    <field>
      <id>LOG_DATE</id>
      <enabled>Y</enabled>
      <name>LOG_DATE</name>
    </field>
    <field>
      <id>JOBNAME</id>
      <enabled>Y</enabled>
      <name>TRANSNAME</name>
    </field>
    <field>
      <id>JOBENTRYNAME</id>
      <enabled>Y</enabled>
      <name>STEPNAME</name>
    </field>
    <field>
      <id>LINES_READ</id>
      <enabled>Y</enabled>
      <name>LINES_READ</name>
    </field>
    <field>
      <id>LINES_WRITTEN</id>
      <enabled>Y</enabled>
      <name>LINES_WRITTEN</name>
    </field>
    <field>
      <id>LINES_UPDATED</id>
      <enabled>Y</enabled>
      <name>LINES_UPDATED</name>
    </field>
    <field>
      <id>LINES_INPUT</id>
      <enabled>Y</enabled>
      <name>LINES_INPUT</name>
    </field>
    <field>
      <id>LINES_OUTPUT</id>
      <enabled>Y</enabled>
      <name>LINES_OUTPUT</name>
    </field>
    <field>
      <id>LINES_REJECTED</id>
      <enabled>Y</enabled>
      <name>LINES_REJECTED</name>
    </field>
    <field>
      <id>ERRORS</id>
      <enabled>Y</enabled>
      <name>ERRORS</name>
    </field>
    <field>
      <id>RESULT</id>
      <enabled>Y</enabled>
      <name>RESULT</name>
    </field>
    <field>
      <id>NR_RESULT_ROWS</id>
      <enabled>Y</enabled>
      <name>NR_RESULT_ROWS</name>
    </field>
    <field>
      <id>NR_RESULT_FILES</id>
      <enabled>Y</enabled>
      <name>NR_RESULT_FILES</name>
    </field>
    <field>
      <id>LOG_FIELD</id>
      <enabled>N</enabled>
      <name>LOG_FIELD</name>
    </field>
    <field>
      <id>COPY_NR</id>
      <enabled>N</enabled>
      <name>COPY_NR</name>
    </field>
  </jobentry-log-table>
  <channel-log-table>
    <connection/>
    <schema/>
    <table/>
    <timeout_days/>
    <field>
      <id>ID_BATCH</id>
      <enabled>Y</enabled>
      <name>ID_BATCH</name>
    </field>
    <field>
      <id>CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>CHANNEL_ID</name>
    </field>
    <field>
      <id>LOG_DATE</id>
      <enabled>Y</enabled>
      <name>LOG_DATE</name>
    </field>
    <field>
      <id>LOGGING_OBJECT_TYPE</id>
      <enabled>Y</enabled>
      <name>LOGGING_OBJECT_TYPE</name>
    </field>
    <field>
      <id>OBJECT_NAME</id>
      <enabled>Y</enabled>
      <name>OBJECT_NAME</name>
    </field>
    <field>
      <id>OBJECT_COPY</id>
      <enabled>Y</enabled>
      <name>OBJECT_COPY</name>
    </field>
    <field>
      <id>REPOSITORY_DIRECTORY</id>
      <enabled>Y</enabled>
      <name>REPOSITORY_DIRECTORY</name>
    </field>
    <field>
      <id>FILENAME</id>
      <enabled>Y</enabled>
      <name>FILENAME</name>
    </field>
    <field>
      <id>OBJECT_ID</id>
      <enabled>Y</enabled>
      <name>OBJECT_ID</name>
    </field>
    <field>
      <id>OBJECT_REVISION</id>
      <enabled>Y</enabled>
      <name>OBJECT_REVISION</name>
    </field>
    <field>
      <id>PARENT_CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>PARENT_CHANNEL_ID</name>
    </field>
    <field>
      <id>ROOT_CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>ROOT_CHANNEL_ID</name>
    </field>
  </channel-log-table>
  <checkpoint-log-table>
    <connection/>
    <schema/>
    <table/>
    <timeout_days/>
    <max_nr_retries/>
    <run_retry_period/>
    <namespace_parameter/>
    <save_parameters/>
    <save_result_rows/>
    <save_result_files/>
    <field>
      <id>ID_JOB_RUN</id>
      <enabled>Y</enabled>
      <name>ID_JOB_RUN</name>
    </field>
    <field>
      <id>ID_JOB</id>
      <enabled>Y</enabled>
      <name>ID_JOB</name>
    </field>
    <field>
      <id>JOBNAME</id>
      <enabled>Y</enabled>
      <name>JOBNAME</name>
    </field>
    <field>
      <id>NAMESPACE</id>
      <enabled>Y</enabled>
      <name>NAMESPACE</name>
    </field>
    <field>
      <id>CHECKPOINT_NAME</id>
      <enabled>Y</enabled>
      <name>CHECKPOINT_NAME</name>
    </field>
    <field>
      <id>CHECKPOINT_COPYNR</id>
      <enabled>Y</enabled>
      <name>CHECKPOINT_COPYNR</name>
    </field>
    <field>
      <id>ATTEMPT_NR</id>
      <enabled>Y</enabled>
      <name>ATTEMPT_NR</name>
    </field>
    <field>
      <id>JOB_RUN_START_DATE</id>
      <enabled>Y</enabled>
      <name>JOB_RUN_START_DATE</name>
    </field>
    <field>
      <id>LOGDATE</id>
      <enabled>Y</enabled>
      <name>LOGDATE</name>
    </field>
    <field>
      <id>RESULT_XML</id>
      <enabled>Y</enabled>
      <name>RESULT_XML</name>
    </field>
    <field>
      <id>PARAMETER_XML</id>
      <enabled>Y</enabled>
      <name>PARAMETER_XML</name>
    </field>
  </checkpoint-log-table>
  <pass_batchid>N</pass_batchid>
  <shared_objects_file/>
  <entries>
    <entry>
      <name>Create dw_tmp_stg_risk</name>
      <description>Create DW_TMP_STG_RISK table to list the RISK_PK for risk records that are in RISK table, 
but not loaded into DW_CHANGED_RISK_VIEW_T table.</description>
      <type>SQL</type>
      <sql>--Create dw_tmp_stg_risk table for risk records that are in RISK table, 
--but not loaded into dw_changed_risk_view_t table.
CREATE TABLE dw_tmp_stg_risk NOLOGGING tablespace ${G_OLTP_DB_DATA} PCTFREE 0 AS
SELECT r.risk_pk 
FROM   risk r, 
       policy p
WHERE  p.policy_pk = r.policy_fk
AND    p.policy_cycle_code = 'POLICY'
AND    p.pol_curr_status_code &lt;&gt; 'PENDING'
AND    r.risk_pk NOT IN 
       (SELECT rt.risk_pk
        FROM   dw_changed_risk_view_t rt)
AND    r.record_mode_code = 'OFFICIAL'
AND    r.base_record_b = 'N'
AND    NVL(r.risk_process_code, 'xYz') = 'xYz'
AND    INSTR('${CHUNK_NUMBER}',SUBSTR(to_char(r.policy_fk),${CHUNK_POSITION},1)) > 0;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>571</xloc>
      <yloc>147</yloc>
    </entry>
    <entry>
      <name>dw_tmp_stg_risk exists?</name>
      <description>Check if table dw_tmp_stg_risk exists in source database.</description>
      <type>TABLE_EXISTS</type>
      <tablename>dw_tmp_stg_risk</tablename>
      <schemaname/>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>427</xloc>
      <yloc>147</yloc>
    </entry>
    <entry>
      <name>Drop dw_tmp_stg_risk</name>
      <description/>
      <type>SQL</type>
      <sql>drop table dw_tmp_stg_risk purge;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>491</xloc>
      <yloc>67</yloc>
    </entry>
    <entry>
      <name>Create dw_tmp_changed_risk</name>
      <description>Create dw_tmp_stg_risk table for risk records that are in RISK table, but not loaded into dw_changed_risk_view_t table.</description>
      <type>SQL</type>
      <sql>CREATE TABLE dw_tmp_changed_risk NOLOGGING TABLESPACE ${G_OLTP_DB_DATA} PCTFREE 0 AS
WITH x AS (
SELECT DISTINCT r.risk_pk,
       r.primary_risk_b,
       GREATEST(r.effective_from_date, pth.effective_from_date) effective_from_date,
       LEAST(r.effective_to_date, ptt.effective_from_date) effective_to_date,
       r.risk_type_code,
       r.county_code_used_to_rate,
       cc.short_description county_short_desc,
       cc.long_description county_long_desc,
       e.client_id,
       r.slot_id,
       r.risk_base_record_fk,
       r.entity_fk,
       r.risk_cls_used_to_rate,
       r.risk_sub_cls_used_to_rate,
       (SELECT DECODE(dw_staging_util.get_dw_parameter('RISK_SPEC_DESC_TYPE'),
                      'LONG',
                      rc.long_description,
                      'SHORT',
                      rc.short_description,
                      'VAR1',
                      rc.long_desc_variation1,
                      'VAR2',
                      rc.long_desc_variation2,
                      rc.long_description)
          FROM risk_class rc
         WHERE rc.code = r.risk_cls_used_to_rate
           AND ROWNUM = 1) risk_spec_desc,
       'CANCEL' curr_pol_rel_stat_type_cd,
       r.curr_pol_rel_reason_code,
       r.exposure_basis_code,
       r.exposure_unit,
       r.number_of_employed_doctor,
       r.number_of_vap,
       r.number_of_bed,
       r.annual_outpatient_visit,
       r.number_of_qb_delivery,
       r.practice_state_code,
       r.number_of_ext_bed,
       r.number_of_skill_bed,
       r.number_of_inpatient_surg,
       r.number_of_outpatient_surg,
       r.number_of_er_visit,
       r.char1,
       r.char2,
       r.char3,
       r.char4,
       r.num1,
       r.num2,
       r.num3,
       r.num4,
       TRUNC(r.date1) date1,
       TRUNC(r.date2) date2,
       TRUNC(r.date3) date3,
       TRUNC(r.date4) date4,
       r.fte_equivalent,
       r.fte_full_time_hrs,
       r.fte_part_time_hrs,
       r.fte_per_diem_hrs,
       pr.property_name,
       pr.entity_owner_fk,
       pr.address_fk,
       p.policy_cycle_code,
       ptt.effective_from_date ptt_effectivedate,
       dw_staging_util.get_trans_acct_new(ptt.transaction_log_pk) ptt_accountingdate,
       ptt.transaction_type_code ptt_typecode,
       ptt.transaction_code ptt_typesubcode,
       ptt.transaction_log_pk ptt_sequence,
       (SELECT MIN(r1.transaction_log_fk)
          FROM risk r1
         WHERE r1.risk_base_record_fk = r.risk_base_record_fk) risk_org_trans_fk,
       r.rating_basis mmrsk_rating_basis,
       r.average_daily_census mmrsk_average_daily_census,
       r.square_footage mmrsk_square_footage,
       'CANCEL' curr_pol_rel_status_code,
       r.risk_process_code,
       r.legacy_data_id,
       r.group_start_date,
       r.teaching_b,
       r.trans_location_id,
       r.frame_type_code,
       r.protection_class_code,
       r.building_class_code,
       r.sprinkler_b,
       r.alternate_speciality_code,
       r.city_code,
       r.note,
       r.procedure_codes,
       r.rate_mature_b,
       r.rolling_ibnr_b,
       r.rolling_ibnr_status,
       r.cm_year,
       r.construction_type,
       r.roof_type,
       r.floor_type,
       r.building_type,
       r.building_value,
       r.use_type,
       r.protection_type,
       r.fire_service_type,
       r.hydrants_type,
       r.security_type,
       r.moonlighting_b,
       r.risk_name,
       r.fleet_b,
       r.year_of_vehicle,
       r.original_cost_new,
       r.make_of_vehicle,
       r.model_of_vehicle,
       r.vin,
       r.subclass,
       r.desc_of_object,
       r.location,
       r.scorecard_eligible_b,
       nvl(dw_staging_util.get_risk_mapping_date(ptt.transaction_log_pk,
                                                 ptt.accounting_date,
                                                 r.risk_base_record_fk,
                                                 greatest(ptt.effective_from_date,
                                                          pth.effective_from_date),
                                                 pth.effective_from_date),
           greatest(ptt.effective_from_date, pth.effective_from_date)) risk_mapping_date,
       (SELECT prrc.short_description
          FROM policy_rel_reason_code prrc
         WHERE 1 = 1
           AND prrc.code = r.curr_pol_rel_reason_code
           AND rownum = 1) risk_cancel_reason_desc,
       r.risk_society_fk
  FROM property                      pr,
       entity                        e,
       county_code                   cc,
       policy                        p,
       risk                          r,
       transaction_log               ptt,
       transaction_applied_term      tat,
       policy_term_history           pth,
       dw_tmp_stg_risk               t
 WHERE 1 = 1
   AND p.policy_pk = r.policy_fk
      --  Entity
   AND e.entity_pk = r.entity_fk
      --  Property
   AND pr.property_pk(+) = r.property_risk_fk
      -- County code
   AND cc.code(+) = r.county_code_used_to_rate
   AND cc.state_code(+) = r.practice_state_code
      -- Transaction and Policy Term
   AND ptt.transaction_log_pk = tat.transaction_log_fk
   AND tat.term_base_record_fk = pth.policy_term_history_pk
   AND r.transaction_log_fk = ptt.transaction_log_pk
   AND nvl(r.risk_process_code, 'xYz') = 'xYz'
   AND r.record_mode_code = 'OFFICIAL'
   AND r.base_record_b = 'N'
   AND r.risk_pk = t.risk_pk
--   AND r.risk_base_record_fk = 1857782028 
)
SELECT risk_pk,
       primary_risk_b,
       effective_from_date,
       effective_to_date,
       risk_type_code,
       county_code_used_to_rate,
       county_short_desc,
       county_long_desc,
       client_id,
       slot_id,
       risk_base_record_fk,
       entity_fk,
       risk_cls_used_to_rate,
       risk_sub_cls_used_to_rate,
       risk_spec_desc,
       curr_pol_rel_stat_type_cd,
       curr_pol_rel_reason_code,
       exposure_basis_code,
       exposure_unit,
       number_of_employed_doctor,
       number_of_vap,
       number_of_bed,
       annual_outpatient_visit,
       number_of_qb_delivery,
       practice_state_code,
       number_of_ext_bed,
       number_of_skill_bed,
       number_of_inpatient_surg,
       number_of_outpatient_surg,
       number_of_er_visit,
       char1,
       char2,
       char3,
       char4,
       num1,
       num2,
       num3,
       num4,
       date1,
       date2,
       date3,
       date4,
       fte_equivalent,
       fte_full_time_hrs,
       fte_part_time_hrs,
       fte_per_diem_hrs,
       property_name,
       entity_owner_fk,
       address_fk,
       policy_cycle_code,
       ptt_effectivedate,
       ptt_accountingdate,
       ptt_typecode,
       ptt_typesubcode,
       ptt_sequence,
       risk_org_trans_fk,
       mmrsk_rating_basis,
       mmrsk_average_daily_census,
       mmrsk_square_footage,
       curr_pol_rel_status_code,
       risk_process_code,
       legacy_data_id,
       group_start_date,
       teaching_b,
       trans_location_id,
       frame_type_code,
       protection_class_code,
       building_class_code,
       sprinkler_b,
       alternate_speciality_code,
       city_code,
       note,
       procedure_codes,
       rate_mature_b,
       rolling_ibnr_b,
       rolling_ibnr_status,
       cm_year,
       construction_type,
       roof_type,
       floor_type,
       building_type,
       building_value,
       use_type,
       protection_type,
       fire_service_type,
       hydrants_type,
       security_type,
       moonlighting_b,
       risk_name,
       fleet_b,
       year_of_vehicle,
       original_cost_new,
       make_of_vehicle,
       model_of_vehicle,
       vin,
       subclass,
       desc_of_object,
       location,
       scorecard_eligible_b,
       risk_mapping_date,
       risk_cancel_reason_desc,
       risk_society_fk,
       Dw_Staging_Util.Get_Territory_Code(x.county_code_used_to_rate, 
                                          x.risk_type_code,
                                          x.risk_mapping_date) territory_code, 
       DECODE(x.risk_cls_used_to_rate, NULL, '',
              Dw_Staging_Util.Get_Premium_Class(x.risk_cls_used_to_rate, 
                                                x.practice_state_code,
                                                x.risk_mapping_date)) mmrsk_premium_class 
  FROM x;
</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>939</xloc>
      <yloc>147</yloc>
    </entry>
    <entry>
      <name>dw_tmp_changed_risk exists?</name>
      <description>Check if table dw_tmp_changed_risk exists in source database.</description>
      <type>TABLE_EXISTS</type>
      <tablename>dw_tmp_changed_risk</tablename>
      <schemaname/>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>731</xloc>
      <yloc>147</yloc>
    </entry>
    <entry>
      <name>Drop dw_tmp_changed_risk</name>
      <description/>
      <type>SQL</type>
      <sql>drop table dw_tmp_changed_risk purge;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>859</xloc>
      <yloc>67</yloc>
    </entry>
    <entry>
      <name>TR_SET_STG_ID_KEY_VARIABLES</name>
      <description/>
      <type>TRANS</type>
      <specification_method>rep_name</specification_method>
      <trans_object_id/>
      <filename/>
      <transname>TR_SET_STG_ID_KEY_VARIABLES</transname>
      <directory>/public/ETL/OLTP_To_Staging/Transformations</directory>
      <arg_from_previous>N</arg_from_previous>
      <params_from_previous>N</params_from_previous>
      <exec_per_row>N</exec_per_row>
      <clear_rows>N</clear_rows>
      <clear_files>N</clear_files>
      <set_logfile>N</set_logfile>
      <logfile/>
      <logext/>
      <add_date>N</add_date>
      <add_time>N</add_time>
      <loglevel>Basic</loglevel>
      <cluster>N</cluster>
      <slave_server_name/>
      <set_append_logfile>N</set_append_logfile>
      <wait_until_finished>Y</wait_until_finished>
      <follow_abort_remote>N</follow_abort_remote>
      <create_parent_folder>N</create_parent_folder>
      <logging_remote_work>N</logging_remote_work>
      <run_configuration/>
      <parameters>
        <pass_all_parameters>Y</pass_all_parameters>
      </parameters>
      <parallel>Y</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>203</xloc>
      <yloc>275</yloc>
    </entry>
    <entry>
      <name>Check DAILY</name>
      <description>Only execute following job if the load type is not DAILY.</description>
      <type>SIMPLE_EVAL</type>
      <valuetype>variable</valuetype>
      <fieldname/>
      <variablename>${G_STAGING_LOAD_TYPE}</variablename>
      <fieldtype>string</fieldtype>
      <mask/>
      <comparevalue>DAILY</comparevalue>
      <minvalue/>
      <maxvalue/>
      <successcondition>equal</successcondition>
      <successnumbercondition>equal</successnumbercondition>
      <successbooleancondition>false</successbooleancondition>
      <successwhenvarset>N</successwhenvarset>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>123</xloc>
      <yloc>211</yloc>
    </entry>
    <entry>
      <name>START</name>
      <description/>
      <type>SPECIAL</type>
      <start>Y</start>
      <dummy>N</dummy>
      <repeat>N</repeat>
      <schedulerType>0</schedulerType>
      <intervalSeconds>0</intervalSeconds>
      <intervalMinutes>60</intervalMinutes>
      <hour>12</hour>
      <minutes>0</minutes>
      <weekDay>1</weekDay>
      <DayOfMonth>1</DayOfMonth>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>43</xloc>
      <yloc>275</yloc>
    </entry>
    <entry>
      <name>TR_Extract_Stg_Risk_Irregular</name>
      <description>Extract irregular risk data into STG_RISK table.</description>
      <type>TRANS</type>
      <specification_method>rep_name</specification_method>
      <trans_object_id/>
      <filename/>
      <transname>TR_Extract_Stg_Risk_Irregular</transname>
      <directory>/public/ETL/OLTP_To_Staging/Transformations</directory>
      <arg_from_previous>N</arg_from_previous>
      <params_from_previous>N</params_from_previous>
      <exec_per_row>N</exec_per_row>
      <clear_rows>N</clear_rows>
      <clear_files>N</clear_files>
      <set_logfile>N</set_logfile>
      <logfile/>
      <logext/>
      <add_date>N</add_date>
      <add_time>N</add_time>
      <loglevel>Basic</loglevel>
      <cluster>N</cluster>
      <slave_server_name/>
      <set_append_logfile>N</set_append_logfile>
      <wait_until_finished>Y</wait_until_finished>
      <follow_abort_remote>N</follow_abort_remote>
      <create_parent_folder>N</create_parent_folder>
      <logging_remote_work>N</logging_remote_work>
      <run_configuration/>
      <parameters>
        <pass_all_parameters>Y</pass_all_parameters>
      </parameters>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>1163</xloc>
      <yloc>147</yloc>
    </entry>
    <entry>
      <name>DUMMY</name>
      <description/>
      <type>SPECIAL</type>
      <start>N</start>
      <dummy>Y</dummy>
      <repeat>N</repeat>
      <schedulerType>0</schedulerType>
      <intervalSeconds>0</intervalSeconds>
      <intervalMinutes>60</intervalMinutes>
      <hour>12</hour>
      <minutes>0</minutes>
      <weekDay>1</weekDay>
      <DayOfMonth>1</DayOfMonth>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>123</xloc>
      <yloc>131</yloc>
    </entry>
    <entry>
      <name>Create dw_tmp_stg_coverage</name>
      <description>Create DW_TMP_STG_COVERAGE  table to list COVERAGE_PK for coverage records that are in COVERAGE table, 
but not loaded into DW_STG_COVERAGE_VIEW_T table.</description>
      <type>SQL</type>
      <sql>--Create dw_tmp_stg_coverage table for coverage records that are in COVERAGE table, 
--but not loaded into DW_STG_COVERAGE_VIEW_T table.
CREATE TABLE dw_tmp_stg_coverage NOLOGGING tablespace ${G_OLTP_DB_DATA} PCTFREE 0 AS
SELECT c.coverage_pk
FROM   coverage c, 
       risk     r, 
       policy   p
WHERE  c.risk_base_record_fk = r.risk_pk
AND    r.policy_fk = p.policy_pk
AND    p.policy_cycle_code = 'POLICY'
AND    p.pol_curr_status_code &lt;&gt; 'PENDING'
AND    r.record_mode_code = 'OFFICIAL'
AND    NVL(r.risk_process_code, 'xYz') = 'xYz'
AND    c.transaction_log_fk IS NOT NULL
AND    c.record_mode_code = 'OFFICIAL'
AND    c.base_record_b = 'N'
AND    INSTR('${CHUNK_NUMBER}',SUBSTR(to_char(r.policy_fk),${CHUNK_POSITION},1)) > 0
AND    c.curr_pol_rel_stat_type_cd NOT IN ('OFFER','DECLINE')
AND    '${G_LOAD_OFFER_DEC_COV}' = 'N'
AND    NOT EXISTS 
       (SELECT 1
        FROM   dw_stg_coverage_view_t t
        WHERE  t.source_pk = c.coverage_pk)
UNION ALL
SELECT c.coverage_pk
FROM   coverage c, 
       risk     r, 
       policy   p
WHERE  c.risk_base_record_fk = r.risk_pk
AND    r.policy_fk = p.policy_pk
AND    p.policy_cycle_code = 'POLICY'
AND    p.pol_curr_status_code &lt;&gt; 'PENDING'
AND    r.record_mode_code = 'OFFICIAL'
AND    NVL(r.risk_process_code, 'xYz') = 'xYz'
AND    c.transaction_log_fk IS NOT NULL
AND    c.record_mode_code = 'OFFICIAL'
AND    c.base_record_b = 'N'
AND    INSTR('${CHUNK_NUMBER}',SUBSTR(to_char(r.policy_fk),${CHUNK_POSITION},1)) > 0
AND    NVL('${G_LOAD_OFFER_DEC_COV}','Y') = 'Y'
AND    NOT EXISTS 
       (SELECT 1
        FROM   dw_stg_coverage_view_t t
        WHERE  t.source_pk = c.coverage_pk)
;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>619</xloc>
      <yloc>275</yloc>
    </entry>
    <entry>
      <name>dw_tmp_stg_coverage exists?</name>
      <description>Check if table DW_TMP_STG_COVERAGE exists in source database.</description>
      <type>TABLE_EXISTS</type>
      <tablename>dw_tmp_stg_coverage</tablename>
      <schemaname/>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>427</xloc>
      <yloc>275</yloc>
    </entry>
    <entry>
      <name>Drop dw_tmp_stg_coverage</name>
      <description/>
      <type>SQL</type>
      <sql>drop table dw_tmp_stg_coverage purge;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>491</xloc>
      <yloc>211</yloc>
    </entry>
    <entry>
      <name>Create dw_tmp_stg_component</name>
      <description>Create DW_TMP_STG_COMPONENT table for POLICY_COV_COMPONENT_PK for component records that are in POLICY_COVERAGE_COMPONENT table, 
but not loaded into DW_STG_COMPONENT_VIEW_T table.</description>
      <type>SQL</type>
      <sql>--Create dw_tmp_stg_component table for component records that are in POLICY_COVERAGE_COMPONENT table, 
--but not loaded into DW_STG_COMPONENT_VIEW_T table.
CREATE TABLE dw_tmp_stg_component NOLOGGING tablespace ${G_OLTP_DB_DATA} PCTFREE 0 AS
SELECT pcc.policy_cov_component_pk
FROM   policy_coverage_component pcc,
       coverage c, 
       risk     r, 
       policy   p
WHERE  c.risk_base_record_fk = r.risk_pk
AND    r.policy_fk = p.policy_pk
AND    pcc.coverage_base_record_fk = c.coverage_pk
AND    p.policy_cycle_code = 'POLICY'
AND    p.pol_curr_status_code &lt;&gt; 'PENDING'
AND    r.record_mode_code = 'OFFICIAL'
AND    NVL(r.risk_process_code, 'xYz') = 'xYz'
AND    pcc.record_mode_code = 'OFFICIAL'
AND    pcc.base_record_b = 'N'
AND    pcc.transaction_log_fk IS NOT NULL
AND    INSTR('${CHUNK_NUMBER}',SUBSTR(to_char(p.policy_pk),${CHUNK_POSITION},1)) > 0
AND    NOT EXISTS 
       (SELECT 1 
        FROM   dw_stg_component_view_t t
        WHERE  t.source_pk = pcc.policy_cov_component_pk);</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>619</xloc>
      <yloc>435</yloc>
    </entry>
    <entry>
      <name>dw_tmp_stg_component exists?</name>
      <description>Check if table DW_TMP_STG_COMPONENT exists in source database.</description>
      <type>TABLE_EXISTS</type>
      <tablename>dw_tmp_stg_component</tablename>
      <schemaname/>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>427</xloc>
      <yloc>435</yloc>
    </entry>
    <entry>
      <name>Drop dw_tmp_stg_component</name>
      <description/>
      <type>SQL</type>
      <sql>drop table dw_tmp_stg_component purge;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>491</xloc>
      <yloc>371</yloc>
    </entry>
    <entry>
      <name>Create dw_tmp_changed_cov</name>
      <description>Create dw_tmp_changed_cov table for risk records that are in COVERAGE table, but not loaded into DW_STG_COVERAGE_VIEW_T table.</description>
      <type>SQL</type>
      <sql>CREATE TABLE dw_tmp_changed_cov NOLOGGING TABLESPACE ${G_OLTP_DB_DATA} PCTFREE 0 AS
SELECT DISTINCT to_char(c.coverage_base_record_fk)                     coverage_base_record_fk,
       ptt.transaction_log_pk                                          ptt_sequence,
       ptt.transaction_type_code                                       ptt_typecode,
       ptt.transaction_code                                            ptt_typesubcode,
       GREATEST(ptt.effective_from_date,
                GREATEST(pth.effective_from_date, c.effective_from_date)) ptt_effectivedate,
       ptt.accounting_date                                             ptt_transaction_date,
       dw_staging_util.get_trans_acct_new(ptt.transaction_log_pk)      ptt_accounting_date,
       cc.code                                                         coverage_type_code,
       c.product_coverage_code                                         product_coverage_code,
       pc.short_description                                            coverage_name,
       pc.long_description                                             coverage_desc,
       GREATEST(pth.effective_from_date, c.effective_from_date)        effective_from_date,
       LEAST(ptt.effective_from_date, c.effective_to_date)             effective_to_date,
       CAST(NULL AS VARCHAR2(10))                                      cov_class_code,
       CAST(NULL AS VARCHAR2(40))                                      cov_class_desc,
       'GROSS'                                                         cov_subcode,
       'GROSS'                                                         cov_subcodename,
       'GROSS'                                                         cov_subcodedesc,
       clc.incident_high_value,
       'INCIDENT'                                                      cov_limit1type,
       clc.aggregate_high_value,
       'AGGREGATE'                                                     cov_limit2type,
       c.primary_coverage_b,
       'CANCEL'                                                        coverage_current_status_code,
       c.curr_pol_rel_reason_code                                      coverage_cancel_reason_code,
       prr.short_description                                           covreage_cancel_reason_desc,
       c.shared_limit_b                                                coverage_shared_limit_code,
       TRUNC(c.retroactive_date)                                       coverage_retro_date,
       c.coverage_limit_code,
       c.rating_basis,
       c.cancellation_method_code,
       c.default_amt_of_insurance,
       c.addtl_amt_of_insurance,
       pc.policy_form_code,
       pc.coverage_segment_code,
       pc.sublimit_b,
       pc.exposure_basis_code,
       c.exposure_unit,
       pc.short_description                                            ccov_exposure_type_desc,
       c.char1,
       c.char2,
       c.char3,
       c.num1,
       c.num2,
       c.num3,
       TRUNC(c.date1)                                                  date1,
       TRUNC(c.date2)                                                  date2,
       TRUNC(c.date3)                                                  date3,
       (SELECT MIN(c1.transaction_log_fk)
          FROM coverage c1
         WHERE c1.coverage_base_record_fk = c.coverage_base_record_fk) cov_org_trans_fk,
       CAST(NULL AS VARCHAR2(10))                                      cov_component_code,
       CAST(NULL AS VARCHAR2(10))                                      cov_component_type_code,
       CAST(NULL AS VARCHAR2(40))                                      cov_component_short_desc,
       CAST(NULL AS VARCHAR2(100))                                     cov_component_long_desc,
       CAST(NULL AS NUMBER)                                            cov_component_value,
       CAST(NULL AS NUMBER)                                            cov_component_value_sign,
       CAST(NULL AS DATE)                                              cov_component_cycle_date,
       CAST(NULL AS NUMBER)                                            cov_component_deduct_value,
       CAST(NULL AS NUMBER)                                            cov_component_ded_agg_value,
       CAST(NULL AS VARCHAR2(10))                                      cov_component_renewal_ind,
       CAST(NULL AS VARCHAR2(2000))                                    cov_component_char1,
       CAST(NULL AS VARCHAR2(2000))                                    cov_component_char2,
       CAST(NULL AS VARCHAR2(2000))                                    cov_component_char3,
       CAST(NULL AS NUMBER)                                            cov_component_num1,
       CAST(NULL AS NUMBER)                                            cov_component_num2,
       CAST(NULL AS NUMBER)                                            cov_component_num3,
       CAST(NULL AS DATE)                                              cov_component_date1,
       CAST(NULL AS DATE)                                              cov_component_date2,
       CAST(NULL AS DATE)                                              cov_component_date3,
       'COV'                                                           cov_category,
       c.rate_payor_depend_code                                        mmcov_rate_payor_depend_code,
       c.auto_renew_b,
       c.incident_limit,
       c.extended_aggregate_limit,
       c.annual_base_rate,
       c.prioracts_retro_date,
       c.pcf_county_code,
       c.pcf_participation_date,
       c.covg_part_shared_limit_b,
       c.primary_exposure_b,
       c.insured_since_date,
       c.cancel_type_code,
       prsc.short_description                                          cancel_type_desc,
       c.state_code,
       c.loss_of_income_days,
       c.legacy_data_id,
       c.split_retro_date,
       c.adj_incident_limit,
       c.adj_aggregate_limit,
       c.claims_made_date,
       c.number_of_patient_day,
       c.coverage_desc                                                 mmcov_coverage_desc,
       c.building_rate,
       c.used_for_forecast_b,
       c.direct_primary_b,
       c.symbol,
       c.limit_erosion_code,
       CAST(NULL AS VARCHAR2(1))                                       mmcom_to_prorate_b,
       CAST(NULL AS VARCHAR2(50))                                      mmcom_legacy_data_id,
       CAST(NULL AS VARCHAR2(400))                                     mmcom_note,
       CAST(NULL AS NUMBER)                                            mmcom_inc_value,
       CAST(NULL AS NUMBER)                                            mmcom_agg_value,
       CAST(NULL AS VARCHAR2(10))                                      mmcom_classification_code,
       pc.nose_coverage_b                                              mmcov_nose_coverage_b,
       0                                                               cov_limit3,
       ' '                                                             cov_limit3type,
       0                                                               cov_limit4,
       ' '                                                             cov_limit4type,
       0                                                               cov_limit5,
       ' '                                                             cov_limit5type,
       c.coverage_pk                                                   source_pk,
       c.risk_base_record_fk                                           risk_uniqueid,
       c.coverage_base_record_fk                                       parent_cov_fk,
       cm_get_deductible('INC',c.coverage_base_record_fk,p.policy_no,
                         c.effective_from_date,
                         c.effective_to_date)                          ded_inc,
       'Incident'                                                      ded_inc_type,
       cm_get_deductible('AGG',c.coverage_base_record_fk,p.policy_no,
                         c.effective_from_date,
                         c.effective_to_date)                          ded_agg,
       'Aggregate'                                                     ded_agg_type,
       p.policy_no||'^'||pth.term_base_record_fk                       policy_uniqueid,
       cc.lob_code cov_lob_code,
       cc.premium_coverage_b,
       Pm_Web_Custom.Get_Accumulated_Limit(
           'RECORD_MODE_CODE^'||c.record_mode_code||
           '^ENDORSEMENT_QUOTE_ID^'||ptt.endorsement_quote_id||
           '^RISK_BASE_RECORD_FK^'||c.risk_base_record_fk||
           '^EFFECTIVE_FROM_DATE^'||to_char(c.effective_from_date,'mm/dd/yyyy')||
           '^EFFECTIVE_TO_DATE^'||to_char(c.effective_to_date,'mm/dd/yyyy')||
           '^TERM_EFFECTIVE_FROM_DATE^'||to_char(pth.effective_from_date,'mm/dd/yyyy')||
           '^TERM_EFFECTIVE_TO_DATE^'||to_char(pth.effective_to_date,'mm/dd/yyyy')||
           '^PRODUCT_COVERAGE_CODE^'||pc.coverage_code||
           '^COVERAGE_PK^'||c.coverage_pk||'^') total_limit
FROM   coverage_code                 cc,
       product_coverage              pc,
       coverage_limit_code           clc,
       coverage                      c,
       risk                          r,
       policy                        p,
       transaction_log               ptt,
       transaction_applied_term      tat,
       policy_term_history           pth,
       policy_rel_reason_code        prr,
       policy_rel_status_code        prsc,
       dw_tmp_stg_coverage           t
WHERE  1 = 1
AND    pc.code = c.product_coverage_code
AND    pc.coverage_code = cc.code
AND    clc.code(+) = c.coverage_limit_code
AND    prr.code(+) = c.curr_pol_rel_reason_code
AND    prsc.code(+) = c.cancel_type_code
       -- Transaction and Policy Term
AND    ptt.transaction_log_pk = tat.transaction_log_fk
AND    tat.term_base_record_fk = pth.policy_term_history_pk
AND    c.transaction_log_fk = ptt.transaction_log_pk
AND    c.coverage_pk = t.coverage_pk
AND    c.parent_coverage_base_record_fk IS NULL
AND    c.base_record_b = 'N'
AND    c.record_mode_code = 'OFFICIAL'
AND    c.risk_base_record_fk = r.risk_pk
AND    r.base_record_b = 'Y'
AND    r.policy_fk = ptt.policy_fk
AND    r.policy_fk = p.policy_pk
UNION  ALL
-- Coverage Class
SELECT to_char(c.coverage_base_record_fk)                         coverage_base_record_fk,
       ptt.transaction_log_pk ptt_sequence,
       ptt.transaction_type_code ptt_typecode,
       ptt.transaction_code ptt_typesubcode,
       GREATEST(ptt.effective_from_date,
                GREATEST(pth.effective_from_date, c.effective_from_date)) ptt_effectivedate,
       ptt.accounting_date ptt_transaction_date,
       dw_staging_util.get_trans_acct_new(ptt.transaction_log_pk) ptt_accounting_date,
       cc.code                                                    coverage_type_code,
       pcov.product_coverage_code                                 product_coverage_code,
       pc.short_description                                       coverage_name,
       pc.long_description                                        coverage_desc,
       GREATEST(pth.effective_from_date,c.effective_from_date)    effective_from_date,
       LEAST(ptt.effective_from_date,c.effective_to_date)         effective_to_date,
       c.product_coverage_code                                    cov_class_code,
       cpc.short_description                                      cov_class_desc,
       'GROSS'                                                    cov_subcode,
       'GROSS'                                                    cov_subcodename,
       'GROSS'                                                    cov_subcodedesc,
       CAST (NULL AS NUMBER)                                      incident_high_value,
       'INCIDENT'                                                 cov_limit1type,
       CAST (NULL AS NUMBER)                                      aggregate_high_value,
       'AGGREGATE'                                                cov_limit2type,
       c.primary_coverage_b                                       primary_coverage_b,
       'CANCEL'                                                   coverage_current_status_code,
       c.curr_pol_rel_reason_code                                 coverage_cancel_reason_code,
       prr.short_description                                      covreage_cancel_reason_desc,
       c.shared_limit_b                                           coverage_shared_limit_code,
       c.retroactive_date                                         coverage_retro_date,
       c.coverage_limit_code                                      coverage_limit_code,
       c.rating_basis                                             rating_basis,
       c.cancellation_method_code                                 cancellation_method_code,
       c.default_amt_of_insurance                                 default_amt_of_insurance,
       c.addtl_amt_of_insurance                                   addtl_amt_of_insurance,
       pc.policy_form_code                                        policy_form_code,
       pc.coverage_segment_code                                   coverage_segment_code,
       pc.sublimit_b                                              sublimit_b,
       pc.exposure_basis_code                                     exposure_basis_code,
       c.exposure_unit                                            exposure_unit,
       pc.short_description                                       ccov_exposure_type_desc,
       c.char1                                                    char1,
       c.char2                                                    char2,
       c.char3                                                    char3,
       c.num1                                                     num1,
       c.num2                                                     num2,
       c.num3                                                     num3,
       trunc(c.date1)                                             date1,
       trunc(c.date2)                                             date2,
       trunc(c.date3)                                             date3,
       (SELECT MIN(c1.transaction_log_fk)
        FROM   coverage c1
        WHERE  c1.coverage_base_record_fk = c.coverage_base_record_fk) cov_org_trans_fk,
      -- Removed component related columns from this view, there is seperate view for components.
       CAST (NULL AS VARCHAR2(10))                                cov_component_code,
       CAST (NULL AS VARCHAR2(10))                                cov_component_type_code,
       CAST (NULL AS VARCHAR2(40))                                cov_component_short_desc,
       CAST (NULL AS VARCHAR2(100))                               cov_component_long_desc,
       CAST (NULL AS NUMBER)                                      cov_component_value,
       CAST (NULL AS NUMBER)                                      cov_component_value_sign,
       CAST (NULL AS DATE)                                        cov_component_cycle_date,
       CAST (NULL AS NUMBER)                                      cov_component_deduct_value,
       CAST (NULL AS NUMBER)                                      cov_component_ded_agg_value,
       CAST (NULL AS VARCHAR2(10))                                cov_component_renewal_ind,
       CAST (NULL AS VARCHAR2(2000))                              cov_component_char1,
       CAST (NULL AS VARCHAR2(2000))                              cov_component_char2,
       CAST (NULL AS VARCHAR2(2000))                              cov_component_char3,
       CAST (NULL AS NUMBER)                                      cov_component_num1,
       CAST (NULL AS NUMBER)                                      cov_component_num2,
       CAST (NULL AS NUMBER)                                      cov_component_num3,
       CAST (NULL AS DATE)                                        cov_component_date1,
       CAST (NULL AS DATE)                                        cov_component_date2,
       CAST (NULL AS DATE)                                        cov_component_date3,
       'COVCLASS'                                                 cov_category,
       CAST (NULL AS VARCHAR2(10))                                mmcov_rate_payor_depend_code,
       CAST (NULL AS VARCHAR2(1))                                 auto_renew_b,
       CAST (NULL AS NUMBER)                                      incident_limit,
       CAST (NULL AS NUMBER)                                      extended_aggregate_limit,
       CAST (NULL AS NUMBER)                                      annual_base_rate,
       CAST (NULL AS DATE)                                        prioracts_retro_date,
       CAST (NULL AS VARCHAR2(10))                                pcf_county_code,
       CAST (NULL AS DATE)                                        pcf_participation_date,
       CAST (NULL AS VARCHAR2(1))                                 covg_part_shared_limit_b,
       CAST (NULL AS VARCHAR2(1))                                 primary_exposure_b,
       CAST (NULL AS DATE)                                        insured_since_date,
       CAST (NULL AS VARCHAR2(10))                                cancel_type_code,
       CAST (NULL AS VARCHAR2(40))                                cancel_type_desc,
       CAST (NULL AS VARCHAR2(10))                                state_code,
       CAST (NULL AS NUMBER)                                      loss_of_income_days,
       CAST (NULL AS VARCHAR2(50))                                legacy_data_id,
       CAST (NULL AS DATE)                                        split_retro_date,
       CAST (NULL AS NUMBER)                                      adj_incident_limit,
       CAST (NULL AS NUMBER)                                      adj_aggregate_limit,
       CAST (NULL AS DATE)                                        claims_made_date,
       CAST (NULL AS NUMBER)                                      number_of_patient_day,
       CAST (NULL AS VARCHAR2(40))                                mmcov_coverage_desc,
       CAST (NULL AS NUMBER)                                      building_rate,
       CAST (NULL AS VARCHAR2(1))                                 used_for_forecast_b,
       CAST (NULL AS VARCHAR2(1))                                 direct_primary_b,
       CAST (NULL AS VARCHAR2(10))                                symbol,
       CAST (NULL AS VARCHAR2(10))                                limit_erosion_code,
       CAST (NULL AS VARCHAR2(1))                                 mmcom_to_prorate_b,
       CAST (NULL AS VARCHAR2(50))                                mmcom_legacy_data_id,
       CAST (NULL AS VARCHAR2(400))                               mmcom_note,
       CAST (NULL AS NUMBER)                                      mmcom_inc_value,
       CAST (NULL AS NUMBER)                                      mmcom_agg_value,
       CAST (NULL AS VARCHAR2(10))                                mmcom_classification_code,
       cpc.nose_coverage_b                                        mmcov_nose_coverage_b,
       0                                                          cov_limit3,
       ' '                                                        cov_limit3type,
       0                                                          cov_limit4,
       ' '                                                        cov_limit4type,
       0                                                          cov_limit5,
       ' '                                                        cov_limit5type,
       c.coverage_pk                                              source_pk,
       c.risk_base_record_fk,
       c.coverage_base_record_fk,
       cm_get_deductible('INC',pcov.coverage_base_record_fk,p.policy_no,
                         pcov.effective_from_date,
                         pcov.effective_to_date)                  ded_inc,
       'Incident'                                                 ded_inc_type,
       cm_get_deductible('AGG',pcov.coverage_base_record_fk,p.policy_no,
                         pcov.effective_from_date,
                         pcov.effective_to_date)                  ded_agg,
       'Aggregate'                                                ded_agg_type,
       p.policy_no||'^'||pth.term_base_record_fk                  policy_uniqueid,
       cc.lob_code cov_lob_code,
       cc.premium_coverage_b,
       Pm_Web_Custom.Get_Accumulated_Limit(
           'RECORD_MODE_CODE^'||c.record_mode_code||
           '^ENDORSEMENT_QUOTE_ID^'||ptt.endorsement_quote_id||
           '^RISK_BASE_RECORD_FK^'||c.risk_base_record_fk||
           '^EFFECTIVE_FROM_DATE^'||to_char(c.effective_from_date,'mm/dd/yyyy')||
           '^EFFECTIVE_TO_DATE^'||to_char(c.effective_to_date,'mm/dd/yyyy')||
           '^TERM_EFFECTIVE_FROM_DATE^'||to_char(pth.effective_from_date,'mm/dd/yyyy')||
           '^TERM_EFFECTIVE_TO_DATE^'||to_char(pth.effective_to_date,'mm/dd/yyyy')||
           '^PRODUCT_COVERAGE_CODE^'||pc.coverage_code||
           '^COVERAGE_PK^'||c.coverage_pk||'^') total_limit
FROM   coverage_code              cc, 
       product_coverage           pc,
       coverage                   pcov,
       product_coverage           cpc,
       coverage                   c,
       risk                       r,
       policy                     p,
       transaction_log            ptt,
       transaction_applied_term   tat,
       policy_term_history        pth,
       policy_rel_reason_code     prr,
       dw_tmp_stg_coverage        t
WHERE  1=1
AND    cpc.code = c.product_coverage_code
AND    pc.coverage_code = cc.code
AND    pc.code = pcov.product_coverage_code
AND    pcov.coverage_pk = c.parent_coverage_base_record_fk
       -- Transaction and Policy Term
AND    ptt.transaction_log_pk = tat.transaction_log_fk
AND    tat.term_base_record_fk = pth.policy_term_history_pk
AND    c.transaction_log_fk = ptt.transaction_log_pk
AND    c.coverage_pk = t.coverage_pk
AND    c.parent_coverage_base_record_fk IS NOT NULL
AND    c.base_record_b = 'N'
AND    c.record_mode_code = 'OFFICIAL'
AND    c.risk_base_record_fk = r.risk_pk
AND    prr.code(+) = c.curr_pol_rel_reason_code
AND    r.base_record_b = 'Y'
AND    r.policy_fk = ptt.policy_fk
AND    r.policy_fk = p.policy_pk;
</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>1035</xloc>
      <yloc>275</yloc>
    </entry>
    <entry>
      <name>dw_tmp_changed_cov exists?</name>
      <description>Check if table dw_tmp_changed_cov exists in source database.</description>
      <type>TABLE_EXISTS</type>
      <tablename>dw_tmp_changed_cov</tablename>
      <schemaname/>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>859</xloc>
      <yloc>275</yloc>
    </entry>
    <entry>
      <name>Drop dw_tmp_changed_cov</name>
      <description/>
      <type>SQL</type>
      <sql>drop table dw_tmp_changed_cov purge;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>939</xloc>
      <yloc>211</yloc>
    </entry>
    <entry>
      <name>TR_Extract_Stg_Coverage_Irregular</name>
      <description>Extract irregular coverage data into STG_COVERAGE table.</description>
      <type>TRANS</type>
      <specification_method>rep_name</specification_method>
      <trans_object_id/>
      <filename/>
      <transname>TR_Extract_Stg_Coverage_Irregular</transname>
      <directory>/public/ETL/OLTP_To_Staging/Transformations</directory>
      <arg_from_previous>N</arg_from_previous>
      <params_from_previous>N</params_from_previous>
      <exec_per_row>N</exec_per_row>
      <clear_rows>N</clear_rows>
      <clear_files>N</clear_files>
      <set_logfile>N</set_logfile>
      <logfile/>
      <logext/>
      <add_date>N</add_date>
      <add_time>N</add_time>
      <loglevel>Basic</loglevel>
      <cluster>N</cluster>
      <slave_server_name/>
      <set_append_logfile>N</set_append_logfile>
      <wait_until_finished>Y</wait_until_finished>
      <follow_abort_remote>N</follow_abort_remote>
      <create_parent_folder>N</create_parent_folder>
      <logging_remote_work>N</logging_remote_work>
      <run_configuration/>
      <parameters>
        <pass_all_parameters>Y</pass_all_parameters>
      </parameters>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>1243</xloc>
      <yloc>275</yloc>
    </entry>
    <entry>
      <name>Create dw_tmp_changed_comp</name>
      <description>Create dw_tmp_changed_cov table for risk records that are in COVERAGE table, but not loaded into DW_STG_COVERAGE_VIEW_T table.</description>
      <type>SQL</type>
      <sql>CREATE TABLE dw_tmp_changed_comp NOLOGGING TABLESPACE ${G_OLTP_DB_DATA} PCTFREE 0 AS
SELECT DISTINCT to_char(pcc.pol_cov_comp_base_rec_fk)             component_uniqueid,
       ptt.transaction_log_pk                                     ptt_sequence,
       ptt.transaction_type_code                                  ptt_typecode,
       ptt.transaction_code                                       ptt_typesubcode,
       ptt.effective_from_date                                    ptt_effectivedate,
       ptt.accounting_date                                        ptt_transaction_date,
       dw_staging_util.get_trans_acct_new(ptt.transaction_log_pk) ptt_accounting_date,
       GREATEST(pth.effective_from_date,pcc.effective_from_date)  effective_from_date,
       LEAST(ptt.effective_from_date,pcc.effective_to_date)       effective_to_date,
       (SELECT MIN(pcc1.transaction_log_fk)
        FROM   policy_coverage_component pcc1
        WHERE  pcc1.pol_cov_comp_base_rec_fk = 
               pcc.pol_cov_comp_base_rec_fk)                      cov_org_trans_fk,
       prcc.coverage_component_code                               cov_component_code,
       ccc.cvg_component_type_code                                cov_component_type_code,
       prcc.short_description                                     cov_component_short_desc,
       prcc.long_description                                      cov_component_long_desc,
       pcc.component_value                                        cov_component_value,
       pcc.component_sign                                         cov_component_value_sign,
       pcc.component_cycle_date                                   cov_component_cycle_date,
       prcc.deductible_value                                      cov_component_deduct_value,
       prcc.deductible_agg_value                                  cov_component_ded_agg_value,
       pcc.renew_b                                                cov_component_renewal_ind,
       pcc.char1                                                  cov_component_char1,
       pcc.char2                                                  cov_component_char2,
       pcc.char3                                                  cov_component_char3,
       pcc.num1                                                   cov_component_num1,
       pcc.num2                                                   cov_component_num2,
       pcc.num3                                                   cov_component_num3,
       TRUNC(pcc.date1)                                           cov_component_date1,
       TRUNC(pcc.date2)                                           cov_component_date2,
       TRUNC(pcc.date3)                                           cov_component_date3,
       'COMPONENT'                                                cov_category,
       pcc.to_prorate_b                                           mmcom_to_prorate_b,
       pcc.legacy_data_id                                         mmcom_legacy_data_id,
       pcc.note                                                   mmcom_note,
       pcc.inc_value                                              mmcom_inc_value,
       pcc.agg_value                                              mmcom_agg_value,
       pcc.classification_code                                    mmcom_classification_code,
       pcc.policy_cov_component_pk                                source_pk,
       r.risk_base_record_fk,
       pcc.coverage_base_record_fk                                parent_cov_fk,
       p.policy_no || '^' || pth.policy_term_history_pk           policy_uniqueid
FROM   product_coverage_component prcc,
       coverage_component_code    ccc,
       coverage_code              cc,
       product_coverage           pc,
       policy_coverage_component  pcc,
       coverage                   c,
       risk                       r,
       transaction_log            ptt, 
       transaction_applied_term   tat,
       policy_term_history        pth,
       dw_tmp_stg_component       t, 
       policy                     p
WHERE  1=1
AND    ccc.code = prcc.coverage_component_code
AND    prcc.product_cov_component_pk = pcc.product_cov_component_fk
AND    cc.code = pc.coverage_code
AND    pc.code = c.product_coverage_code
       -- Transaction and Policy Term
AND    ptt.transaction_log_pk = tat.transaction_log_fk
AND    tat.term_base_record_fk = pth.policy_term_history_pk
AND    pcc.transaction_log_fk = ptt.transaction_log_pk
AND    pcc.base_record_b = 'N'
AND    pcc.record_mode_code = 'OFFICIAL'
AND    pcc.coverage_base_record_fk = c.coverage_pk
AND    c.base_record_b = 'Y'
AND    c.risk_base_record_fk = r.risk_pk
AND    r.base_record_b = 'Y'
AND    r.policy_fk = ptt.policy_fk
AND    pcc.policy_cov_component_pk = t.policy_cov_component_pk
AND    p.policy_pk = pth.policy_fk
;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>1035</xloc>
      <yloc>435</yloc>
    </entry>
    <entry>
      <name>dw_tmp_changed_comp exists?</name>
      <description>Check if table dw_tmp_changed_cov exists in source database.</description>
      <type>TABLE_EXISTS</type>
      <tablename>dw_tmp_changed_comp</tablename>
      <schemaname/>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>827</xloc>
      <yloc>435</yloc>
    </entry>
    <entry>
      <name>Drop dw_tmp_changed_comp</name>
      <description/>
      <type>SQL</type>
      <sql>drop table dw_tmp_changed_comp purge;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>907</xloc>
      <yloc>355</yloc>
    </entry>
    <entry>
      <name>TR_Extract_Stg_Component_Irregular</name>
      <description>Extract irregular coverage data into STG_COVERAGE table.</description>
      <type>TRANS</type>
      <specification_method>rep_name</specification_method>
      <trans_object_id/>
      <filename/>
      <transname>TR_Extract_Stg_Component_Irregular</transname>
      <directory>/public/ETL/OLTP_To_Staging/Transformations</directory>
      <arg_from_previous>N</arg_from_previous>
      <params_from_previous>N</params_from_previous>
      <exec_per_row>N</exec_per_row>
      <clear_rows>N</clear_rows>
      <clear_files>N</clear_files>
      <set_logfile>N</set_logfile>
      <logfile/>
      <logext/>
      <add_date>N</add_date>
      <add_time>N</add_time>
      <loglevel>Basic</loglevel>
      <cluster>N</cluster>
      <slave_server_name/>
      <set_append_logfile>N</set_append_logfile>
      <wait_until_finished>Y</wait_until_finished>
      <follow_abort_remote>N</follow_abort_remote>
      <create_parent_folder>N</create_parent_folder>
      <logging_remote_work>N</logging_remote_work>
      <run_configuration/>
      <parameters>
        <pass_all_parameters>Y</pass_all_parameters>
      </parameters>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>1243</xloc>
      <yloc>435</yloc>
    </entry>
    <entry>
      <name>TR_Extract_Stg_Policy_Irregular</name>
      <description>Extract irregular coverage data into STG_COVERAGE table.</description>
      <type>TRANS</type>
      <specification_method>rep_name</specification_method>
      <trans_object_id/>
      <filename/>
      <transname>TR_Extract_Stg_Policy_Irregular</transname>
      <directory>/public/ETL/OLTP_To_Staging/Transformations</directory>
      <arg_from_previous>N</arg_from_previous>
      <params_from_previous>N</params_from_previous>
      <exec_per_row>N</exec_per_row>
      <clear_rows>N</clear_rows>
      <clear_files>N</clear_files>
      <set_logfile>N</set_logfile>
      <logfile/>
      <logext/>
      <add_date>N</add_date>
      <add_time>N</add_time>
      <loglevel>Basic</loglevel>
      <cluster>N</cluster>
      <slave_server_name/>
      <set_append_logfile>N</set_append_logfile>
      <wait_until_finished>Y</wait_until_finished>
      <follow_abort_remote>N</follow_abort_remote>
      <create_parent_folder>N</create_parent_folder>
      <logging_remote_work>N</logging_remote_work>
      <run_configuration/>
      <parameters>
        <pass_all_parameters>Y</pass_all_parameters>
      </parameters>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>427</xloc>
      <yloc>531</yloc>
    </entry>
  </entries>
  <hops>
    <hop>
      <from>START</from>
      <to>Check DAILY</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>Check DAILY</from>
      <to>DUMMY</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Check DAILY</from>
      <to>TR_SET_STG_ID_KEY_VARIABLES</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>TR_SET_STG_ID_KEY_VARIABLES</from>
      <to>dw_tmp_stg_coverage exists?</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>TR_SET_STG_ID_KEY_VARIABLES</from>
      <to>dw_tmp_stg_risk exists?</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>TR_SET_STG_ID_KEY_VARIABLES</from>
      <to>dw_tmp_stg_component exists?</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>TR_SET_STG_ID_KEY_VARIABLES</from>
      <to>TR_Extract_Stg_Policy_Irregular</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>dw_tmp_stg_risk exists?</from>
      <to>Drop dw_tmp_stg_risk</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Drop dw_tmp_stg_risk</from>
      <to>Create dw_tmp_stg_risk</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>dw_tmp_stg_risk exists?</from>
      <to>Create dw_tmp_stg_risk</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>dw_tmp_stg_coverage exists?</from>
      <to>Drop dw_tmp_stg_coverage</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Drop dw_tmp_stg_coverage</from>
      <to>Create dw_tmp_stg_coverage</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>dw_tmp_stg_coverage exists?</from>
      <to>Create dw_tmp_stg_coverage</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>dw_tmp_stg_component exists?</from>
      <to>Drop dw_tmp_stg_component</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Drop dw_tmp_stg_component</from>
      <to>Create dw_tmp_stg_component</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>dw_tmp_stg_component exists?</from>
      <to>Create dw_tmp_stg_component</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Create dw_tmp_stg_risk</from>
      <to>dw_tmp_changed_risk exists?</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>dw_tmp_changed_risk exists?</from>
      <to>Drop dw_tmp_changed_risk</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Drop dw_tmp_changed_risk</from>
      <to>Create dw_tmp_changed_risk</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>dw_tmp_changed_risk exists?</from>
      <to>Create dw_tmp_changed_risk</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Create dw_tmp_stg_coverage</from>
      <to>dw_tmp_changed_cov exists?</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>dw_tmp_changed_cov exists?</from>
      <to>Drop dw_tmp_changed_cov</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Drop dw_tmp_changed_cov</from>
      <to>Create dw_tmp_changed_cov</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>dw_tmp_changed_cov exists?</from>
      <to>Create dw_tmp_changed_cov</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Create dw_tmp_stg_component</from>
      <to>dw_tmp_changed_comp exists?</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>dw_tmp_changed_comp exists?</from>
      <to>Drop dw_tmp_changed_comp</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Drop dw_tmp_changed_comp</from>
      <to>Create dw_tmp_changed_comp</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>dw_tmp_changed_comp exists?</from>
      <to>Create dw_tmp_changed_comp</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Create dw_tmp_changed_risk</from>
      <to>TR_Extract_Stg_Risk_Irregular</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Create dw_tmp_changed_cov</from>
      <to>TR_Extract_Stg_Coverage_Irregular</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Create dw_tmp_changed_comp</from>
      <to>TR_Extract_Stg_Component_Irregular</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
  </hops>
  <notepads>
  </notepads>
</job>
