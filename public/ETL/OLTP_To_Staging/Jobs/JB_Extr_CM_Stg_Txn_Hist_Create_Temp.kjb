<job>
  <name>JB_Extr_CM_Stg_Txn_Hist_Create_Temp</name>
  <description/>
  <extended_description/>
  <job_version/>
  <job_status>0</job_status>
  <directory>/public/ETL/OLTP_To_Staging/Jobs</directory>
  <created_user>-</created_user>
  <created_date>2014/10/22 10:11:59.888</created_date>
  <modified_user>-</modified_user>
  <modified_date>2018/01/23 13:58:10.201</modified_date>
  <parameters>
    </parameters>
  <connection>
    <name>Delphi_OLTP</name>
    <server>${G_OLTP_DB_HOST}</server>
    <type>ORACLE</type>
    <access>Native</access>
    <database>${G_OLTP_DB_NAME}</database>
    <port>${G_OLTP_DB_PORT}</port>
    <username>${G_OLTP_DB_USERNAME}</username>
    <password>${G_OLTP_DB_PWD}</password>
    <servername/>
    <data_tablespace>${G_OLTP_DB_DATA}</data_tablespace>
    <index_tablespace>${G_OLTP_DB_INDEX}</index_tablespace>
    <attributes>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_LOWERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_UPPERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>IS_CLUSTERED</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>PORT_NUMBER</code>
        <attribute>${G_OLTP_DB_PORT}</attribute>
      </attribute>
      <attribute>
        <code>QUOTE_ALL_FIELDS</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>SUPPORTS_BOOLEAN_DATA_TYPE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>USE_POOLING</code>
        <attribute>N</attribute>
      </attribute>
    </attributes>
  </connection>
  <connection>
    <name>DW_Log_Link</name>
    <server>${G_LOG_DB_HOST}</server>
    <type>ORACLE</type>
    <access>Native</access>
    <database>${G_LOG_DB_NAME}</database>
    <port>${G_LOG_DB_PORT}</port>
    <username>${G_LOG_DB_USERNAME}</username>
    <password>${G_LOG_DB_PWD}</password>
    <servername/>
    <data_tablespace>${G_LOG_DB_DATA}</data_tablespace>
    <index_tablespace>${G_LOG_DB_INDEX}</index_tablespace>
    <attributes>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_LOWERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_UPPERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>IS_CLUSTERED</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>PORT_NUMBER</code>
        <attribute>${G_LOG_DB_PORT}</attribute>
      </attribute>
      <attribute>
        <code>QUOTE_ALL_FIELDS</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>SUPPORTS_BOOLEAN_DATA_TYPE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>USE_POOLING</code>
        <attribute>N</attribute>
      </attribute>
    </attributes>
  </connection>
  <slaveservers>
    <slaveserver>
      <name>4Sight BI - PDI Server</name>
      <hostname>10.0.0.21</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>joe</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>Carte 1</name>
      <hostname>localhost</hostname>
      <port>9081</port>
      <webAppName/>
      <username>cluster</username>
      <password>Encrypted 2be98afc86aa7f2e4cb1aa265cd86aac8</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>DI Server</name>
      <hostname>localhost</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>joe</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_ETL_DEV</name>
      <hostname>magspentaho</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>shota</username>
      <password>Encrypted 2be98afc86aa7f2e4cb79ce63d69dbbdb</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_ETL_SERVER</name>
      <hostname>http://magspentaho</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>shota</username>
      <password>Encrypted 2be98afc86aa7f2e4cb79ce63d69dbbdb</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_ETL_TEST</name>
      <hostname>magspentahotest</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_PENTAHO</name>
      <hostname>magspentaho</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_PENTAHO_BTS</name>
      <hostname>129.144.25.104</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_PENTAHO_DEV</name>
      <hostname>magspentahodev</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>Master</name>
      <hostname>localhost</hostname>
      <port>8081</port>
      <webAppName/>
      <username>cluster</username>
      <password>Encrypted 2be98afc86aa7f2e4cb1aa265cd86aac8</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>SERVER1</name>
      <hostname>LOCALHOST</hostname>
      <port>3306</port>
      <webAppName/>
      <username>root</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>SLAVE ONE</name>
      <hostname>192.168.2.101</hostname>
      <port>3306</port>
      <webAppName/>
      <username>root</username>
      <password>Encrypted 2be98afc86aa7f2e4a418bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>SLAVE TWO</name>
      <hostname>192.168.2.101</hostname>
      <port>3306</port>
      <webAppName/>
      <username>root</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>Slave1</name>
      <hostname>localhost</hostname>
      <port>8082</port>
      <webAppName/>
      <username>cluster</username>
      <password>Encrypted 2be98afc86aa7f2e4cb1aa265cd86aac8</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>Slave2</name>
      <hostname>localhost</hostname>
      <port>8083</port>
      <webAppName/>
      <username>cluster</username>
      <password>Encrypted 2be98afc86aa7f2e4cb1aa265cd86aac8</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>Slave3</name>
      <hostname>localhost</hostname>
      <port>8084</port>
      <webAppName/>
      <username>cluster</username>
      <password>Encrypted 2be98afc86aa7f2e4cb1aa265cd86aac8</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>local DIS</name>
      <hostname>localhost</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>magspentahodev</name>
      <hostname>magspentahodev</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
  </slaveservers>
  <job-log-table>
    <connection>DW_LOG_Link</connection>
    <schema/>
    <table>${G_DB_JOB_LOG_TABLE}</table>
    <size_limit_lines/>
    <interval/>
    <timeout_days/>
    <field>
      <id>ID_JOB</id>
      <enabled>Y</enabled>
      <name>ID_JOB</name>
    </field>
    <field>
      <id>CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>CHANNEL_ID</name>
    </field>
    <field>
      <id>JOBNAME</id>
      <enabled>Y</enabled>
      <name>JOBNAME</name>
    </field>
    <field>
      <id>STATUS</id>
      <enabled>Y</enabled>
      <name>STATUS</name>
    </field>
    <field>
      <id>LINES_READ</id>
      <enabled>Y</enabled>
      <name>LINES_READ</name>
    </field>
    <field>
      <id>LINES_WRITTEN</id>
      <enabled>Y</enabled>
      <name>LINES_WRITTEN</name>
    </field>
    <field>
      <id>LINES_UPDATED</id>
      <enabled>Y</enabled>
      <name>LINES_UPDATED</name>
    </field>
    <field>
      <id>LINES_INPUT</id>
      <enabled>Y</enabled>
      <name>LINES_INPUT</name>
    </field>
    <field>
      <id>LINES_OUTPUT</id>
      <enabled>Y</enabled>
      <name>LINES_OUTPUT</name>
    </field>
    <field>
      <id>LINES_REJECTED</id>
      <enabled>Y</enabled>
      <name>LINES_REJECTED</name>
    </field>
    <field>
      <id>ERRORS</id>
      <enabled>Y</enabled>
      <name>ERRORS</name>
    </field>
    <field>
      <id>STARTDATE</id>
      <enabled>Y</enabled>
      <name>STARTDATE</name>
    </field>
    <field>
      <id>ENDDATE</id>
      <enabled>Y</enabled>
      <name>ENDDATE</name>
    </field>
    <field>
      <id>LOGDATE</id>
      <enabled>Y</enabled>
      <name>LOGDATE</name>
    </field>
    <field>
      <id>DEPDATE</id>
      <enabled>Y</enabled>
      <name>DEPDATE</name>
    </field>
    <field>
      <id>REPLAYDATE</id>
      <enabled>Y</enabled>
      <name>REPLAYDATE</name>
    </field>
    <field>
      <id>LOG_FIELD</id>
      <enabled>Y</enabled>
      <name>LOG_FIELD</name>
    </field>
    <field>
      <id>EXECUTING_SERVER</id>
      <enabled>N</enabled>
      <name>EXECUTING_SERVER</name>
    </field>
    <field>
      <id>EXECUTING_USER</id>
      <enabled>N</enabled>
      <name>EXECUTING_USER</name>
    </field>
    <field>
      <id>START_JOB_ENTRY</id>
      <enabled>N</enabled>
      <name>START_JOB_ENTRY</name>
    </field>
    <field>
      <id>CLIENT</id>
      <enabled>N</enabled>
      <name>CLIENT</name>
    </field>
  </job-log-table>
  <jobentry-log-table>
    <connection/>
    <schema/>
    <table/>
    <timeout_days/>
    <field>
      <id>ID_BATCH</id>
      <enabled>Y</enabled>
      <name>ID_BATCH</name>
    </field>
    <field>
      <id>CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>CHANNEL_ID</name>
    </field>
    <field>
      <id>LOG_DATE</id>
      <enabled>Y</enabled>
      <name>LOG_DATE</name>
    </field>
    <field>
      <id>JOBNAME</id>
      <enabled>Y</enabled>
      <name>TRANSNAME</name>
    </field>
    <field>
      <id>JOBENTRYNAME</id>
      <enabled>Y</enabled>
      <name>STEPNAME</name>
    </field>
    <field>
      <id>LINES_READ</id>
      <enabled>Y</enabled>
      <name>LINES_READ</name>
    </field>
    <field>
      <id>LINES_WRITTEN</id>
      <enabled>Y</enabled>
      <name>LINES_WRITTEN</name>
    </field>
    <field>
      <id>LINES_UPDATED</id>
      <enabled>Y</enabled>
      <name>LINES_UPDATED</name>
    </field>
    <field>
      <id>LINES_INPUT</id>
      <enabled>Y</enabled>
      <name>LINES_INPUT</name>
    </field>
    <field>
      <id>LINES_OUTPUT</id>
      <enabled>Y</enabled>
      <name>LINES_OUTPUT</name>
    </field>
    <field>
      <id>LINES_REJECTED</id>
      <enabled>Y</enabled>
      <name>LINES_REJECTED</name>
    </field>
    <field>
      <id>ERRORS</id>
      <enabled>Y</enabled>
      <name>ERRORS</name>
    </field>
    <field>
      <id>RESULT</id>
      <enabled>Y</enabled>
      <name>RESULT</name>
    </field>
    <field>
      <id>NR_RESULT_ROWS</id>
      <enabled>Y</enabled>
      <name>NR_RESULT_ROWS</name>
    </field>
    <field>
      <id>NR_RESULT_FILES</id>
      <enabled>Y</enabled>
      <name>NR_RESULT_FILES</name>
    </field>
    <field>
      <id>LOG_FIELD</id>
      <enabled>N</enabled>
      <name>LOG_FIELD</name>
    </field>
    <field>
      <id>COPY_NR</id>
      <enabled>N</enabled>
      <name>COPY_NR</name>
    </field>
  </jobentry-log-table>
  <channel-log-table>
    <connection/>
    <schema/>
    <table/>
    <timeout_days/>
    <field>
      <id>ID_BATCH</id>
      <enabled>Y</enabled>
      <name>ID_BATCH</name>
    </field>
    <field>
      <id>CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>CHANNEL_ID</name>
    </field>
    <field>
      <id>LOG_DATE</id>
      <enabled>Y</enabled>
      <name>LOG_DATE</name>
    </field>
    <field>
      <id>LOGGING_OBJECT_TYPE</id>
      <enabled>Y</enabled>
      <name>LOGGING_OBJECT_TYPE</name>
    </field>
    <field>
      <id>OBJECT_NAME</id>
      <enabled>Y</enabled>
      <name>OBJECT_NAME</name>
    </field>
    <field>
      <id>OBJECT_COPY</id>
      <enabled>Y</enabled>
      <name>OBJECT_COPY</name>
    </field>
    <field>
      <id>REPOSITORY_DIRECTORY</id>
      <enabled>Y</enabled>
      <name>REPOSITORY_DIRECTORY</name>
    </field>
    <field>
      <id>FILENAME</id>
      <enabled>Y</enabled>
      <name>FILENAME</name>
    </field>
    <field>
      <id>OBJECT_ID</id>
      <enabled>Y</enabled>
      <name>OBJECT_ID</name>
    </field>
    <field>
      <id>OBJECT_REVISION</id>
      <enabled>Y</enabled>
      <name>OBJECT_REVISION</name>
    </field>
    <field>
      <id>PARENT_CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>PARENT_CHANNEL_ID</name>
    </field>
    <field>
      <id>ROOT_CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>ROOT_CHANNEL_ID</name>
    </field>
  </channel-log-table>
  <checkpoint-log-table>
    <connection/>
    <schema/>
    <table/>
    <timeout_days/>
    <max_nr_retries/>
    <run_retry_period/>
    <namespace_parameter/>
    <save_parameters/>
    <save_result_rows/>
    <save_result_files/>
    <field>
      <id>ID_JOB_RUN</id>
      <enabled>Y</enabled>
      <name>ID_JOB_RUN</name>
    </field>
    <field>
      <id>ID_JOB</id>
      <enabled>Y</enabled>
      <name>ID_JOB</name>
    </field>
    <field>
      <id>JOBNAME</id>
      <enabled>Y</enabled>
      <name>JOBNAME</name>
    </field>
    <field>
      <id>NAMESPACE</id>
      <enabled>Y</enabled>
      <name>NAMESPACE</name>
    </field>
    <field>
      <id>CHECKPOINT_NAME</id>
      <enabled>Y</enabled>
      <name>CHECKPOINT_NAME</name>
    </field>
    <field>
      <id>CHECKPOINT_COPYNR</id>
      <enabled>Y</enabled>
      <name>CHECKPOINT_COPYNR</name>
    </field>
    <field>
      <id>ATTEMPT_NR</id>
      <enabled>Y</enabled>
      <name>ATTEMPT_NR</name>
    </field>
    <field>
      <id>JOB_RUN_START_DATE</id>
      <enabled>Y</enabled>
      <name>JOB_RUN_START_DATE</name>
    </field>
    <field>
      <id>LOGDATE</id>
      <enabled>Y</enabled>
      <name>LOGDATE</name>
    </field>
    <field>
      <id>RESULT_XML</id>
      <enabled>Y</enabled>
      <name>RESULT_XML</name>
    </field>
    <field>
      <id>PARAMETER_XML</id>
      <enabled>Y</enabled>
      <name>PARAMETER_XML</name>
    </field>
  </checkpoint-log-table>
  <pass_batchid>N</pass_batchid>
  <shared_objects_file/>
  <entries>
    <entry>
      <name>START</name>
      <description/>
      <type>SPECIAL</type>
      <start>Y</start>
      <dummy>N</dummy>
      <repeat>N</repeat>
      <schedulerType>0</schedulerType>
      <intervalSeconds>0</intervalSeconds>
      <intervalMinutes>60</intervalMinutes>
      <hour>12</hour>
      <minutes>0</minutes>
      <weekDay>1</weekDay>
      <DayOfMonth>1</DayOfMonth>
      <parallel>Y</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>533</xloc>
      <yloc>453</yloc>
    </entry>
    <entry>
      <name>Create tmp clm base fks</name>
      <description/>
      <type>SQL</type>
      <sql>create table dw_tmp_clm_stg_txn_hist_fks
nologging pctfree 0
tablespace ${G_OLTP_DB_DATA}
as
select distinct pth.term_base_record_fk,
       r.risk_base_record_fk,
       c.coverage_base_record_fk,
       tmp.cm_transaction_detail_pk,
       id
from dw_tmp_clm_stg_txn_hist_txn tmp,
     policy_term_history pth,
     risk r,
     coverage c
where tmp.policy_term_fk = pth.policy_term_history_pk(+)
  and tmp.risk_fk        = r.risk_pk(+)
  and tmp.coverage_fk    = c.coverage_pk(+)
  and tmp.polsource      = 'OASIS PM'
union all
select distinct 0,
       risk_fk,
       coverage_fk,
       cm_transaction_detail_pk,
       id
 from  dw_tmp_clm_stg_txn_hist_txn tmp
where  tmp.polsource = 'CLAIM_POLICY';</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>395</xloc>
      <yloc>129</yloc>
    </entry>
    <entry>
      <name>Base FKs Exist?</name>
      <description/>
      <type>TABLE_EXISTS</type>
      <tablename>dw_tmp_clm_stg_txn_hist_fks</tablename>
      <schemaname/>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>218</xloc>
      <yloc>129</yloc>
    </entry>
    <entry>
      <name>Create tmp clm batch</name>
      <description/>
      <type>SQL</type>
      <sql>create table dw_tmp_clm_stg_txn_hist_batch
nologging pctfree 0
tablespace ${G_OLTP_DB_DATA}
as
SELECT b.cm_batch_no mmct_batch_no,
       b.cm_batch_type mmct_batch_type_code,
       cm_report.get_desc('CM_BATCH_TYPE_CODE',b.cm_batch_type,'LONG') mmct_batch_type_desc,
       b.batch_status mmct_batch_status_code,
       cs_report.get_lookup_code('CM_BATCH_STATUS',b.batch_status,'LONG') mmct_batch_status_desc,
       trunc(b.entry_date) mmct_batch_entry_date,
       trunc(b.accounting_date) mmct_batch_accounting_date,
       trunc(b.approval_date) mmct_batch_approval_date,
       b.approved_by mmct_batch_approved_by,
       b.branch_office mmct_batch_branch_office_code,
       cs_report.get_lookup_code('BRANCHOFF',b.branch_office,'LONG') mmct_batch_branch_office_desc,
       b.total_amount mmct_batch_tot_amt,
       b.total_quantity mmct_batch_tot_qty,
       to_number(NULL) mmct_batch_inv_qty,
       'CM_BATCH' mmct_batch_source,
       t.cm_transaction_pk,
       id
FROM cm_batch b,
     cm_transaction t,
     dw_tmp_clm_stg_txn_hist_txn tmp
WHERE cm_batch_fk IS NOt NULL
AND   t.cm_transaction_pk = tmp.cm_transaction_pk
AND b.cm_batch_pk = t.cm_batch_fk
UNION
sELECT ib.batch_no mmct_batch_no,
       ib.batch_type mmct_batch_type_code,
       cm_report.get_desc('CM_BATCH_TYPE_CODE',ib.batch_type,'LONG') mmct_batch_type_desc,
       ib.batch_status mmct_batch_status,
       cs_report.get_lookup_code('CM_BATCH_STATUS',ib.batch_status,'LONG') mmct_batch_status_desc,
       trunc(ib.entry_date) mmct_batch_entry_date,
       trunc(ib.accounting_date) mmct_batch_accounting_date,
       trunc(ib.approval_date) mmct_batch_approval_date,
       ib.approved_by mmct_batch_approved_by,
       ib.branch_office mmct_branch_office_code,
       cs_report.get_lookup_code('BRANCHOFF',ib.branch_office,'LONG') mmct_branch_office_desc,
       ib.total_amount mmct_batch_tot_amt,
       to_number(NULL) mmct_batch_tot_qty,
       ib.invoice_count mmct_batch_inv_qty,
       'CM_INVOICE_BATCH' mmct_batch_source,
       t.cm_transaction_pk,
       id
FROM cm_transaction t,
     cm_invoice_batch ib,
     cm_invoice i,
     dw_tmp_clm_stg_txn_hist_txn tmp
WHERE 1 = 1
and t.cm_transaction_pk = tmp.cm_transaction_pk
AND t.cm_invoice_fk       = i.cm_invoice_pk
AND i.cm_invoice_batch_fk = ib.cm_invoice_batch_pk;

</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>926</xloc>
      <yloc>130</yloc>
    </entry>
    <entry>
      <name>batch exists?</name>
      <description/>
      <type>TABLE_EXISTS</type>
      <tablename>dw_tmp_clm_stg_txn_hist_batch</tablename>
      <schemaname/>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>739</xloc>
      <yloc>130</yloc>
    </entry>
    <entry>
      <name>Create tmp clm inv</name>
      <description/>
      <type>SQL</type>
      <sql>create table dw_tmp_clm_stg_txn_hist_inv
nologging pctfree 0
tablespace ${G_OLTP_DB_DATA}
as
SELECT t.invoice_no mmct_invoice_no,
       trunc(t.invoice_date) mmct_invoice_date,
       t.invoice_amt mmct_invoice_amt,
       'CM_TRANSACTION' mmct_invoice_source,
       coalesce(payee_name,cs_get_client_name(t.entity_payee_fk)) mmct_payee_name,
       client_id mmct_payee_uniqueid,
       to_date(NULL) mmct_invoice_due_date,
       to_date(NULL) mmct_invoice_receive_date,
       to_date(NULL) mmct_invoice_accounting_date,
       to_char(NULL) mmct_invoice_cost_type_code,
       to_char(null) mmct_invoice_cost_type_desc,
       to_number(null) mmct_invoice_qty,
       to_number(null) mmct_invoice_denied_amt,
       to_number(null) mmct_invoice_sequence_no,
       to_char(NULL) mmct_invioce_invoicer_uniqueid,
       to_char(null) mmct_invoicer_name,
       t.cm_transaction_pk,
       id
  FROM cm_transaction t,
       entity e,
       dw_tmp_clm_stg_txn_hist_txn tmp
 WHERE t.cm_transaction_pk = tmp.cm_transaction_pk
   AND t.cm_invoice_fk IS NULL
   AND t.invoice_no    IS NOT NULL
   AND t.entity_payee_fk = e.entity_pk(+)
UNION
SELECT i.invoice_no mmct_invoice_no,
       trunc(i.invoice_date) mmct_invoice_date,
       i.invoice_amt mmct_invoice_amt,
       'CM_INVOICE' mmct_invoice_source,
       coalesce(i.invoicer_name,t.payee_name,
       cs_get_client_name(t.entity_payee_fk)) mmct_payee_name,
       ep.client_id mmct_payee_uniqueid,
       trunc(i.due_date) mmct_invoice_due_date,
       trunc(i.receive_date) mmct_invoice_receive_date,
       trunc(i.accounting_date) mmct_invoice_accounting_date,
       i.cm_cost_type_code mmct_invoice_cost_type_code,
       (select long_description
          from cm_cost_type_code
         where cm_cost_type_code = i.cm_cost_type_code) mmct_invoice_cost_type_desc,
       i.total_quantity mmct_invoice_qty,
       i.denied_amt mmct_invoice_denied_amt,
       i.cm_invoice_seq_no mmct_invoice_sequence_no,
       ei.client_id mmct_invioce_invoicer_uniqueid,
       invoicer_name mmct_invoicer_name,
       t.cm_transaction_pk,
       id
  FROM cm_transaction t,
       cm_invoice i,
       entity ei,
       entity ep,
       dw_tmp_clm_stg_txn_hist_txn tmp
 WHERE t.cm_transaction_pk = tmp.cm_transaction_pk
   AND t.cm_invoice_fk IS NOT NULL
   AND t.cm_invoice_fk = i.cm_invoice_pk
   AND i.entity_fk = ei.entity_pk
   AND t.entity_payee_fk = ep.entity_pk(+);
</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>1066</xloc>
      <yloc>453</yloc>
    </entry>
    <entry>
      <name>inv exists?</name>
      <description/>
      <type>TABLE_EXISTS</type>
      <tablename>dw_tmp_clm_stg_txn_hist_inv</tablename>
      <schemaname/>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>885</xloc>
      <yloc>453</yloc>
    </entry>
    <entry>
      <name>Create tmp clm status</name>
      <description/>
      <type>SQL</type>
      <sql>create table dw_tmp_clm_stg_txn_hist_status
nologging pctfree 0
tablespace ${G_OLTP_DB_DATA}
as
select rownum status_id,
       v.*
  from (
SELECT sh.status_start_date ct_changeEffectiveDate,
       sh.cm_transaction_status_code mmct_trans_status_code,
       sc.long_description mmct_trans_status_desc,
       trunc(sh.status_start_date) mmct_trans_status_date,
       ' ' ct_transactionFlag,
       sh.cm_trans_status_history_pk txn_status_fk,
       tmp.cm_transaction_pk,
       id,
       status_start_date,
       status_end_date 
  FROM cm_trans_status_history sh,
       cm_transaction_status_code sc,
       dw_tmp_clm_stg_txn_hist_txn tmp
 WHERE sh.cm_transaction_fk = tmp.cm_transaction_pk
   AND sh.cm_transaction_status_code = sc.cm_transaction_status_code
   AND NOT EXISTS(SELECT 'x'
                    FROM cm_trans_status_history sh1
                   WHERE sh1.cm_transaction_fk = sh.cm_transaction_fk
                     AND sh1.cm_trans_status_history_pk &lt; sh.cm_trans_status_history_pk)
UNION all
SELECT sh.status_start_date ct_changeEffectiveDate,
       sh.cm_transaction_status_code mmct_trans_status_code,
       sc.long_description mmct_trans_status_desc,
       trunc(sh.status_start_date) mmct_trans_status_date,
       'U' ct_transactionFlag,
       sh.cm_trans_status_history_pk txn_status_fk,
       tmp.cm_transaction_pk,
       id,
       status_start_date,
       status_end_date
  FROM cm_trans_status_history sh,
       cm_transaction_status_code sc,
       dw_tmp_clm_stg_txn_hist_txn tmp
 WHERE sh.cm_transaction_fk = tmp.cm_transaction_pk
   AND sh.cm_transaction_status_code = sc.cm_transaction_status_code
   AND EXISTS(SELECT 'x'
                    FROM cm_trans_status_history sh1
                   WHERE sh1.cm_transaction_fk = sh.cm_transaction_fk
                     AND sh1.cm_trans_status_history_pk &lt; sh.cm_trans_status_history_pk)    
union all
select distinct c.sys_create_time ct_changeEffectiveDate,
       'DUMMY' mmct_trans_status_code,
       'Dummy' mmct_trans_status_desc,
       trunc(tmp.mmct_trans_date) mmct_trans_status_date,
       ' ' ct_transactionFlag ,
      c.claim_pk cm_trans_status_history_pk,
      tmp.cm_transaction_pk,
      id,
      c.sys_create_time,
      c.sys_create_time
from claim c,
dw_tmp_clm_stg_txn_hist_txn tmp
where c.claim_pk = tmp.cm_transaction_pk
  and tmp.ct_typecode = 'DUMMY') v;
</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>74</xloc>
      <yloc>453</yloc>
    </entry>
    <entry>
      <name>Status Exist?</name>
      <description/>
      <type>TABLE_EXISTS</type>
      <tablename>dw_tmp_clm_stg_txn_hist_status</tablename>
      <schemaname/>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>252</xloc>
      <yloc>453</yloc>
    </entry>
    <entry>
      <name>Truncate dw_tmp_clm_stg_txn_hist_fks</name>
      <description/>
      <type>SQL</type>
      <sql>--drop table dw_tmp_clm_stg_txn_hist_fks;

begin
  ${G_OLTP_DB_OWNER}.DW_Truncate_Table('${G_OLTP_DB_OWNER}','dw_tmp_clm_stg_txn_hist_fks') ;
end;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>T</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>218</xloc>
      <yloc>27</yloc>
    </entry>
    <entry>
      <name>Insert tmp clm base fks</name>
      <description/>
      <type>SQL</type>
      <sql>insert /*+ append */ into dw_tmp_clm_stg_txn_hist_fks
select distinct pth.term_base_record_fk,
       r.risk_base_record_fk,
       c.coverage_base_record_fk,
       tmp.cm_transaction_detail_pk,
       id
from dw_tmp_clm_stg_txn_hist_txn tmp,
     policy_term_history pth,
     risk r,
     coverage c
where tmp.policy_term_fk = pth.policy_term_history_pk(+)
  and tmp.risk_fk        = r.risk_pk(+)
  and tmp.coverage_fk    = c.coverage_pk(+)
  and tmp.polsource      = 'OASIS PM'
union all
select distinct 0,
       risk_fk,
       coverage_fk,
       cm_transaction_detail_pk,
       id
 from  dw_tmp_clm_stg_txn_hist_txn tmp
where  tmp.polsource = 'CLAIM_POLICY';</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>395</xloc>
      <yloc>27</yloc>
    </entry>
    <entry>
      <name>Truncate dw_tmp_clm_stg_txn_hist_batch</name>
      <description/>
      <type>SQL</type>
      <sql>-- drop table dw_tmp_clm_stg_txn_hist_batch;

begin
  ${G_OLTP_DB_OWNER}.DW_Truncate_Table('${G_OLTP_DB_OWNER}','dw_tmp_clm_stg_txn_hist_batch') ;
end;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>T</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>739</xloc>
      <yloc>27</yloc>
    </entry>
    <entry>
      <name>Insert tmp clm batch</name>
      <description/>
      <type>SQL</type>
      <sql>insert /*+ append */ into dw_tmp_clm_stg_txn_hist_batch
SELECT b.cm_batch_no mmct_batch_no,
       b.cm_batch_type mmct_batch_type_code,
       cm_report.get_desc('CM_BATCH_TYPE_CODE',b.cm_batch_type,'LONG') mmct_batch_type_desc,
       b.batch_status mmct_batch_status_code,
       cs_report.get_lookup_code('CM_BATCH_STATUS',b.batch_status,'LONG') mmct_batch_status_desc,
       trunc(b.entry_date) mmct_batch_entry_date,
       trunc(b.accounting_date) mmct_batch_accounting_date,
       trunc(b.approval_date) mmct_batch_approval_date,
       b.approved_by mmct_batch_approved_by,
       b.branch_office mmct_batch_branch_office_code,
       cs_report.get_lookup_code('BRANCHOFF',b.branch_office,'LONG') mmct_batch_branch_office_desc,
       b.total_amount mmct_batch_tot_amt,
       b.total_quantity mmct_batch_tot_qty,
       to_number(NULL) mmct_batch_inv_qty,
       'CM_BATCH' mmct_batch_source,
       t.cm_transaction_pk,
       id
FROM cm_batch b,
     cm_transaction t,
     dw_tmp_clm_stg_txn_hist_txn tmp
WHERE cm_batch_fk IS NOt NULL
AND   t.cm_transaction_pk = tmp.cm_transaction_pk
AND b.cm_batch_pk = t.cm_batch_fk
UNION
sELECT ib.batch_no mmct_batch_no,
       ib.batch_type mmct_batch_type_code,
       cm_report.get_desc('CM_BATCH_TYPE_CODE',ib.batch_type,'LONG') mmct_batch_type_desc,
       ib.batch_status mmct_batch_status,
       cs_report.get_lookup_code('CM_BATCH_STATUS',ib.batch_status,'LONG') mmct_batch_status_desc,
       trunc(ib.entry_date) mmct_batch_entry_date,
       trunc(ib.accounting_date) mmct_batch_accounting_date,
       trunc(ib.approval_date) mmct_batch_approval_date,
       ib.approved_by mmct_batch_approved_by,
       ib.branch_office mmct_branch_office_code,
       cs_report.get_lookup_code('BRANCHOFF',ib.branch_office,'LONG') mmct_branch_office_desc,
       ib.total_amount mmct_batch_tot_amt,
       to_number(NULL) mmct_batch_tot_qty,
       ib.invoice_count mmct_batch_inv_qty,
       'CM_INVOICE_BATCH' mmct_batch_source,
       t.cm_transaction_pk,
       id
FROM cm_transaction t,
     cm_invoice_batch ib,
     cm_invoice i,
     dw_tmp_clm_stg_txn_hist_txn tmp
WHERE 1 = 1
and t.cm_transaction_pk = tmp.cm_transaction_pk
AND t.cm_invoice_fk       = i.cm_invoice_pk
AND i.cm_invoice_batch_fk = ib.cm_invoice_batch_pk;

</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>926</xloc>
      <yloc>27</yloc>
    </entry>
    <entry>
      <name>Truncate dw_tmp_clm_stg_txn_hist_status</name>
      <description/>
      <type>SQL</type>
      <sql>-- drop table dw_tmp_clm_stg_txn_hist_status;
begin
  ${G_OLTP_DB_OWNER}.DW_Truncate_Table('${G_OLTP_DB_OWNER}','dw_tmp_clm_stg_txn_hist_status') ;
end;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>T</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>252</xloc>
      <yloc>331</yloc>
    </entry>
    <entry>
      <name>Insert tmp clm status</name>
      <description/>
      <type>SQL</type>
      <sql>insert /*+ append */ into dw_tmp_clm_stg_txn_hist_status
select rownum status_id,
       v.*
  from (
SELECT sh.status_start_date ct_changeEffectiveDate,
       sh.cm_transaction_status_code mmct_trans_status_code,
       sc.long_description mmct_trans_status_desc,
       trunc(sh.status_start_date) mmct_trans_status_date,
       ' ' ct_transactionFlag,
       sh.cm_trans_status_history_pk txn_status_fk,
       tmp.cm_transaction_pk,
       id,
       status_start_date,
       status_end_date 
  FROM cm_trans_status_history sh,
       cm_transaction_status_code sc,
       dw_tmp_clm_stg_txn_hist_txn tmp
 WHERE sh.cm_transaction_fk = tmp.cm_transaction_pk
   AND sh.cm_transaction_status_code = sc.cm_transaction_status_code
   AND NOT EXISTS(SELECT 'x'
                    FROM cm_trans_status_history sh1
                   WHERE sh1.cm_transaction_fk = sh.cm_transaction_fk
                     AND sh1.cm_trans_status_history_pk &lt; sh.cm_trans_status_history_pk)
UNION all
SELECT sh.status_start_date ct_changeEffectiveDate,
       sh.cm_transaction_status_code mmct_trans_status_code,
       sc.long_description mmct_trans_status_desc,
       trunc(sh.status_start_date) mmct_trans_status_date,
       'U' ct_transactionFlag,
       sh.cm_trans_status_history_pk txn_status_fk,
       tmp.cm_transaction_pk,
       id,
       status_start_date,
       status_end_date
  FROM cm_trans_status_history sh,
       cm_transaction_status_code sc,
       dw_tmp_clm_stg_txn_hist_txn tmp
 WHERE sh.cm_transaction_fk = tmp.cm_transaction_pk
   AND sh.cm_transaction_status_code = sc.cm_transaction_status_code
   AND EXISTS(SELECT 'x'
                    FROM cm_trans_status_history sh1
                   WHERE sh1.cm_transaction_fk = sh.cm_transaction_fk
                     AND sh1.cm_trans_status_history_pk &lt; sh.cm_trans_status_history_pk)    
union all
select distinct c.sys_create_time ct_changeEffectiveDate,
       'DUMMY' mmct_trans_status_code,
       'Dummy' mmct_trans_status_desc,
       trunc(tmp.mmct_trans_date) mmct_trans_status_date,
       ' ' ct_transactionFlag ,
      c.claim_pk cm_trans_status_history_pk,
      tmp.cm_transaction_pk,
      id,
      c.sys_create_time,
      c.sys_create_time
from claim c,
dw_tmp_clm_stg_txn_hist_txn tmp
where c.claim_pk = tmp.cm_transaction_pk
  and tmp.ct_typecode = 'DUMMY') v;
</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>74</xloc>
      <yloc>331</yloc>
    </entry>
    <entry>
      <name>Truncate dw_tmp_clm_stg_txn_hist_inv</name>
      <description/>
      <type>SQL</type>
      <sql>--drop table dw_tmp_clm_stg_txn_hist_inv;
begin
  ${G_OLTP_DB_OWNER}.DW_Truncate_Table('${G_OLTP_DB_OWNER}','dw_tmp_clm_stg_txn_hist_inv') ;
end;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>T</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>885</xloc>
      <yloc>338</yloc>
    </entry>
    <entry>
      <name>Insert tmp clm inv</name>
      <description/>
      <type>SQL</type>
      <sql>insert /*+ append */ into dw_tmp_clm_stg_txn_hist_inv
SELECT t.invoice_no mmct_invoice_no,
       trunc(t.invoice_date) mmct_invoice_date,
       t.invoice_amt mmct_invoice_amt,
       'CM_TRANSACTION' mmct_invoice_source,
       coalesce(payee_name,cs_get_client_name(t.entity_payee_fk)) mmct_payee_name,
       client_id mmct_payee_uniqueid,
       to_date(NULL) mmct_invoice_due_date,
       to_date(NULL) mmct_invoice_receive_date,
       to_date(NULL) mmct_invoice_accounting_date,
       to_char(NULL) mmct_invoice_cost_type_code,
       to_char(null) mmct_invoice_cost_type_desc,
       to_number(null) mmct_invoice_qty,
       to_number(null) mmct_invoice_denied_amt,
       to_number(null) mmct_invoice_sequence_no,
       to_char(NULL) mmct_invioce_invoicer_uniqueid,
       to_char(null) mmct_invoicer_name,
       t.cm_transaction_pk,
       id
  FROM cm_transaction t,
       entity e,
       dw_tmp_clm_stg_txn_hist_txn tmp
 WHERE t.cm_transaction_pk = tmp.cm_transaction_pk
   AND t.cm_invoice_fk IS NULL
   AND t.invoice_no    IS NOT NULL
   AND t.entity_payee_fk = e.entity_pk(+)
UNION
SELECT i.invoice_no mmct_invoice_no,
       trunc(i.invoice_date) mmct_invoice_date,
       i.invoice_amt mmct_invoice_amt,
       'CM_INVOICE' mmct_invoice_source,
       coalesce(i.invoicer_name,t.payee_name,
       cs_get_client_name(t.entity_payee_fk)) mmct_payee_name,
       ep.client_id mmct_payee_uniqueid,
       trunc(i.due_date) mmct_invoice_due_date,
       trunc(i.receive_date) mmct_invoice_receive_date,
       trunc(i.accounting_date) mmct_invoice_accounting_date,
       i.cm_cost_type_code mmct_invoice_cost_type_code,
       (select long_description
          from cm_cost_type_code
         where cm_cost_type_code = i.cm_cost_type_code) mmct_invoice_cost_type_desc,
       i.total_quantity mmct_invoice_qty,
       i.denied_amt mmct_invoice_denied_amt,
       i.cm_invoice_seq_no mmct_invoice_sequence_no,
       ei.client_id mmct_invioce_invoicer_uniqueid,
       invoicer_name mmct_invoicer_name,
       t.cm_transaction_pk,
       id
  FROM cm_transaction t,
       cm_invoice i,
       entity ei,
       entity ep,
       dw_tmp_clm_stg_txn_hist_txn tmp
 WHERE t.cm_transaction_pk = tmp.cm_transaction_pk
   AND t.cm_invoice_fk IS NOT NULL
   AND t.cm_invoice_fk = i.cm_invoice_pk
   AND i.entity_fk = ei.entity_pk
   AND t.entity_payee_fk = ep.entity_pk(+);
</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>1066</xloc>
      <yloc>338</yloc>
    </entry>
  </entries>
  <hops>
    <hop>
      <from>START</from>
      <to>Base FKs Exist?</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>Base FKs Exist?</from>
      <to>Create tmp clm base fks</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>batch exists?</from>
      <to>Create tmp clm batch</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>START</from>
      <to>batch exists?</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>inv exists?</from>
      <to>Create tmp clm inv</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>START</from>
      <to>inv exists?</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>START</from>
      <to>Status Exist?</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>Status Exist?</from>
      <to>Create tmp clm status</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Base FKs Exist?</from>
      <to>Truncate dw_tmp_clm_stg_txn_hist_fks</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Truncate dw_tmp_clm_stg_txn_hist_fks</from>
      <to>Insert tmp clm base fks</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>batch exists?</from>
      <to>Truncate dw_tmp_clm_stg_txn_hist_batch</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Truncate dw_tmp_clm_stg_txn_hist_batch</from>
      <to>Insert tmp clm batch</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Status Exist?</from>
      <to>Truncate dw_tmp_clm_stg_txn_hist_status</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Truncate dw_tmp_clm_stg_txn_hist_status</from>
      <to>Insert tmp clm status</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>inv exists?</from>
      <to>Truncate dw_tmp_clm_stg_txn_hist_inv</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Truncate dw_tmp_clm_stg_txn_hist_inv</from>
      <to>Insert tmp clm inv</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
  </hops>
  <notepads>
  </notepads>
</job>
