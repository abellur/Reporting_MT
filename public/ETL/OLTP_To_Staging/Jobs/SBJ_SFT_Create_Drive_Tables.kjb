<job>
  <name>SBJ_SFT_Create_Drive_Tables</name>
  <description>Job to create temp tables used for STG_FINANCIALTRANSACTION load.</description>
  <extended_description>Date         By     Description
02/10/2015   Jma    Issue 169274. Add a new path for OASIS version 2016.1 or above.</extended_description>
  <job_version/>
  <job_status>0</job_status>
  <directory>/public/ETL/OLTP_To_Staging/Jobs</directory>
  <created_user>-</created_user>
  <created_date>2014/10/30 11:32:58.197</created_date>
  <modified_user>-</modified_user>
  <modified_date>2018/08/07 05:14:41.753</modified_date>
  <parameters>
    </parameters>
  <connection>
    <name>Delphi_OLTP</name>
    <server>${G_OLTP_DB_HOST}</server>
    <type>ORACLE</type>
    <access>Native</access>
    <database>${G_OLTP_DB_NAME}</database>
    <port>${G_OLTP_DB_PORT}</port>
    <username>${G_OLTP_DB_USERNAME}</username>
    <password>${G_OLTP_DB_PWD}</password>
    <servername/>
    <data_tablespace>${G_OLTP_DB_DATA}</data_tablespace>
    <index_tablespace>${G_OLTP_DB_INDEX}</index_tablespace>
    <attributes>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_LOWERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_UPPERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>IS_CLUSTERED</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>PORT_NUMBER</code>
        <attribute>${G_OLTP_DB_PORT}</attribute>
      </attribute>
      <attribute>
        <code>QUOTE_ALL_FIELDS</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>SUPPORTS_BOOLEAN_DATA_TYPE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>USE_POOLING</code>
        <attribute>N</attribute>
      </attribute>
    </attributes>
  </connection>
  <slaveservers>
    <slaveserver>
      <name>4Sight BI - PDI Server</name>
      <hostname>10.0.0.21</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>joe</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>Carte 1</name>
      <hostname>localhost</hostname>
      <port>9081</port>
      <webAppName/>
      <username>cluster</username>
      <password>Encrypted 2be98afc86aa7f2e4cb1aa265cd86aac8</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>DI Server</name>
      <hostname>localhost</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>joe</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_ETL_DEV</name>
      <hostname>magspentaho</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>shota</username>
      <password>Encrypted 2be98afc86aa7f2e4cb79ce63d69dbbdb</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_ETL_SERVER</name>
      <hostname>http://magspentaho</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>shota</username>
      <password>Encrypted 2be98afc86aa7f2e4cb79ce63d69dbbdb</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_ETL_TEST</name>
      <hostname>magspentahotest</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_PENTAHO</name>
      <hostname>magspentaho</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_PENTAHO_BTS</name>
      <hostname>129.144.25.104</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_PENTAHO_DEV</name>
      <hostname>magspentahodev</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>Master</name>
      <hostname>localhost</hostname>
      <port>8081</port>
      <webAppName/>
      <username>cluster</username>
      <password>Encrypted 2be98afc86aa7f2e4cb1aa265cd86aac8</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>SERVER1</name>
      <hostname>LOCALHOST</hostname>
      <port>3306</port>
      <webAppName/>
      <username>root</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>SLAVE ONE</name>
      <hostname>192.168.2.101</hostname>
      <port>3306</port>
      <webAppName/>
      <username>root</username>
      <password>Encrypted 2be98afc86aa7f2e4a418bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>SLAVE TWO</name>
      <hostname>192.168.2.101</hostname>
      <port>3306</port>
      <webAppName/>
      <username>root</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>Slave1</name>
      <hostname>localhost</hostname>
      <port>8082</port>
      <webAppName/>
      <username>cluster</username>
      <password>Encrypted 2be98afc86aa7f2e4cb1aa265cd86aac8</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>Slave2</name>
      <hostname>localhost</hostname>
      <port>8083</port>
      <webAppName/>
      <username>cluster</username>
      <password>Encrypted 2be98afc86aa7f2e4cb1aa265cd86aac8</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>Slave3</name>
      <hostname>localhost</hostname>
      <port>8084</port>
      <webAppName/>
      <username>cluster</username>
      <password>Encrypted 2be98afc86aa7f2e4cb1aa265cd86aac8</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>local DIS</name>
      <hostname>localhost</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>magspentahodev</name>
      <hostname>magspentahodev</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
  </slaveservers>
  <job-log-table>
    <connection/>
    <schema/>
    <table/>
    <size_limit_lines/>
    <interval/>
    <timeout_days/>
    <field>
      <id>ID_JOB</id>
      <enabled>Y</enabled>
      <name>ID_JOB</name>
    </field>
    <field>
      <id>CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>CHANNEL_ID</name>
    </field>
    <field>
      <id>JOBNAME</id>
      <enabled>Y</enabled>
      <name>JOBNAME</name>
    </field>
    <field>
      <id>STATUS</id>
      <enabled>Y</enabled>
      <name>STATUS</name>
    </field>
    <field>
      <id>LINES_READ</id>
      <enabled>Y</enabled>
      <name>LINES_READ</name>
    </field>
    <field>
      <id>LINES_WRITTEN</id>
      <enabled>Y</enabled>
      <name>LINES_WRITTEN</name>
    </field>
    <field>
      <id>LINES_UPDATED</id>
      <enabled>Y</enabled>
      <name>LINES_UPDATED</name>
    </field>
    <field>
      <id>LINES_INPUT</id>
      <enabled>Y</enabled>
      <name>LINES_INPUT</name>
    </field>
    <field>
      <id>LINES_OUTPUT</id>
      <enabled>Y</enabled>
      <name>LINES_OUTPUT</name>
    </field>
    <field>
      <id>LINES_REJECTED</id>
      <enabled>Y</enabled>
      <name>LINES_REJECTED</name>
    </field>
    <field>
      <id>ERRORS</id>
      <enabled>Y</enabled>
      <name>ERRORS</name>
    </field>
    <field>
      <id>STARTDATE</id>
      <enabled>Y</enabled>
      <name>STARTDATE</name>
    </field>
    <field>
      <id>ENDDATE</id>
      <enabled>Y</enabled>
      <name>ENDDATE</name>
    </field>
    <field>
      <id>LOGDATE</id>
      <enabled>Y</enabled>
      <name>LOGDATE</name>
    </field>
    <field>
      <id>DEPDATE</id>
      <enabled>Y</enabled>
      <name>DEPDATE</name>
    </field>
    <field>
      <id>REPLAYDATE</id>
      <enabled>Y</enabled>
      <name>REPLAYDATE</name>
    </field>
    <field>
      <id>LOG_FIELD</id>
      <enabled>Y</enabled>
      <name>LOG_FIELD</name>
    </field>
    <field>
      <id>EXECUTING_SERVER</id>
      <enabled>N</enabled>
      <name>EXECUTING_SERVER</name>
    </field>
    <field>
      <id>EXECUTING_USER</id>
      <enabled>N</enabled>
      <name>EXECUTING_USER</name>
    </field>
    <field>
      <id>START_JOB_ENTRY</id>
      <enabled>N</enabled>
      <name>START_JOB_ENTRY</name>
    </field>
    <field>
      <id>CLIENT</id>
      <enabled>N</enabled>
      <name>CLIENT</name>
    </field>
  </job-log-table>
  <jobentry-log-table>
    <connection/>
    <schema/>
    <table/>
    <timeout_days/>
    <field>
      <id>ID_BATCH</id>
      <enabled>Y</enabled>
      <name>ID_BATCH</name>
    </field>
    <field>
      <id>CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>CHANNEL_ID</name>
    </field>
    <field>
      <id>LOG_DATE</id>
      <enabled>Y</enabled>
      <name>LOG_DATE</name>
    </field>
    <field>
      <id>JOBNAME</id>
      <enabled>Y</enabled>
      <name>TRANSNAME</name>
    </field>
    <field>
      <id>JOBENTRYNAME</id>
      <enabled>Y</enabled>
      <name>STEPNAME</name>
    </field>
    <field>
      <id>LINES_READ</id>
      <enabled>Y</enabled>
      <name>LINES_READ</name>
    </field>
    <field>
      <id>LINES_WRITTEN</id>
      <enabled>Y</enabled>
      <name>LINES_WRITTEN</name>
    </field>
    <field>
      <id>LINES_UPDATED</id>
      <enabled>Y</enabled>
      <name>LINES_UPDATED</name>
    </field>
    <field>
      <id>LINES_INPUT</id>
      <enabled>Y</enabled>
      <name>LINES_INPUT</name>
    </field>
    <field>
      <id>LINES_OUTPUT</id>
      <enabled>Y</enabled>
      <name>LINES_OUTPUT</name>
    </field>
    <field>
      <id>LINES_REJECTED</id>
      <enabled>Y</enabled>
      <name>LINES_REJECTED</name>
    </field>
    <field>
      <id>ERRORS</id>
      <enabled>Y</enabled>
      <name>ERRORS</name>
    </field>
    <field>
      <id>RESULT</id>
      <enabled>Y</enabled>
      <name>RESULT</name>
    </field>
    <field>
      <id>NR_RESULT_ROWS</id>
      <enabled>Y</enabled>
      <name>NR_RESULT_ROWS</name>
    </field>
    <field>
      <id>NR_RESULT_FILES</id>
      <enabled>Y</enabled>
      <name>NR_RESULT_FILES</name>
    </field>
    <field>
      <id>LOG_FIELD</id>
      <enabled>N</enabled>
      <name>LOG_FIELD</name>
    </field>
    <field>
      <id>COPY_NR</id>
      <enabled>N</enabled>
      <name>COPY_NR</name>
    </field>
  </jobentry-log-table>
  <channel-log-table>
    <connection/>
    <schema/>
    <table/>
    <timeout_days/>
    <field>
      <id>ID_BATCH</id>
      <enabled>Y</enabled>
      <name>ID_BATCH</name>
    </field>
    <field>
      <id>CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>CHANNEL_ID</name>
    </field>
    <field>
      <id>LOG_DATE</id>
      <enabled>Y</enabled>
      <name>LOG_DATE</name>
    </field>
    <field>
      <id>LOGGING_OBJECT_TYPE</id>
      <enabled>Y</enabled>
      <name>LOGGING_OBJECT_TYPE</name>
    </field>
    <field>
      <id>OBJECT_NAME</id>
      <enabled>Y</enabled>
      <name>OBJECT_NAME</name>
    </field>
    <field>
      <id>OBJECT_COPY</id>
      <enabled>Y</enabled>
      <name>OBJECT_COPY</name>
    </field>
    <field>
      <id>REPOSITORY_DIRECTORY</id>
      <enabled>Y</enabled>
      <name>REPOSITORY_DIRECTORY</name>
    </field>
    <field>
      <id>FILENAME</id>
      <enabled>Y</enabled>
      <name>FILENAME</name>
    </field>
    <field>
      <id>OBJECT_ID</id>
      <enabled>Y</enabled>
      <name>OBJECT_ID</name>
    </field>
    <field>
      <id>OBJECT_REVISION</id>
      <enabled>Y</enabled>
      <name>OBJECT_REVISION</name>
    </field>
    <field>
      <id>PARENT_CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>PARENT_CHANNEL_ID</name>
    </field>
    <field>
      <id>ROOT_CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>ROOT_CHANNEL_ID</name>
    </field>
  </channel-log-table>
  <checkpoint-log-table>
    <connection/>
    <schema/>
    <table/>
    <timeout_days/>
    <max_nr_retries/>
    <run_retry_period/>
    <namespace_parameter/>
    <save_parameters/>
    <save_result_rows/>
    <save_result_files/>
    <field>
      <id>ID_JOB_RUN</id>
      <enabled>Y</enabled>
      <name>ID_JOB_RUN</name>
    </field>
    <field>
      <id>ID_JOB</id>
      <enabled>Y</enabled>
      <name>ID_JOB</name>
    </field>
    <field>
      <id>JOBNAME</id>
      <enabled>Y</enabled>
      <name>JOBNAME</name>
    </field>
    <field>
      <id>NAMESPACE</id>
      <enabled>Y</enabled>
      <name>NAMESPACE</name>
    </field>
    <field>
      <id>CHECKPOINT_NAME</id>
      <enabled>Y</enabled>
      <name>CHECKPOINT_NAME</name>
    </field>
    <field>
      <id>CHECKPOINT_COPYNR</id>
      <enabled>Y</enabled>
      <name>CHECKPOINT_COPYNR</name>
    </field>
    <field>
      <id>ATTEMPT_NR</id>
      <enabled>Y</enabled>
      <name>ATTEMPT_NR</name>
    </field>
    <field>
      <id>JOB_RUN_START_DATE</id>
      <enabled>Y</enabled>
      <name>JOB_RUN_START_DATE</name>
    </field>
    <field>
      <id>LOGDATE</id>
      <enabled>Y</enabled>
      <name>LOGDATE</name>
    </field>
    <field>
      <id>RESULT_XML</id>
      <enabled>Y</enabled>
      <name>RESULT_XML</name>
    </field>
    <field>
      <id>PARAMETER_XML</id>
      <enabled>Y</enabled>
      <name>PARAMETER_XML</name>
    </field>
  </checkpoint-log-table>
  <pass_batchid>N</pass_batchid>
  <shared_objects_file/>
  <entries>
    <entry>
      <name>START</name>
      <description/>
      <type>SPECIAL</type>
      <start>Y</start>
      <dummy>N</dummy>
      <repeat>N</repeat>
      <schedulerType>0</schedulerType>
      <intervalSeconds>0</intervalSeconds>
      <intervalMinutes>60</intervalMinutes>
      <hour>12</hour>
      <minutes>0</minutes>
      <weekDay>1</weekDay>
      <DayOfMonth>1</DayOfMonth>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>53</xloc>
      <yloc>258</yloc>
    </entry>
    <entry>
      <name>Create dw_tmp_sft_transdetail1</name>
      <description/>
      <type>SQL</type>
      <sql>create table dw_tmp_sft_transdetail1 nologging PCTFREE 0 
tablespace ${G_OLTP_DB_DATA}
as
SELECT /*+ full(tmpb) ordered use_hash(tmpb m)*/ 
       m.fm_master_pk financialTransaction_uniqueID,
       decode(tmpb.ACCOUNT_NO, NULL, '-1', tmpb.ACCOUNT_NO || '^' || tmpb.BILLING_ACCOUNT_PK) account1_uniqueID,
       CAST (-1 AS VARCHAR2(100)) account2_uniqueID,
       ep.client_id company_uniqueID,
       decode(m.policy_fk, -1, '-1', 0, '0', p.policy_no||'^'||m.policy_term_history_fk) policy_uniqueid,
       m.risk_fk,
       m.coverage_fk,
       m.claim_fk,
       nvl(decode(m.fm_trans_type_code , 'REVERSAL', r1.batch_fk, 
                                         'VOID', r1.batch_fk, r.batch_fk), -1) batch_fk,
       nvl(decode(m.fm_trans_type_code , 'REVERSAL', r.parent_receipt_fk, 
                                         'VOID', r.parent_receipt_fk, r.receipt_pk), -1) receipt_pk,  
       nvl(m.fm_bill_fk, -1) fm_bill_fk,           
       m.sub_account_code, 
       tmpb.effective_from_date,
       tmpb.effective_date + 1 effective_to_date,
       nvl(m.installment_no, -1) installment_no,
       CAST (-1 AS VARCHAR2(100)) financial_group_uniqueid,  
       tmpb.payment_plan_id,             
       m.accounting_date,
       m.effective_from_date trans_effective_date,
       m.due_date,
       m.aging_date,
       m.invoice_date,
       m.fm_trans_type_code,
       m.transaction_status,
       m.fm_master_pk,
       m.transaction_reference_no,
       m.amount,
       m.policy_fk,       
       m.policy_term_history_fk, 
       m.source_record_fk,
       m.source_table_name,
       CAST (NULL AS NUMBER) null_key,
       decode(m.source_code, 'PM', 'POLICY', 'FM', 'FINANCE', 'CM', 'CLAIM') transaction_source,
       decode(m1.source_code, 'PM', 'POLICY', 'FM', 'FINANCE', 'CM', 'CLAIM') original_transaction_source,
       m1.source_record_fk original_source_record_fk,
       m1.source_table_name original_source_table_name,
       m1.policy_term_history_fk original_trans_term_fk,
       m1.risk_fk original_risk_fk,
       m1.coverage_fk original_coverage_fk,
       NVL(m1.fm_trans_type_code,'Unknown') original_trans_type_code,
       m1.tail_coverage_b original_trans_tail_coverage_b,
       m1.transaction_date original_transaction_date,
       DECODE(m.fm_trans_type_code, 'COMMISSION', m1.amount, NULL) original_trans_amount,
       CAST (-1 AS VARCHAR2(100)) producer_uniqueid,
       m.reason_code,
       tr.long_description reason_desc,
       m.transaction_description,
       -- #192757
       CASE 
         WHEN m.fm_trans_type_code = 'COMMISSION' AND ba.account_type = 'A' THEN 
           'PAID'
         ELSE 
           'N/A' 
       END record_status
  FROM dw_tmp_sft_transdetailb tmpb,
       FM_Master m,
       Receipt r,
       Receipt r1,
       FM_Master m1,
       Fm_Trans_Reason tr,
       Policy_Term_History h,
       Entity ep,
       Entity ea,
       policy p,
       billing_account ba
 WHERE tmpb.fm_master_pk = m.fm_master_pk
   AND m.billing_account_fk = ba.billing_account_pk
   and m.policy_fk = p.policy_pk(+)
   and ea.entity_pk(+) = tmpb.issue_company_entity_fk
   AND ep.entity_pk(+) = h.issue_company_entity_fk
   AND h.policy_term_history_pk(+) = m.policy_term_history_fk
   AND m.source_record_fk = r.receipt_pk(+)
   AND r.parent_receipt_fk = r1.receipt_pk(+)
   AND m.billing_account_fk = tmpb.billing_account_pk
   AND m.source_record_fk = m1.fm_master_pk(+)
   AND m.reason_code = tr.reason_code(+)
   AND nvl(tmpb.accounting_mode, 'BAL_FWD') = 'BAL_FWD';</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>655</xloc>
      <yloc>90</yloc>
    </entry>
    <entry>
      <name>Create dw_tmp_sft_transdetail2</name>
      <description/>
      <type>SQL</type>
      <sql>create table dw_tmp_sft_transdetail2 nologging PCTFREE 0 
tablespace ${G_OLTP_DB_DATA}
as
SELECT c.fm_open_item_change_pk financialTransaction_uniqueID,
       decode(ba.ACCOUNT_NO, NULL, '-1', ba.ACCOUNT_NO || '^' || ba.BILLING_ACCOUNT_PK) account1_uniqueID,
       CAST (-1 AS VARCHAR2(100)) account2_uniqueID,
       ep.client_id company_uniqueID,
       decode(i.policy_fk, -1, '-1', 0, '0', 
              FMN_Get_PM.Get_Policy_No(i.policy_fk, i.policy_term_history_fk) || 
              '^' | |i.policy_term_history_fk) policy_uniqueID,
       i.risk_fk,
       i.coverage_fk,
       i.claim_fk,
       nvl(decode(m.fm_trans_type_code , 'REVERSAL', r1.batch_fk, 
                                         'VOID', r1.batch_fk, r.batch_fk), -1) batch_fk,
       nvl(decode(c.open_item_change_type , 'REVERSAL', r.parent_receipt_fk, 
                                            'VOID', r.parent_receipt_fk, r.receipt_pk), -1) receipt_pk,            
       i.fm_bill_fk,       
       i.sub_account_code,
       bt.effective_from_date,
       bt.effective_to_date, 
       nvl(i.installment_no, -1) installment_no,
       TO_CHAR(i.transaction_fk) financial_group_uniqueid,  
       FMN_Billing_Setup.Get_BS_Attr('PM', i.policy_fk, i.risk_fk, i.coverage_fk, 'POLICY', i.policy_fk,
                                          'PLAN_ID', c.transaction_date,  bt.effective_to_date -1) payment_plan_id, 
       c.transaction_date,
       m.effective_from_date trans_effective_date,   
       i.bill_due_date due_date,
       i.installment_due_date aging_date,
       i.bill_date invoice_date, 
       c.open_item_change_type fm_trans_type_code,
       i.transaction_status, 
       i.fm_open_item_pk fm_master_pk,
       c.transaction_reference_no,
       (c.amount + c.open_balance) amount,  
       i.policy_fk,                       
       i.policy_term_history_fk,
       m.source_record_fk,
       m.source_table_name,
       CAST (NULL AS NUMBER) null_key,
       decode(m.source_code, 'PM', 'POLICY', 'FM', 'FINANCE', 'CM', 'CLAIM') transaction_source,
       decode(m1.source_code, 'PM', 'POLICY', 'FM', 'FINANCE', 'CM', 'CLAIM') original_transaction_source,
       m1.source_record_fk original_source_record_fk,
       m1.source_table_name original_source_table_name,
       m1.policy_term_history_fk original_trans_term_fk,
       m1.risk_fk original_risk_fk,
       m1.coverage_fk original_coverage_fk,
       NVL(m1.fm_trans_type_code,'Unknown') original_trans_type_code,
       m1.tail_coverage_b original_trans_tail_coverage_b,
       m1.transaction_date original_transaction_date,
       DECODE(m.fm_trans_type_code, 'COMMISSION', m1.amount, NULL) original_trans_amount,
       CAST (-1 AS VARCHAR2(100)) producer_uniqueid,
       m.reason_code,
       tr.long_description reason_desc,
       m.transaction_description,
       -- #192757
       CASE 
         WHEN m.fm_trans_type_code = 'COMMISSION' AND ba.account_type = 'A' THEN 
           'PAID'
         ELSE 
           'N/A' 
       END record_status
  FROM FM_Open_Item i,
       Fm_Open_Item_Change c,
       Booked_Term bt,
       Receipt r,
       Receipt r1,
       FM_Master m,
       FM_Master m1,
       FM_Trans_Reason tr,     
       Billing_Account ba,
       Policy_Term_History h,
       Entity ep,
       Entity ea
 WHERE ea.entity_pk(+) = ba.issue_company_entity_fk
   AND ep.entity_pk(+) = h.issue_company_entity_fk
   AND h.policy_term_history_pk(+) = i.policy_term_history_fk
   AND i.fm_open_item_pk = c.fm_open_item_fk 
   AND i.policy_term_history_fk = bt.base_term_fk(+)  
   AND i.billing_account_fk = ba.billing_account_pk
   AND c.source_record_fk = m.fm_master_pk(+)
   AND m.source_record_fk = m1.fm_master_pk(+)
   AND m.reason_code = tr.reason_code(+)
   AND c.receipt_fk = r.receipt_pk(+)
   AND r.parent_receipt_fk = r1.receipt_pk(+)
   AND nvl(ba.accounting_mode, 'BAL_FWD') = 'OPEN_ITEM'
   AND instr('${CHUNK_NUMBER}',decode(i.policy_fk,-1,'1',substr(to_char(i.policy_fk),${CHUNK_POSITION},1))) > 0;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>857</xloc>
      <yloc>90</yloc>
    </entry>
    <entry>
      <name>Create dw_tmp_sft_transdetail3</name>
      <description/>
      <type>SQL</type>
      <sql>create table dw_tmp_sft_transdetail3 nologging PCTFREE 0 
tablespace ${G_OLTP_DB_DATA}
as
SELECT ac.agent_commission_pk financialTransaction_uniqueID,
       decode(ba.ACCOUNT_NO, NULL, '-1', ba.ACCOUNT_NO || '^' || ba.BILLING_ACCOUNT_PK) account1_uniqueID,
       CAST (-1 AS VARCHAR2(100)) account2_uniqueID,
       ep.client_id company_uniqueID,
       decode(ac.policy_fk, NULL, '-1', -1, '-1', 0, '0', 
              FMN_Get_PM.Get_Policy_No(ac.policy_fk, ac.policy_term_history_fk) || 
              '^' | |ac.policy_term_history_fk) policy_uniqueID,
       nvl(ac.risk_fk,-1) risk_fk,
       nvl(ac.coverage_fk,-1) coverage_fk,
       CAST (-1 AS NUMBER) claim_fk,
       CAST (-1 AS NUMBER) batch_fk,
       CAST (-1 AS NUMBER) receipt_pk,
       CAST (-1 AS NUMBER) fm_bill_fk,
       CAST ('AGENTCOMM' AS varchar2(10)) sub_account_code,
       bt.effective_from_date,
       bt.effective_to_date, 
       CAST (-1 AS NUMBER) installment_no, 
       CAST (-1 AS VARCHAR2(100)) financial_group_uniqueid,
       FMN_Billing_Setup.Get_BS_Attr('PM', ac.policy_fk, ac.risk_fk, ac.coverage_fk, 'POLICY', ac.policy_fk,
                                          'PLAN_ID', ac.accounting_date,  h.effective_to_date -1) payment_plan_id,
       ac.accounting_date,
       nvl(ac.transaction_effective_date,
           (SELECT MAX(tl.effective_from_date)
              FROM transaction_log tl
             WHERE tl.transaction_log_pk = m.source_record_fk
               AND m.source_table_name = 'TRANSACTION_LOG')) trans_effective_date,
       CAST (NULL AS DATE) due_date,
       CAST (NULL AS DATE) aging_date,
       CAST (NULL AS DATE) invoice_date,
       CAST ('AGENTCOMM' AS varchar2(10)) fm_trans_type_code,
       'C' transaction_status,
       ac.agent_commission_pk fm_master_pk,
       ac.transaction_reference_no,
       nvl(ac.commission_amount, 0) amount,
       ac.policy_fk,
       ac.policy_term_history_fk,
       ac.fm_master_fk source_record_fk,
       CAST ('FM_MASTER' AS VARCHAR2(30)) source_table_name,
       CAST (NULL AS NUMBER) null_key,
       'FINANCE' transaction_source,
       decode(m.source_code, 'PM', 'POLICY', 'FM', 'FINANCE', 'CM', 'CLAIM') original_transaction_source,
       m.source_record_fk original_source_record_fk,
       m.source_table_name original_source_table_name,
       m.policy_term_history_fk original_trans_term_fk,
       m.risk_fk original_risk_fk,
       m.coverage_fk original_coverage_fk,       
       (SELECT tl.transaction_type_code
          FROM transaction_log tl
         WHERE tl.transaction_log_pk = m.source_record_fk 
           AND m.source_table_name = 'TRANSACTION_LOG'
           AND ROWNUM = 1) original_trans_type_code,
       m.tail_coverage_b original_trans_tail_coverage_b,
       m.transaction_date original_transaction_date,
       -- #165442
       ac.amount_calculated_on original_trans_amount,
       el.client_id producer_uniqueid,
       CAST (NULL AS VARCHAR2(10)) reason_code,
       CAST (NULL AS VARCHAR2(40)) reason_desc,
       m.transaction_description,
       -- #165442
       ac.record_status
  FROM Agent_Commission ac,
       Agent_License al,
       Agent a,
       Booked_Term bt,
       FM_Master m,
       Billing_Account ba,
       Policy_Term_History h,
       Entity ep,
       Entity ea,
       Entity el
WHERE ea.entity_pk(+) = ba.issue_company_entity_fk
   AND ep.entity_pk(+) = h.issue_company_entity_fk
   AND ac.policy_term_history_fk = h.policy_term_history_pk(+) 
   AND ac.policy_term_history_fk = bt.base_term_fk(+)
   AND ac.billing_account_fk = ba.billing_account_pk(+)
   AND ac.PRODUCER_AGENT_LICENSE_FK = al.agent_license_pk(+)
   AND al.agent_fk = a.agent_pk(+)
   AND a.entity_fk = el.entity_pk(+)
   AND ac.fm_master_fk = m.fm_master_pk(+)
   AND instr('${CHUNK_NUMBER}',decode(ac.policy_fk,-1,'1',substr(to_char(nvl(ac.policy_fk, -1)),${CHUNK_POSITION},1))) > 0;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>1058</xloc>
      <yloc>90</yloc>
    </entry>
    <entry>
      <name>Create transdeta</name>
      <description/>
      <type>SQL</type>
      <sql>create table dw_tmp_sft_transdetaila nologging PCTFREE 0 
tablespace ${G_OLTP_DB_DATA}
as
select /*+ use_hash(m ba) ordered */
       m.fm_master_pk,
       m.policy_fk,
       m.risk_fk,
       m.coverage_fk,
       m.transaction_date as_of_date,
       m.policy_term_history_fk,
       nvl(ba.accounting_mode,'BAL_FWD') accounting_mode,
       ba.account_no,
       ba.billing_account_pk,
       ba.issue_company_entity_fk,
       bt.effective_to_date - 1 effective_date,
       bt.effective_from_date      
  from fm_master m,
       billing_account ba,
       booked_term bt
 where instr('${CHUNK_NUMBER}',decode(m.policy_fk, -1,'1',substr(to_char(m.policy_fk),${CHUNK_POSITION},1))) > 0
   and nvl(ba.accounting_mode,'BAL_FWD') = 'BAL_FWD'
   and m.billing_account_fk = ba.billing_account_pk
   and m.policy_term_history_fk = bt.base_term_fk(+);
</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>274</xloc>
      <yloc>90</yloc>
    </entry>
    <entry>
      <name>Create transdetb</name>
      <description/>
      <type>SQL</type>
      <sql>create table dw_tmp_sft_transdetailb nologging PCTFREE 0 
tablespace ${G_OLTP_DB_DATA}
as
select fm_master_pk,
       plan_id payment_plan_id,
       account_no, 
       billing_account_pk,
       issue_company_entity_fk,
       accounting_mode,
       effective_from_date,
       effective_date
from (
SELECT bt.fm_master_pk,
       decode(bs.source_subsystem_code,
               'PM',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'RISK', 20,
                      'COVERAGE', 10,
                      99),
               'CM',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'OCCURRENCE', 20,
                      'CLAIM', 10,
                      99),
               'WC',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'RISK', 20,
                      99),99)
                       priority,
       pp.plan_id,
       bt.account_no,
       bt.billing_account_pk,
       bt.issue_company_entity_fk,
       accounting_mode,
       bt.effective_from_date,
       bt.effective_date,
       row_number() OVER (PARTITION BY fm_master_pk ORDER BY
       decode(bs.source_subsystem_code,
               'PM',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'RISK', 20,
                      'COVERAGE', 10, 
                      99),
               'CM',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'OCCURRENCE', 20,
                      'CLAIM', 10,
                      99),
               'WC',
               decode(bs.billing_setup_level, 
                      'POLICY', 30,
                      'RISK', 20,
                      99),99) asc,
       bs.effective_to_date DESC,
       bs.effective_from_date DESC,
       bs.fm_billing_setup_pk DESC) pick
  FROM FM_Billing_Setup bs,
       dw_tmp_sft_transdetaila bt,
       payment_plan pp
 WHERE bs.accounting_from_date &lt;= bt.as_of_date AND bs.accounting_to_date > bt.as_of_date
   AND bs.effective_from_date &lt;= bt.effective_date AND bs.effective_to_date > bt.effective_date
   AND bs.source_record_fk     =  bt.policy_fk
   AND bs.source_record_fk2    IN (-1, bt.risk_fk)
   AND bs.source_record_fk3    IN (-1, bt.coverage_fk)
   and bt.effective_date is not null
   and bs.payment_plan_fk = pp.payment_plan_pk
   AND bs.source_subsystem_code = 'PM')
where pick = 1;  
insert 
  into dw_tmp_sft_transdetailb
select fm_master_pk,
       plan_id payment_plan_id,
       account_no,
       billing_account_pk,
       issue_company_entity_fk,
       accounting_mode,
       effective_from_date,
       effective_date
from (
SELECT bt.fm_master_pk,
       decode(bs.source_subsystem_code,
               'PM',
               decode(bs.billing_setup_level,
                      'POLICY', 30, 
                      'RISK', 20,
                      'COVERAGE', 10,
                      99),
               'CM',
               decode(bs.billing_setup_level, 
                      'POLICY', 30,
                      'OCCURRENCE', 20,
                      'CLAIM', 10,
                      99),
               'WC',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'RISK', 20,
                      99),99)
                       priority,
       pp.plan_Id,
       bt.account_no,
       bt.billing_account_pk,
       bt.issue_company_entity_fk,
       bt.accounting_mode,
       bt.effective_from_date,
       bt.effective_date,
       row_number() OVER (PARTITION BY fm_master_pk ORDER BY
       decode(bs.source_subsystem_code,
               'PM',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'RISK', 20,
                      'COVERAGE', 10,
                      99),
               'CM',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'OCCURRENCE', 20,
                      'CLAIM', 10,
                      99),
               'WC',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'RISK', 20,
                      99),99) asc,
       bs.effective_to_date DESC, 
       bs.effective_from_date DESC,
       bs.fm_billing_setup_pk DESC) pick
  FROM FM_Billing_Setup bs,
       dw_tmp_sft_transdetaila bt,
       payment_plan pp
 WHERE bs.accounting_from_date &lt;= bt.as_of_date AND bs.accounting_to_date > bt.as_of_date
   and bs.accounting_to_date   = to_date('01/01/3000','mm/dd/yyyy')
   AND bs.source_record_fk     =  bt.policy_fk
   AND bs.source_record_fk2    IN (-1, bt.risk_fk)
   AND bs.source_record_fk3    IN (-1, bt.coverage_fk) 
   and bt.effective_date is null
   and bs.payment_plan_fk = pp.payment_plan_pk
   AND bs.source_subsystem_code = 'PM')
where pick = 1;
insert 
  into dw_tmp_sft_transdetailb
select fm_master_pk,
       plan_id payment_plan_id,
       account_no,
       billing_account_pk,
       issue_company_entity_fk,
       accounting_mode,
       effective_from_date,
       effective_date
from ( 
SELECT /*+ ordered */ bt.fm_master_pk,
       decode(bs.source_subsystem_code,
               'PM',
               decode(bs.billing_setup_level,
                      'POLICY', 30, 
                      'RISK', 20,
                      'COVERAGE', 10,
                      99),
               'CM',
               decode(bs.billing_setup_level, 
                      'POLICY', 30,
                      'OCCURRENCE', 20,
                      'CLAIM', 10,
                      99),
               'WC',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'RISK', 20,
                      99),99)
                       priority,
       pp.plan_Id,
       bt.account_no,
       bt.billing_account_pk,
       bt.issue_company_entity_fk,
       bt.accounting_mode,
       bt.effective_from_date,
       bt.effective_date,
       row_number() OVER (PARTITION BY fm_master_pk ORDER BY
       decode(bs.source_subsystem_code,
               'PM',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'RISK', 20,
                      'COVERAGE', 10,
                      99),
               'CM',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'OCCURRENCE', 20,
                      'CLAIM', 10,
                      99),
               'WC',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'RISK', 20,
                      99),99) asc,
       bs.effective_to_date DESC, 
       bs.effective_from_date DESC,
       bs.fm_billing_setup_pk DESC) pick
  FROM (select a.*
         from dw_tmp_sft_transdetaila a
        where not exists(select 'x'
                           from dw_tmp_sft_transdetailb b
                          where b.fm_master_pk = a.fm_master_pk)) bt,
       FM_Billing_Setup bs,
       payment_plan pp
 WHERE bs.accounting_from_date &lt;= bt.as_of_date AND bs.accounting_to_date > bt.as_of_date
   AND bs.source_record_fk     =  bt.policy_fk
   AND bs.source_record_fk2    IN (-1, bt.risk_fk)
   AND bs.source_record_fk3    IN (-1, bt.coverage_fk) 
   and bs.payment_plan_fk = pp.payment_plan_pk
   AND bs.source_subsystem_code = 'PM')
where pick = 1; 
/* This will make sure all our data is accounted for if we did not take a hit on any
   of the above selects and were unable to find a payment plan */
insert 
  into dw_tmp_sft_transdetailb
select fm_master_pk,
       'UNK' payment_plan_id,
       account_no,
       billing_account_pk,
       issue_company_entity_fk,
       accounting_mode,
       effective_from_date,
       effective_date
from ( 
SELECT /*+ ordered */ 
       bt.fm_master_pk,
       bt.account_no,
       bt.billing_account_pk,
       bt.issue_company_entity_fk,
       bt.accounting_mode,
       bt.effective_from_date,
       bt.effective_date
  FROM (select a.*
         from dw_tmp_sft_transdetaila a
        where not exists(select 'x'
                           from dw_tmp_sft_transdetailb b
                          where b.fm_master_pk = a.fm_master_pk)) bt
    ) ; 
commit;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>455</xloc>
      <yloc>90</yloc>
    </entry>
    <entry>
      <name>Simple evaluation - OASIS Version</name>
      <description/>
      <type>SIMPLE_EVAL</type>
      <valuetype>variable</valuetype>
      <fieldname/>
      <variablename>${v_20161_or_later}</variablename>
      <fieldtype>string</fieldtype>
      <mask/>
      <comparevalue>Y</comparevalue>
      <minvalue/>
      <maxvalue/>
      <successcondition>equal</successcondition>
      <successnumbercondition>equal</successnumbercondition>
      <successbooleancondition>false</successbooleancondition>
      <successwhenvarset>N</successwhenvarset>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>187</xloc>
      <yloc>258</yloc>
    </entry>
    <entry>
      <name>Create dw_tmp_sft_transdetail1 2</name>
      <description/>
      <type>SQL</type>
      <sql>create table dw_tmp_sft_transdetail1 nologging PCTFREE 0 
tablespace ${G_OLTP_DB_DATA}
as
SELECT /*+ full(tmpb) ordered use_hash(tmpb m)*/ 
       m.fm_master_pk financialTransaction_uniqueID,
       decode(tmpb.ACCOUNT_NO, NULL, '-1', tmpb.ACCOUNT_NO || '^' || tmpb.BILLING_ACCOUNT_PK) account1_uniqueID,
       CAST (-1 AS VARCHAR2(100)) account2_uniqueID,
       ep.client_id company_uniqueID,
       decode(m.policy_fk, -1, '-1', 0, '0', 
       (SELECT cp.policy_no || '^PYN' || SUBSTR(cp.policy_start_date,-2) || '^' || cp.cm_policy_pk policy_uniqueID
          FROM cm_policy cp
         WHERE cp.cm_policy_pk =  m.policy_fk
         UNION ALL
        SELECT p1.policy_no||'^'||nvl(h.term_id,m.policy_term_history_fk)
          FROM fm_policy_v p1
         WHERE p1.fm_policy_pk = m.policy_fk)) policy_uniqueid,
       m.risk_fk,
       m.coverage_fk,
       m.claim_fk,
       nvl(decode(m.fm_trans_type_code , 'REVERSAL', r1.batch_fk, 
                                         'VOID', r1.batch_fk, r.batch_fk), -1) batch_fk,
       nvl(decode(m.fm_trans_type_code , 'REVERSAL', r.parent_receipt_fk, 
                                         'VOID', r.parent_receipt_fk, r.receipt_pk), -1) receipt_pk,  
       nvl(m.fm_bill_fk, -1) fm_bill_fk,           
       m.sub_account_code, 
       tmpb.effective_from_date,
       tmpb.effective_date + 1 effective_to_date,
       nvl(m.installment_no, -1) installment_no,
       CAST (-1 AS VARCHAR2(100)) financial_group_uniqueid,  
       tmpb.payment_plan_id,             
       m.accounting_date,
       m.effective_from_date trans_effective_date,
       m.due_date,
       m.aging_date,
       m.invoice_date,
       m.fm_trans_type_code,
       m.transaction_status,
       m.fm_master_pk,
       m.transaction_reference_no,
       m.amount,
       m.policy_fk,       
       m.policy_term_history_fk, 
       m.source_record_fk,
       m.source_table_name,
       CAST (NULL AS NUMBER) null_key,
       decode(m.source_code, 'PM', 'POLICY', 'FM', 'FINANCE', 'CM', 'CLAIM') transaction_source,
       decode(m1.source_code, 'PM', 'POLICY', 'FM', 'FINANCE', 'CM', 'CLAIM') original_transaction_source,
       m1.source_record_fk original_source_record_fk,
       m1.source_table_name original_source_table_name,
       m1.policy_term_history_fk original_trans_term_fk,
       m1.risk_fk original_risk_fk,
       m1.coverage_fk original_coverage_fk,
       NVL(m1.fm_trans_type_code,'Unknown') original_trans_type_code,
       m1.tail_coverage_b original_trans_tail_coverage_b,
       m1.transaction_date original_transaction_date,
       DECODE(m.fm_trans_type_code, 'COMMISSION', m1.amount, NULL) original_trans_amount,
       CAST (-1 AS VARCHAR2(100)) producer_uniqueid,
       m.reason_code,
       tr.long_description reason_desc,
       m.transaction_description,
       -- #192757
       CASE 
         WHEN m.fm_trans_type_code = 'COMMISSION' AND ba.account_type = 'A' THEN 
           'PAID'
         ELSE 
           'N/A' 
       END record_status
  FROM dw_tmp_sft_transdetailb tmpb,
       FM_Master m,
       Receipt r,
       Receipt r1,
       FM_Master m1,
       Fm_Trans_Reason tr,
       -- Issue 169274, change to use FM_TERM_V view
       -- Policy_Term_History h,
       FM_Term_V h,
       Entity ep,
       Entity ea,
       -- Issue 169274, change to use FM_POLICY_V view
       -- Policy p,
       Fm_Policy_V p,
       billing_account ba
 WHERE tmpb.fm_master_pk = m.fm_master_pk
   AND m.billing_account_fk = ba.billing_account_pk
   -- Issue 169274
   and m.policy_fk = p.fm_policy_pk(+)
   and ea.entity_pk(+) = tmpb.issue_company_entity_fk
   AND ep.entity_pk(+) = h.issue_company_entity_fk
   -- Issue 169274
   AND h.fm_term_pk(+) = m.policy_term_history_fk
   AND m.source_record_fk = r.receipt_pk(+)
   AND r.parent_receipt_fk = r1.receipt_pk(+)
   AND m.billing_account_fk = tmpb.billing_account_pk
   AND m.source_record_fk = m1.fm_master_pk(+)
   AND m.reason_code = tr.reason_code(+)
   AND M.FM_TRANS_TYPE_CODE  =  TR.FM_TRANS_TYPE_CODE(+)
   AND nvl(tmpb.accounting_mode, 'BAL_FWD') = 'BAL_FWD';</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>655</xloc>
      <yloc>429</yloc>
    </entry>
    <entry>
      <name>Create dw_tmp_sft_transdetail2 2</name>
      <description/>
      <type>SQL</type>
      <sql>create table dw_tmp_sft_transdetail2 nologging PCTFREE 0 
tablespace ${G_OLTP_DB_DATA}
as
SELECT c.fm_open_item_change_pk financialTransaction_uniqueID,
       decode(ba.ACCOUNT_NO, NULL, '-1', ba.ACCOUNT_NO || '^' || ba.BILLING_ACCOUNT_PK) account1_uniqueID,
       CAST (-1 AS VARCHAR2(100)) account2_uniqueID,
       ep.client_id company_uniqueID,
       decode(i.policy_fk, -1, '-1', 0, '0',        
       (SELECT cp.policy_no || '^PYN' || SUBSTR(cp.policy_start_date,-2) || '^' || cp.cm_policy_pk policy_uniqueID
          FROM cm_policy cp
         WHERE cp.cm_policy_pk = i.policy_fk
         UNION ALL
        SELECT p.policy_no||'^'||nvl(h.term_id,i.policy_term_history_fk）
          FROM fm_policy_v p
         WHERE p.fm_policy_pk = i.policy_fk)) policy_uniqueID,
       i.risk_fk,
       i.coverage_fk,
       i.claim_fk,
       nvl(decode(m.fm_trans_type_code , 'REVERSAL', r1.batch_fk, 
                                         'VOID', r1.batch_fk, r.batch_fk), -1) batch_fk,
       nvl(decode(c.open_item_change_type , 'REVERSAL', r.parent_receipt_fk, 
                                            'VOID', r.parent_receipt_fk, r.receipt_pk), -1) receipt_pk,            
       i.fm_bill_fk,       
       i.sub_account_code,
       bt.effective_from_date,
       bt.effective_to_date, 
       nvl(i.installment_no, -1) installment_no,
       TO_CHAR(i.transaction_fk) financial_group_uniqueid,  
       FMN_Billing_Setup.Get_BS_Attr('PM', i.policy_fk, i.risk_fk, i.coverage_fk, 'POLICY', i.policy_fk,
                                          'PLAN_ID', c.transaction_date,  bt.effective_to_date -1) payment_plan_id, 
       c.transaction_date,
       m.effective_from_date trans_effective_date,   
       i.bill_due_date due_date,
       i.installment_due_date aging_date,
       i.bill_date invoice_date, 
       c.open_item_change_type fm_trans_type_code,
       i.transaction_status, 
       i.fm_open_item_pk fm_master_pk,
       c.transaction_reference_no,
       (c.amount + c.open_balance) amount,  
       i.policy_fk,                       
       i.policy_term_history_fk,
       m.source_record_fk,
       m.source_table_name,
       CAST (NULL AS NUMBER) null_key,
       decode(m.source_code, 'PM', 'POLICY', 'FM', 'FINANCE', 'CM', 'CLAIM') transaction_source,
       decode(m1.source_code, 'PM', 'POLICY', 'FM', 'FINANCE', 'CM', 'CLAIM') original_transaction_source,
       m1.source_record_fk original_source_record_fk,
       m1.source_table_name original_source_table_name,
       m1.policy_term_history_fk original_trans_term_fk,
       m1.risk_fk original_risk_fk,
       m1.coverage_fk original_coverage_fk,
       NVL(m1.fm_trans_type_code,'Unknown') original_trans_type_code,
       m1.tail_coverage_b original_trans_tail_coverage_b,
       m1.transaction_date original_transaction_date,
       DECODE(m.fm_trans_type_code, 'COMMISSION', m1.amount, NULL) original_trans_amount,
       CAST (-1 AS VARCHAR2(100)) producer_uniqueid,
       m.reason_code,
       tr.long_description reason_desc,
       m.transaction_description,
       -- #192757
       CASE 
         WHEN m.fm_trans_type_code = 'COMMISSION' AND ba.account_type = 'A' THEN 
           'PAID'
         ELSE 
           'N/A' 
       END record_status
  FROM FM_Open_Item i,
       Fm_Open_Item_Change c,
       Booked_Term bt,
       Receipt r,
       Receipt r1,
       FM_Master m,
       FM_Master m1,
       FM_Trans_Reason tr,     
       Billing_Account ba,
       -- Issue 169274, change to use FM_TERM_V view
       -- Policy_Term_History h,
       Fm_Term_V h,
       Entity ep,
       Entity ea
 WHERE ea.entity_pk(+) = ba.issue_company_entity_fk
   AND ep.entity_pk(+) = h.issue_company_entity_fk
   -- Issue 169274, change to use FM_TERM_V view
   AND h.fm_term_pk(+) = i.policy_term_history_fk
   AND i.fm_open_item_pk = c.fm_open_item_fk 
   AND i.policy_term_history_fk = bt.base_term_fk(+)  
   AND i.billing_account_fk = ba.billing_account_pk
   AND c.source_record_fk = m.fm_master_pk(+)
   AND m.source_record_fk = m1.fm_master_pk(+)
   AND m.reason_code = tr.reason_code(+)
   AND M.FM_TRANS_TYPE_CODE  =  TR.FM_TRANS_TYPE_CODE(+)
   AND c.receipt_fk = r.receipt_pk(+)
   AND r.parent_receipt_fk = r1.receipt_pk(+)
   AND nvl(ba.accounting_mode, 'BAL_FWD') = 'OPEN_ITEM'
   AND instr('${CHUNK_NUMBER}',decode(i.policy_fk,-1,'1',substr(to_char(i.policy_fk),${CHUNK_POSITION},1))) > 0;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>857</xloc>
      <yloc>429</yloc>
    </entry>
    <entry>
      <name>Create dw_tmp_sft_transdetail3 2</name>
      <description/>
      <type>SQL</type>
      <sql>create table dw_tmp_sft_transdetail3 nologging PCTFREE 0 
tablespace ${G_OLTP_DB_DATA}
as
SELECT ac.agent_commission_pk financialTransaction_uniqueID,
       decode(ba.ACCOUNT_NO, NULL, '-1', ba.ACCOUNT_NO || '^' || ba.BILLING_ACCOUNT_PK) account1_uniqueID,
       CAST (-1 AS VARCHAR2(100)) account2_uniqueID,
       ep.client_id company_uniqueID,
       decode(ac.policy_fk, NULL, '-1', -1, '-1', 0, '0', 
       (SELECT cp.policy_no || '^PYN' || SUBSTR(cp.policy_start_date,-2) || '^' || cp.cm_policy_pk policy_uniqueID
          FROM cm_policy cp
         WHERE cp.cm_policy_pk =  ac.policy_fk
         UNION ALL
        SELECT p.policy_no||'^'||nvl(h.term_id,ac.policy_term_history_fk)
          FROM fm_policy_v p
         WHERE p.fm_policy_pk = ac.policy_fk)) policy_uniqueID,
       nvl(ac.risk_fk,-1) risk_fk,
       nvl(ac.coverage_fk,-1) coverage_fk,
       CAST (-1 AS NUMBER) claim_fk,
       CAST (-1 AS NUMBER) batch_fk,
       CAST (-1 AS NUMBER) receipt_pk,
       CAST (-1 AS NUMBER) fm_bill_fk,
       CAST ('AGENTCOMM' AS varchar2(10)) sub_account_code,
       bt.effective_from_date,
       bt.effective_to_date, 
       CAST (-1 AS NUMBER) installment_no, 
       CAST (-1 AS VARCHAR2(100)) financial_group_uniqueid,
       FMN_Billing_Setup.Get_BS_Attr('PM', ac.policy_fk, ac.risk_fk, ac.coverage_fk, 'POLICY', ac.policy_fk,
                                          'PLAN_ID', ac.accounting_date,  h.effective_to_date -1) payment_plan_id,
       ac.accounting_date,
       nvl(ac.transaction_effective_date,
           (SELECT MAX(tl.effective_from_date)
              FROM transaction_log tl
             WHERE tl.transaction_log_pk = m.source_record_fk
               AND m.source_table_name = 'TRANSACTION_LOG')) trans_effective_date,
       CAST (NULL AS DATE) due_date,
       CAST (NULL AS DATE) aging_date,
       CAST (NULL AS DATE) invoice_date,
       CAST ('AGENTCOMM' AS varchar2(10)) fm_trans_type_code,
       'C' transaction_status,
       ac.agent_commission_pk fm_master_pk,
       ac.transaction_reference_no,
       nvl(ac.commission_amount, 0) amount,
       ac.policy_fk,
       ac.policy_term_history_fk,
       ac.fm_master_fk source_record_fk,
       CAST ('FM_MASTER' AS VARCHAR2(30)) source_table_name,
       CAST (NULL AS NUMBER) null_key,
       'FINANCE' transaction_source,
       decode(m.source_code, 'PM', 'POLICY', 'FM', 'FINANCE', 'CM', 'CLAIM') original_transaction_source,
       m.source_record_fk original_source_record_fk,
       m.source_table_name original_source_table_name,
       m.policy_term_history_fk original_trans_term_fk,
       m.risk_fk original_risk_fk,
       m.coverage_fk original_coverage_fk,       
       (SELECT tl.transaction_type_code
          FROM transaction_log tl
         WHERE tl.transaction_log_pk = m.source_record_fk 
           AND m.source_table_name = 'TRANSACTION_LOG'
         UNION 
        -- VPAS-2004: Add following query to get transaction data for Velocity policy
        SELECT fpt.transaction_type_code
          FROM fm_policy_transaction fpt
         WHERE fpt.fm_policy_transaction_pk = m.source_record_fk) original_trans_type_code,
       m.tail_coverage_b original_trans_tail_coverage_b,
       m.transaction_date original_transaction_date,
       -- #165442
       ac.amount_calculated_on original_trans_amount,
       el.client_id producer_uniqueid,
       CAST (NULL AS VARCHAR2(10)) reason_code,
       CAST (NULL AS VARCHAR2(40)) reason_desc,
       m.transaction_description,
       -- #165442
       ac.record_status
  FROM Agent_Commission ac,
       Agent_License al,
       Agent a,
       Booked_Term bt,
       FM_Master m,
       Billing_Account ba,
       -- Issue 169274, change to use FM_TERM_V view
       -- Policy_Term_History h,
       Fm_Term_V h,
       Entity ep,
       Entity ea,
       Entity el
 WHERE ea.entity_pk(+) = ba.issue_company_entity_fk
   AND ep.entity_pk(+) = h.issue_company_entity_fk
   -- Issue 169274, change to use FM_TERM_V view
   AND ac.policy_term_history_fk = h.fm_term_pk(+) 
   AND ac.policy_term_history_fk = bt.base_term_fk(+)
   AND ac.billing_account_fk = ba.billing_account_pk(+)
   AND ac.PRODUCER_AGENT_LICENSE_FK = al.agent_license_pk(+)
   AND al.agent_fk = a.agent_pk(+)
   AND a.entity_fk = el.entity_pk(+)
   AND ac.fm_master_fk = m.fm_master_pk(+)
   AND instr('${CHUNK_NUMBER}',decode(ac.policy_fk,-1,'1',substr(to_char(nvl(ac.policy_fk, -1)),${CHUNK_POSITION},1))) > 0;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>1058</xloc>
      <yloc>429</yloc>
    </entry>
    <entry>
      <name>Insert transdeta 2</name>
      <description/>
      <type>SQL</type>
      <sql>INSERT /*+ append */ INTO dw_tmp_sft_transdetaila 
select /*+ use_hash(m ba) ordered */
       m.fm_master_pk,
       m.policy_fk,
       m.risk_fk,
       m.coverage_fk,
       m.transaction_date as_of_date,
       m.policy_term_history_fk,
       nvl(ba.accounting_mode,'BAL_FWD') accounting_mode,
       ba.account_no,
       ba.billing_account_pk,
       ba.issue_company_entity_fk,
       bt.effective_to_date - 1 effective_date,
       bt.effective_from_date      
  from fm_master m,
       billing_account ba,
       booked_term bt
 where instr('${CHUNK_NUMBER}',decode(m.policy_fk, -1,'1',substr(to_char(m.policy_fk),${CHUNK_POSITION},1))) > 0
   and nvl(ba.accounting_mode,'BAL_FWD') = 'BAL_FWD'
   and m.billing_account_fk = ba.billing_account_pk
   and m.policy_term_history_fk = bt.base_term_fk(+);
</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>187</xloc>
      <yloc>510</yloc>
    </entry>
    <entry>
      <name>Insert transdetb 2</name>
      <description/>
      <type>SQL</type>
      <sql>INSERT /*+ append */ INTO dw_tmp_sft_transdetailb 
select fm_master_pk,
       plan_id payment_plan_id,
       account_no, 
       billing_account_pk,
       issue_company_entity_fk,
       accounting_mode,
       effective_from_date,
       effective_date
from (
SELECT bt.fm_master_pk,
       decode(bs.source_subsystem_code,
               'PM',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'RISK', 20,
                      'COVERAGE', 10,
                      99),
               'CM',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'OCCURRENCE', 20,
                      'CLAIM', 10,
                      99),
               'WC',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'RISK', 20,
                      99),99)
                       priority,
       pp.plan_id,
       bt.account_no,
       bt.billing_account_pk,
       bt.issue_company_entity_fk,
       accounting_mode,
       bt.effective_from_date,
       bt.effective_date,
       row_number() OVER (PARTITION BY fm_master_pk ORDER BY
       decode(bs.source_subsystem_code,
               'PM',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'RISK', 20,
                      'COVERAGE', 10, 
                      99),
               'CM',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'OCCURRENCE', 20,
                      'CLAIM', 10,
                      99),
               'WC',
               decode(bs.billing_setup_level, 
                      'POLICY', 30,
                      'RISK', 20,
                      99),99) asc,
       bs.effective_to_date DESC,
       bs.effective_from_date DESC,
       bs.fm_billing_setup_pk DESC) pick
  FROM FM_Billing_Setup bs,
       dw_tmp_sft_transdetaila bt,
       payment_plan pp
 WHERE bs.accounting_from_date &lt;= bt.as_of_date AND bs.accounting_to_date > bt.as_of_date
   AND bs.effective_from_date &lt;= bt.effective_date AND bs.effective_to_date > bt.effective_date
   AND bs.source_record_fk     =  bt.policy_fk
   AND bs.source_record_fk2    IN (-1, bt.risk_fk)
   AND bs.source_record_fk3    IN (-1, bt.coverage_fk)
   and bt.effective_date is not null
   and bs.payment_plan_fk = pp.payment_plan_pk
   AND bs.source_subsystem_code = 'PM')
where pick = 1;  
insert 
  into dw_tmp_sft_transdetailb
select fm_master_pk,
       plan_id payment_plan_id,
       account_no,
       billing_account_pk,
       issue_company_entity_fk,
       accounting_mode,
       effective_from_date,
       effective_date
from (
SELECT bt.fm_master_pk,
       decode(bs.source_subsystem_code,
               'PM',
               decode(bs.billing_setup_level,
                      'POLICY', 30, 
                      'RISK', 20,
                      'COVERAGE', 10,
                      99),
               'CM',
               decode(bs.billing_setup_level, 
                      'POLICY', 30,
                      'OCCURRENCE', 20,
                      'CLAIM', 10,
                      99),
               'WC',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'RISK', 20,
                      99),99)
                       priority,
       pp.plan_Id,
       bt.account_no,
       bt.billing_account_pk,
       bt.issue_company_entity_fk,
       bt.accounting_mode,
       bt.effective_from_date,
       bt.effective_date,
       row_number() OVER (PARTITION BY fm_master_pk ORDER BY
       decode(bs.source_subsystem_code,
               'PM',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'RISK', 20,
                      'COVERAGE', 10,
                      99),
               'CM',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'OCCURRENCE', 20,
                      'CLAIM', 10,
                      99),
               'WC',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'RISK', 20,
                      99),99) asc,
       bs.effective_to_date DESC, 
       bs.effective_from_date DESC,
       bs.fm_billing_setup_pk DESC) pick
  FROM FM_Billing_Setup bs,
       dw_tmp_sft_transdetaila bt,
       payment_plan pp
 WHERE bs.accounting_from_date &lt;= bt.as_of_date AND bs.accounting_to_date > bt.as_of_date
   and bs.accounting_to_date   = to_date('01/01/3000','mm/dd/yyyy')
   AND bs.source_record_fk     =  bt.policy_fk
   AND bs.source_record_fk2    IN (-1, bt.risk_fk)
   AND bs.source_record_fk3    IN (-1, bt.coverage_fk) 
   and bt.effective_date is null
   and bs.payment_plan_fk = pp.payment_plan_pk
   AND bs.source_subsystem_code = 'PM')
where pick = 1;
insert 
  into dw_tmp_sft_transdetailb
select fm_master_pk,
       plan_id payment_plan_id,
       account_no,
       billing_account_pk,
       issue_company_entity_fk,
       accounting_mode,
       effective_from_date,
       effective_date
from ( 
SELECT /*+ ordered */ bt.fm_master_pk,
       decode(bs.source_subsystem_code,
               'PM',
               decode(bs.billing_setup_level,
                      'POLICY', 30, 
                      'RISK', 20,
                      'COVERAGE', 10,
                      99),
               'CM',
               decode(bs.billing_setup_level, 
                      'POLICY', 30,
                      'OCCURRENCE', 20,
                      'CLAIM', 10,
                      99),
               'WC',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'RISK', 20,
                      99),99)
                       priority,
       pp.plan_Id,
       bt.account_no,
       bt.billing_account_pk,
       bt.issue_company_entity_fk,
       bt.accounting_mode,
       bt.effective_from_date,
       bt.effective_date,
       row_number() OVER (PARTITION BY fm_master_pk ORDER BY
       decode(bs.source_subsystem_code,
               'PM',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'RISK', 20,
                      'COVERAGE', 10,
                      99),
               'CM',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'OCCURRENCE', 20,
                      'CLAIM', 10,
                      99),
               'WC',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'RISK', 20,
                      99),99) asc,
       bs.effective_to_date DESC, 
       bs.effective_from_date DESC,
       bs.fm_billing_setup_pk DESC) pick
  FROM (select a.*
         from dw_tmp_sft_transdetaila a
        where not exists(select 'x'
                           from dw_tmp_sft_transdetailb b
                          where b.fm_master_pk = a.fm_master_pk)) bt,
       FM_Billing_Setup bs,
       payment_plan pp
 WHERE bs.accounting_from_date &lt;= bt.as_of_date AND bs.accounting_to_date > bt.as_of_date
   AND bs.source_record_fk     =  bt.policy_fk
   AND bs.source_record_fk2    IN (-1, bt.risk_fk)
   AND bs.source_record_fk3    IN (-1, bt.coverage_fk) 
   and bs.payment_plan_fk = pp.payment_plan_pk
   AND bs.source_subsystem_code = 'PM')
where pick = 1; 
/* This will make sure all our data is accounted for if we did not take a hit on any
   of the above selects and were unable to find a payment plan */
insert 
  into dw_tmp_sft_transdetailb
select fm_master_pk,
       'UNK' payment_plan_id,
       account_no,
       billing_account_pk,
       issue_company_entity_fk,
       accounting_mode,
       effective_from_date,
       effective_date
from ( 
SELECT /*+ ordered */ 
       bt.fm_master_pk,
       bt.account_no,
       bt.billing_account_pk,
       bt.issue_company_entity_fk,
       bt.accounting_mode,
       bt.effective_from_date,
       bt.effective_date
  FROM (select a.*
         from dw_tmp_sft_transdetaila a
        where not exists(select 'x'
                           from dw_tmp_sft_transdetailb b
                          where b.fm_master_pk = a.fm_master_pk)) bt
    ) ; 
commit;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>381</xloc>
      <yloc>510</yloc>
    </entry>
    <entry>
      <name>dw_tmp_sft_transdetaila exists?</name>
      <description/>
      <type>TABLE_EXISTS</type>
      <tablename>dw_tmp_sft_transdetaila</tablename>
      <schemaname/>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>187</xloc>
      <yloc>370</yloc>
    </entry>
    <entry>
      <name>Create transdeta 2</name>
      <description/>
      <type>SQL</type>
      <sql>create table dw_tmp_sft_transdetaila nologging PCTFREE 0 
tablespace ${G_OLTP_DB_DATA}
as
select /*+ use_hash(m ba) ordered */
       m.fm_master_pk,
       m.policy_fk,
       m.risk_fk,
       m.coverage_fk,
       m.transaction_date as_of_date,
       m.policy_term_history_fk,
       nvl(ba.accounting_mode,'BAL_FWD') accounting_mode,
       ba.account_no,
       ba.billing_account_pk,
       ba.issue_company_entity_fk,
       bt.effective_to_date - 1 effective_date,
       bt.effective_from_date      
  from fm_master m,
       billing_account ba,
       booked_term bt
 where instr('${CHUNK_NUMBER}',decode(m.policy_fk, -1,'1',substr(to_char(m.policy_fk),${CHUNK_POSITION},1))) > 0
   and nvl(ba.accounting_mode,'BAL_FWD') = 'BAL_FWD'
   and m.billing_account_fk = ba.billing_account_pk
   and m.policy_term_history_fk = bt.base_term_fk(+);
</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>274</xloc>
      <yloc>429</yloc>
    </entry>
    <entry>
      <name>dw_tmp_sft_transdetailb exists? 2</name>
      <description/>
      <type>TABLE_EXISTS</type>
      <tablename>dw_tmp_sft_transdetailb</tablename>
      <schemaname/>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>381</xloc>
      <yloc>370</yloc>
    </entry>
    <entry>
      <name>Create transdetb 2</name>
      <description/>
      <type>SQL</type>
      <sql>create table dw_tmp_sft_transdetailb nologging PCTFREE 0 
tablespace ${G_OLTP_DB_DATA}
as
select fm_master_pk,
       plan_id payment_plan_id,
       account_no, 
       billing_account_pk,
       issue_company_entity_fk,
       accounting_mode,
       effective_from_date,
       effective_date
from (
SELECT bt.fm_master_pk,
       decode(bs.source_subsystem_code,
               'PM',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'RISK', 20,
                      'COVERAGE', 10,
                      99),
               'CM',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'OCCURRENCE', 20,
                      'CLAIM', 10,
                      99),
               'WC',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'RISK', 20,
                      99),99)
                       priority,
       pp.plan_id,
       bt.account_no,
       bt.billing_account_pk,
       bt.issue_company_entity_fk,
       accounting_mode,
       bt.effective_from_date,
       bt.effective_date,
       row_number() OVER (PARTITION BY fm_master_pk ORDER BY
       decode(bs.source_subsystem_code,
               'PM',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'RISK', 20,
                      'COVERAGE', 10, 
                      99),
               'CM',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'OCCURRENCE', 20,
                      'CLAIM', 10,
                      99),
               'WC',
               decode(bs.billing_setup_level, 
                      'POLICY', 30,
                      'RISK', 20,
                      99),99) asc,
       bs.effective_to_date DESC,
       bs.effective_from_date DESC,
       bs.fm_billing_setup_pk DESC) pick
  FROM FM_Billing_Setup bs,
       dw_tmp_sft_transdetaila bt,
       payment_plan pp
 WHERE bs.accounting_from_date &lt;= bt.as_of_date AND bs.accounting_to_date > bt.as_of_date
   AND bs.effective_from_date &lt;= bt.effective_date AND bs.effective_to_date > bt.effective_date
   AND bs.source_record_fk     =  bt.policy_fk
   AND bs.source_record_fk2    IN (-1, bt.risk_fk)
   AND bs.source_record_fk3    IN (-1, bt.coverage_fk)
   and bt.effective_date is not null
   and bs.payment_plan_fk = pp.payment_plan_pk
   AND bs.source_subsystem_code = 'PM')
where pick = 1;  
insert 
  into dw_tmp_sft_transdetailb
select fm_master_pk,
       plan_id payment_plan_id,
       account_no,
       billing_account_pk,
       issue_company_entity_fk,
       accounting_mode,
       effective_from_date,
       effective_date
from (
SELECT bt.fm_master_pk,
       decode(bs.source_subsystem_code,
               'PM',
               decode(bs.billing_setup_level,
                      'POLICY', 30, 
                      'RISK', 20,
                      'COVERAGE', 10,
                      99),
               'CM',
               decode(bs.billing_setup_level, 
                      'POLICY', 30,
                      'OCCURRENCE', 20,
                      'CLAIM', 10,
                      99),
               'WC',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'RISK', 20,
                      99),99)
                       priority,
       pp.plan_Id,
       bt.account_no,
       bt.billing_account_pk,
       bt.issue_company_entity_fk,
       bt.accounting_mode,
       bt.effective_from_date,
       bt.effective_date,
       row_number() OVER (PARTITION BY fm_master_pk ORDER BY
       decode(bs.source_subsystem_code,
               'PM',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'RISK', 20,
                      'COVERAGE', 10,
                      99),
               'CM',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'OCCURRENCE', 20,
                      'CLAIM', 10,
                      99),
               'WC',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'RISK', 20,
                      99),99) asc,
       bs.effective_to_date DESC, 
       bs.effective_from_date DESC,
       bs.fm_billing_setup_pk DESC) pick
  FROM FM_Billing_Setup bs,
       dw_tmp_sft_transdetaila bt,
       payment_plan pp
 WHERE bs.accounting_from_date &lt;= bt.as_of_date AND bs.accounting_to_date > bt.as_of_date
   and bs.accounting_to_date   = to_date('01/01/3000','mm/dd/yyyy')
   AND bs.source_record_fk     =  bt.policy_fk
   AND bs.source_record_fk2    IN (-1, bt.risk_fk)
   AND bs.source_record_fk3    IN (-1, bt.coverage_fk) 
   and bt.effective_date is null
   and bs.payment_plan_fk = pp.payment_plan_pk
   AND bs.source_subsystem_code = 'PM')
where pick = 1;
insert 
  into dw_tmp_sft_transdetailb
select fm_master_pk,
       plan_id payment_plan_id,
       account_no,
       billing_account_pk,
       issue_company_entity_fk,
       accounting_mode,
       effective_from_date,
       effective_date
from ( 
SELECT /*+ ordered */ bt.fm_master_pk,
       decode(bs.source_subsystem_code,
               'PM',
               decode(bs.billing_setup_level,
                      'POLICY', 30, 
                      'RISK', 20,
                      'COVERAGE', 10,
                      99),
               'CM',
               decode(bs.billing_setup_level, 
                      'POLICY', 30,
                      'OCCURRENCE', 20,
                      'CLAIM', 10,
                      99),
               'WC',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'RISK', 20,
                      99),99)
                       priority,
       pp.plan_Id,
       bt.account_no,
       bt.billing_account_pk,
       bt.issue_company_entity_fk,
       bt.accounting_mode,
       bt.effective_from_date,
       bt.effective_date,
       row_number() OVER (PARTITION BY fm_master_pk ORDER BY
       decode(bs.source_subsystem_code,
               'PM',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'RISK', 20,
                      'COVERAGE', 10,
                      99),
               'CM',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'OCCURRENCE', 20,
                      'CLAIM', 10,
                      99),
               'WC',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'RISK', 20,
                      99),99) asc,
       bs.effective_to_date DESC, 
       bs.effective_from_date DESC,
       bs.fm_billing_setup_pk DESC) pick
  FROM (select a.*
         from dw_tmp_sft_transdetaila a
        where not exists(select 'x'
                           from dw_tmp_sft_transdetailb b
                          where b.fm_master_pk = a.fm_master_pk)) bt,
       FM_Billing_Setup bs,
       payment_plan pp
 WHERE bs.accounting_from_date &lt;= bt.as_of_date AND bs.accounting_to_date > bt.as_of_date
   AND bs.source_record_fk     =  bt.policy_fk
   AND bs.source_record_fk2    IN (-1, bt.risk_fk)
   AND bs.source_record_fk3    IN (-1, bt.coverage_fk) 
   and bs.payment_plan_fk = pp.payment_plan_pk
   AND bs.source_subsystem_code = 'PM')
where pick = 1; 
/* This will make sure all our data is accounted for if we did not take a hit on any
   of the above selects and were unable to find a payment plan */
insert 
  into dw_tmp_sft_transdetailb
select fm_master_pk,
       'UNK' payment_plan_id,
       account_no,
       billing_account_pk,
       issue_company_entity_fk,
       accounting_mode,
       effective_from_date,
       effective_date
from ( 
SELECT /*+ ordered */ 
       bt.fm_master_pk,
       bt.account_no,
       bt.billing_account_pk,
       bt.issue_company_entity_fk,
       bt.accounting_mode,
       bt.effective_from_date,
       bt.effective_date
  FROM (select a.*
         from dw_tmp_sft_transdetaila a
        where not exists(select 'x'
                           from dw_tmp_sft_transdetailb b
                          where b.fm_master_pk = a.fm_master_pk)) bt
    ) ; 
commit;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>455</xloc>
      <yloc>429</yloc>
    </entry>
    <entry>
      <name>dw_tmp_sft_transdetail1 exists? </name>
      <description/>
      <type>TABLE_EXISTS</type>
      <tablename>dw_tmp_sft_transdetail1</tablename>
      <schemaname/>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>566</xloc>
      <yloc>370</yloc>
    </entry>
    <entry>
      <name>Insert dw_tmp_sft_transdetail1 2 2</name>
      <description/>
      <type>SQL</type>
      <sql>INSERT /*+ append */ INTO dw_tmp_sft_transdetail1
SELECT /*+ full(tmpb) ordered use_hash(tmpb m)*/ 
       m.fm_master_pk financialTransaction_uniqueID,
       decode(tmpb.ACCOUNT_NO, NULL, '-1', tmpb.ACCOUNT_NO || '^' || tmpb.BILLING_ACCOUNT_PK) account1_uniqueID,
       CAST (-1 AS VARCHAR2(100)) account2_uniqueID,
       ep.client_id company_uniqueID,
       decode(m.policy_fk, -1, '-1', 0, '0', 
       (SELECT cp.policy_no || '^PYN' || SUBSTR(cp.policy_start_date,-2) || '^' || cp.cm_policy_pk policy_uniqueID
          FROM cm_policy cp
         WHERE cp.cm_policy_pk =  m.policy_fk
         UNION ALL
        SELECT p1.policy_no||'^'||nvl(h.term_id,m.policy_term_history_fk)
          FROM fm_policy_v p1
         WHERE p1.fm_policy_pk = m.policy_fk)) policy_uniqueid,
       m.risk_fk,
       m.coverage_fk,
       m.claim_fk,
       nvl(decode(m.fm_trans_type_code , 'REVERSAL', r1.batch_fk, 
                                         'VOID', r1.batch_fk, r.batch_fk), -1) batch_fk,
       nvl(decode(m.fm_trans_type_code , 'REVERSAL', r.parent_receipt_fk, 
                                         'VOID', r.parent_receipt_fk, r.receipt_pk), -1) receipt_pk,  
       nvl(m.fm_bill_fk, -1) fm_bill_fk,           
       m.sub_account_code, 
       tmpb.effective_from_date,
       tmpb.effective_date + 1 effective_to_date,
       nvl(m.installment_no, -1) installment_no,
       CAST (-1 AS VARCHAR2(100)) financial_group_uniqueid,  
       tmpb.payment_plan_id,             
       m.accounting_date,
       m.effective_from_date trans_effective_date,
       m.due_date,
       m.aging_date,
       m.invoice_date,
       m.fm_trans_type_code,
       m.transaction_status,
       m.fm_master_pk,
       m.transaction_reference_no,
       m.amount,
       m.policy_fk,       
       m.policy_term_history_fk, 
       m.source_record_fk,
       m.source_table_name,
       CAST (NULL AS NUMBER) null_key,
       decode(m.source_code, 'PM', 'POLICY', 'FM', 'FINANCE', 'CM', 'CLAIM') transaction_source,
       decode(m1.source_code, 'PM', 'POLICY', 'FM', 'FINANCE', 'CM', 'CLAIM') original_transaction_source,
       m1.source_record_fk original_source_record_fk,
       m1.source_table_name original_source_table_name,
       m1.policy_term_history_fk original_trans_term_fk,
       m1.risk_fk original_risk_fk,
       m1.coverage_fk original_coverage_fk,
       NVL(m1.fm_trans_type_code,'Unknown') original_trans_type_code,
       m1.tail_coverage_b original_trans_tail_coverage_b,
       m1.transaction_date original_transaction_date,
       DECODE(m.fm_trans_type_code, 'COMMISSION', m1.amount, NULL) original_trans_amount,
       CAST (-1 AS VARCHAR2(100)) producer_uniqueid,
       m.reason_code,
       tr.long_description reason_desc,
       m.transaction_description,
       -- #192757
       CASE 
         WHEN m.fm_trans_type_code = 'COMMISSION' AND ba.account_type = 'A' THEN 
           'PAID'
         ELSE 
           'N/A' 
       END record_status
  FROM dw_tmp_sft_transdetailb tmpb,
       FM_Master m,
       Receipt r,
       Receipt r1,
       FM_Master m1,
       Fm_Trans_Reason tr,
       -- Issue 169274, change to use FM_TERM_V view
       -- Policy_Term_History h,
       FM_Term_V h,
       Entity ep,
       Entity ea,
       -- Issue 169274, change to use FM_POLICY_V view
       -- Policy p,
       Fm_Policy_V p,
       billing_account ba
 WHERE tmpb.fm_master_pk = m.fm_master_pk
   AND m.billing_account_fk = ba.billing_account_pk
   -- Issue 169274
   and m.policy_fk = p.fm_policy_pk(+)
   and ea.entity_pk(+) = tmpb.issue_company_entity_fk
   AND ep.entity_pk(+) = h.issue_company_entity_fk
   -- Issue 169274
   AND h.fm_term_pk(+) = m.policy_term_history_fk
   AND m.source_record_fk = r.receipt_pk(+)
   AND r.parent_receipt_fk = r1.receipt_pk(+)
   AND m.billing_account_fk = tmpb.billing_account_pk
   AND m.source_record_fk = m1.fm_master_pk(+)
   AND m.reason_code = tr.reason_code(+)
   AND M.FM_TRANS_TYPE_CODE  =  TR.FM_TRANS_TYPE_CODE(+)
   AND nvl(tmpb.accounting_mode, 'BAL_FWD') = 'BAL_FWD';</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>566</xloc>
      <yloc>510</yloc>
    </entry>
    <entry>
      <name>dw_tmp_sft_transdetail2 exists?  2</name>
      <description/>
      <type>TABLE_EXISTS</type>
      <tablename>dw_tmp_sft_transdetail2</tablename>
      <schemaname/>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>767</xloc>
      <yloc>370</yloc>
    </entry>
    <entry>
      <name>Insert dw_tmp_sft_transdetail2</name>
      <description/>
      <type>SQL</type>
      <sql>INSERT /*+ append */ INTO dw_tmp_sft_transdetail2
SELECT c.fm_open_item_change_pk financialTransaction_uniqueID,
       decode(ba.ACCOUNT_NO, NULL, '-1', ba.ACCOUNT_NO || '^' || ba.BILLING_ACCOUNT_PK) account1_uniqueID,
       CAST (-1 AS VARCHAR2(100)) account2_uniqueID,
       ep.client_id company_uniqueID,
       decode(i.policy_fk, -1, '-1', 0, '0',        
       (SELECT cp.policy_no || '^PYN' || SUBSTR(cp.policy_start_date,-2) || '^' || cp.cm_policy_pk policy_uniqueID
          FROM cm_policy cp
         WHERE cp.cm_policy_pk = i.policy_fk
         UNION ALL
        SELECT p.policy_no||'^'||nvl(h.term_id,i.policy_term_history_fk）
          FROM fm_policy_v p
         WHERE p.fm_policy_pk = i.policy_fk)) policy_uniqueID,
       i.risk_fk,
       i.coverage_fk,
       i.claim_fk,
       nvl(decode(m.fm_trans_type_code , 'REVERSAL', r1.batch_fk, 
                                         'VOID', r1.batch_fk, r.batch_fk), -1) batch_fk,
       nvl(decode(c.open_item_change_type , 'REVERSAL', r.parent_receipt_fk, 
                                            'VOID', r.parent_receipt_fk, r.receipt_pk), -1) receipt_pk,            
       i.fm_bill_fk,       
       i.sub_account_code,
       bt.effective_from_date,
       bt.effective_to_date, 
       nvl(i.installment_no, -1) installment_no,
       TO_CHAR(i.transaction_fk) financial_group_uniqueid,  
       FMN_Billing_Setup.Get_BS_Attr('PM', i.policy_fk, i.risk_fk, i.coverage_fk, 'POLICY', i.policy_fk,
                                          'PLAN_ID', c.transaction_date,  bt.effective_to_date -1) payment_plan_id, 
       c.transaction_date,
       m.effective_from_date trans_effective_date,   
       i.bill_due_date due_date,
       i.installment_due_date aging_date,
       i.bill_date invoice_date, 
       c.open_item_change_type fm_trans_type_code,
       i.transaction_status, 
       i.fm_open_item_pk fm_master_pk,
       c.transaction_reference_no,
       (c.amount + c.open_balance) amount,  
       i.policy_fk,                       
       i.policy_term_history_fk,
       m.source_record_fk,
       m.source_table_name,
       CAST (NULL AS NUMBER) null_key,
       decode(m.source_code, 'PM', 'POLICY', 'FM', 'FINANCE', 'CM', 'CLAIM') transaction_source,
       decode(m1.source_code, 'PM', 'POLICY', 'FM', 'FINANCE', 'CM', 'CLAIM') original_transaction_source,
       m1.source_record_fk original_source_record_fk,
       m1.source_table_name original_source_table_name,
       m1.policy_term_history_fk original_trans_term_fk,
       m1.risk_fk original_risk_fk,
       m1.coverage_fk original_coverage_fk,
       NVL(m1.fm_trans_type_code,'Unknown') original_trans_type_code,
       m1.tail_coverage_b original_trans_tail_coverage_b,
       m1.transaction_date original_transaction_date,
       DECODE(m.fm_trans_type_code, 'COMMISSION', m1.amount, NULL) original_trans_amount,
       CAST (-1 AS VARCHAR2(100)) producer_uniqueid,
       m.reason_code,
       tr.long_description reason_desc,
       m.transaction_description,
       -- #192757
       CASE 
         WHEN m.fm_trans_type_code = 'COMMISSION' AND ba.account_type = 'A' THEN 
           'PAID'
         ELSE 
           'N/A' 
       END record_status
  FROM FM_Open_Item i,
       Fm_Open_Item_Change c,
       Booked_Term bt,
       Receipt r,
       Receipt r1,
       FM_Master m,
       FM_Master m1,
       FM_Trans_Reason tr,     
       Billing_Account ba,
       -- Issue 169274, change to use FM_TERM_V view
       -- Policy_Term_History h,
       Fm_Term_V h,
       Entity ep,
       Entity ea
 WHERE ea.entity_pk(+) = ba.issue_company_entity_fk
   AND ep.entity_pk(+) = h.issue_company_entity_fk
   -- Issue 169274, change to use FM_TERM_V view
   AND h.fm_term_pk(+) = i.policy_term_history_fk
   AND i.fm_open_item_pk = c.fm_open_item_fk 
   AND i.policy_term_history_fk = bt.base_term_fk(+)  
   AND i.billing_account_fk = ba.billing_account_pk
   AND c.source_record_fk = m.fm_master_pk(+)
   AND m.source_record_fk = m1.fm_master_pk(+)
   AND m.reason_code = tr.reason_code(+)
   AND M.FM_TRANS_TYPE_CODE  =  TR.FM_TRANS_TYPE_CODE(+)
   AND c.receipt_fk = r.receipt_pk(+)
   AND r.parent_receipt_fk = r1.receipt_pk(+)
   AND nvl(ba.accounting_mode, 'BAL_FWD') = 'OPEN_ITEM'
   AND instr('${CHUNK_NUMBER}',decode(i.policy_fk,-1,'1',substr(to_char(i.policy_fk),${CHUNK_POSITION},1))) > 0;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>767</xloc>
      <yloc>510</yloc>
    </entry>
    <entry>
      <name>dw_tmp_sft_transdetail3 exists?</name>
      <description/>
      <type>TABLE_EXISTS</type>
      <tablename>dw_tmp_sft_transdetail3</tablename>
      <schemaname/>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>973</xloc>
      <yloc>370</yloc>
    </entry>
    <entry>
      <name>Insert dw_tmp_sft_transdetail3</name>
      <description/>
      <type>SQL</type>
      <sql>INSERT /*+ append */ INTO dw_tmp_sft_transdetail3
SELECT ac.agent_commission_pk financialTransaction_uniqueID,
       decode(ba.ACCOUNT_NO, NULL, '-1', ba.ACCOUNT_NO || '^' || ba.BILLING_ACCOUNT_PK) account1_uniqueID,
       CAST (-1 AS VARCHAR2(100)) account2_uniqueID,
       ep.client_id company_uniqueID,
       decode(ac.policy_fk, NULL, '-1', -1, '-1', 0, '0', 
       (SELECT cp.policy_no || '^PYN' || SUBSTR(cp.policy_start_date,-2) || '^' || cp.cm_policy_pk policy_uniqueID
          FROM cm_policy cp
         WHERE cp.cm_policy_pk =  ac.policy_fk
         UNION ALL
        SELECT p.policy_no||'^'||nvl(h.term_id,ac.policy_term_history_fk)
          FROM fm_policy_v p
         WHERE p.fm_policy_pk = ac.policy_fk)) policy_uniqueID,
       nvl(ac.risk_fk,-1) risk_fk,
       nvl(ac.coverage_fk,-1) coverage_fk,
       CAST (-1 AS NUMBER) claim_fk,
       CAST (-1 AS NUMBER) batch_fk,
       CAST (-1 AS NUMBER) receipt_pk,
       CAST (-1 AS NUMBER) fm_bill_fk,
       CAST ('AGENTCOMM' AS varchar2(10)) sub_account_code,
       bt.effective_from_date,
       bt.effective_to_date, 
       CAST (-1 AS NUMBER) installment_no, 
       CAST (-1 AS VARCHAR2(100)) financial_group_uniqueid,
       FMN_Billing_Setup.Get_BS_Attr('PM', ac.policy_fk, ac.risk_fk, ac.coverage_fk, 'POLICY', ac.policy_fk,
                                          'PLAN_ID', ac.accounting_date,  h.effective_to_date -1) payment_plan_id,
       ac.accounting_date,
       nvl(ac.transaction_effective_date,
           (SELECT MAX(tl.effective_from_date)
              FROM transaction_log tl
             WHERE tl.transaction_log_pk = m.source_record_fk
               AND m.source_table_name = 'TRANSACTION_LOG')) trans_effective_date,
       CAST (NULL AS DATE) due_date,
       CAST (NULL AS DATE) aging_date,
       CAST (NULL AS DATE) invoice_date,
       CAST ('AGENTCOMM' AS varchar2(10)) fm_trans_type_code,
       'C' transaction_status,
       ac.agent_commission_pk fm_master_pk,
       ac.transaction_reference_no,
       nvl(ac.commission_amount, 0) amount,
       ac.policy_fk,
       ac.policy_term_history_fk,
       ac.fm_master_fk source_record_fk,
       CAST ('FM_MASTER' AS VARCHAR2(30)) source_table_name,
       CAST (NULL AS NUMBER) null_key,
       'FINANCE' transaction_source,
       decode(m.source_code, 'PM', 'POLICY', 'FM', 'FINANCE', 'CM', 'CLAIM') original_transaction_source,
       m.source_record_fk original_source_record_fk,
       m.source_table_name original_source_table_name,
       m.policy_term_history_fk original_trans_term_fk,
       m.risk_fk original_risk_fk,
       m.coverage_fk original_coverage_fk,       
       (SELECT tl.transaction_type_code
          FROM transaction_log tl
         WHERE tl.transaction_log_pk = m.source_record_fk 
           AND m.source_table_name = 'TRANSACTION_LOG'
         UNION 
        -- VPAS-2004: Add following query to get transaction data for Velocity policy
        SELECT fpt.transaction_type_code
          FROM fm_policy_transaction fpt
         WHERE fpt.fm_policy_transaction_pk = m.source_record_fk) original_trans_type_code,
       m.tail_coverage_b original_trans_tail_coverage_b,
       m.transaction_date original_transaction_date,
       -- #165442
       ac.amount_calculated_on original_trans_amount,
       el.client_id producer_uniqueid,
       CAST (NULL AS VARCHAR2(10)) reason_code,
       CAST (NULL AS VARCHAR2(40)) reason_desc,
       m.transaction_description,
       -- #165442
       ac.record_status
  FROM Agent_Commission ac,
       Agent_License al,
       Agent a,
       Booked_Term bt,
       FM_Master m,
       Billing_Account ba,
       -- Issue 169274, change to use FM_TERM_V view
       -- Policy_Term_History h,
       Fm_Term_V h,
       Entity ep,
       Entity ea,
       Entity el
WHERE ea.entity_pk(+) = ba.issue_company_entity_fk
   AND ep.entity_pk(+) = h.issue_company_entity_fk
   -- Issue 169274, change to use FM_TERM_V view
   AND ac.policy_term_history_fk = h.fm_term_pk(+) 
   AND ac.policy_term_history_fk = bt.base_term_fk(+)
   AND ac.billing_account_fk = ba.billing_account_pk(+)
   AND ac.PRODUCER_AGENT_LICENSE_FK = al.agent_license_pk(+)
   AND al.agent_fk = a.agent_pk(+)
   AND a.entity_fk = el.entity_pk(+)
   AND ac.fm_master_fk = m.fm_master_pk(+)
   AND instr('${CHUNK_NUMBER}',decode(ac.policy_fk,-1,'1',substr(to_char(nvl(ac.policy_fk, -1)),${CHUNK_POSITION},1))) > 0;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>973</xloc>
      <yloc>510</yloc>
    </entry>
    <entry>
      <name>dw_tmp_sft_transdetaila exists? 3</name>
      <description/>
      <type>TABLE_EXISTS</type>
      <tablename>dw_tmp_sft_transdetaila</tablename>
      <schemaname/>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>187</xloc>
      <yloc>139</yloc>
    </entry>
    <entry>
      <name>Insert transdeta 3</name>
      <description/>
      <type>SQL</type>
      <sql>INSERT /*+ append */ INTO dw_tmp_sft_transdetaila 
select /*+ use_hash(m ba) ordered */
       m.fm_master_pk,
       m.policy_fk,
       m.risk_fk,
       m.coverage_fk,
       m.transaction_date as_of_date,
       m.policy_term_history_fk,
       nvl(ba.accounting_mode,'BAL_FWD') accounting_mode,
       ba.account_no,
       ba.billing_account_pk,
       ba.issue_company_entity_fk,
       bt.effective_to_date - 1 effective_date,
       bt.effective_from_date      
  from fm_master m,
       billing_account ba,
       booked_term bt
 where instr('${CHUNK_NUMBER}',decode(m.policy_fk, -1,'1',substr(to_char(m.policy_fk),${CHUNK_POSITION},1))) > 0
   and nvl(ba.accounting_mode,'BAL_FWD') = 'BAL_FWD'
   and m.billing_account_fk = ba.billing_account_pk
   and m.policy_term_history_fk = bt.base_term_fk(+);
</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>187</xloc>
      <yloc>31</yloc>
    </entry>
    <entry>
      <name>dw_tmp_sft_transdetailb exists?</name>
      <description/>
      <type>TABLE_EXISTS</type>
      <tablename>dw_tmp_sft_transdetailb</tablename>
      <schemaname/>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>381</xloc>
      <yloc>139</yloc>
    </entry>
    <entry>
      <name>Insert transdetb 3</name>
      <description/>
      <type>SQL</type>
      <sql>INSERT /*+ append */ INTO dw_tmp_sft_transdetailb 
select fm_master_pk,
       plan_id payment_plan_id,
       account_no, 
       billing_account_pk,
       issue_company_entity_fk,
       accounting_mode,
       effective_from_date,
       effective_date
from (
SELECT bt.fm_master_pk,
       decode(bs.source_subsystem_code,
               'PM',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'RISK', 20,
                      'COVERAGE', 10,
                      99),
               'CM',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'OCCURRENCE', 20,
                      'CLAIM', 10,
                      99),
               'WC',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'RISK', 20,
                      99),99)
                       priority,
       pp.plan_id,
       bt.account_no,
       bt.billing_account_pk,
       bt.issue_company_entity_fk,
       accounting_mode,
       bt.effective_from_date,
       bt.effective_date,
       row_number() OVER (PARTITION BY fm_master_pk ORDER BY
       decode(bs.source_subsystem_code,
               'PM',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'RISK', 20,
                      'COVERAGE', 10, 
                      99),
               'CM',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'OCCURRENCE', 20,
                      'CLAIM', 10,
                      99),
               'WC',
               decode(bs.billing_setup_level, 
                      'POLICY', 30,
                      'RISK', 20,
                      99),99) asc,
       bs.effective_to_date DESC,
       bs.effective_from_date DESC,
       bs.fm_billing_setup_pk DESC) pick
  FROM FM_Billing_Setup bs,
       dw_tmp_sft_transdetaila bt,
       payment_plan pp
 WHERE bs.accounting_from_date &lt;= bt.as_of_date AND bs.accounting_to_date > bt.as_of_date
   AND bs.effective_from_date &lt;= bt.effective_date AND bs.effective_to_date > bt.effective_date
   AND bs.source_record_fk     =  bt.policy_fk
   AND bs.source_record_fk2    IN (-1, bt.risk_fk)
   AND bs.source_record_fk3    IN (-1, bt.coverage_fk)
   and bt.effective_date is not null
   and bs.payment_plan_fk = pp.payment_plan_pk
   AND bs.source_subsystem_code = 'PM')
where pick = 1;  
insert 
  into dw_tmp_sft_transdetailb
select fm_master_pk,
       plan_id payment_plan_id,
       account_no,
       billing_account_pk,
       issue_company_entity_fk,
       accounting_mode,
       effective_from_date,
       effective_date
from (
SELECT bt.fm_master_pk,
       decode(bs.source_subsystem_code,
               'PM',
               decode(bs.billing_setup_level,
                      'POLICY', 30, 
                      'RISK', 20,
                      'COVERAGE', 10,
                      99),
               'CM',
               decode(bs.billing_setup_level, 
                      'POLICY', 30,
                      'OCCURRENCE', 20,
                      'CLAIM', 10,
                      99),
               'WC',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'RISK', 20,
                      99),99)
                       priority,
       pp.plan_Id,
       bt.account_no,
       bt.billing_account_pk,
       bt.issue_company_entity_fk,
       bt.accounting_mode,
       bt.effective_from_date,
       bt.effective_date,
       row_number() OVER (PARTITION BY fm_master_pk ORDER BY
       decode(bs.source_subsystem_code,
               'PM',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'RISK', 20,
                      'COVERAGE', 10,
                      99),
               'CM',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'OCCURRENCE', 20,
                      'CLAIM', 10,
                      99),
               'WC',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'RISK', 20,
                      99),99) asc,
       bs.effective_to_date DESC, 
       bs.effective_from_date DESC,
       bs.fm_billing_setup_pk DESC) pick
  FROM FM_Billing_Setup bs,
       dw_tmp_sft_transdetaila bt,
       payment_plan pp
 WHERE bs.accounting_from_date &lt;= bt.as_of_date AND bs.accounting_to_date > bt.as_of_date
   and bs.accounting_to_date   = to_date('01/01/3000','mm/dd/yyyy')
   AND bs.source_record_fk     =  bt.policy_fk
   AND bs.source_record_fk2    IN (-1, bt.risk_fk)
   AND bs.source_record_fk3    IN (-1, bt.coverage_fk) 
   and bt.effective_date is null
   and bs.payment_plan_fk = pp.payment_plan_pk
   AND bs.source_subsystem_code = 'PM')
where pick = 1;
insert 
  into dw_tmp_sft_transdetailb
select fm_master_pk,
       plan_id payment_plan_id,
       account_no,
       billing_account_pk,
       issue_company_entity_fk,
       accounting_mode,
       effective_from_date,
       effective_date
from ( 
SELECT /*+ ordered */ bt.fm_master_pk,
       decode(bs.source_subsystem_code,
               'PM',
               decode(bs.billing_setup_level,
                      'POLICY', 30, 
                      'RISK', 20,
                      'COVERAGE', 10,
                      99),
               'CM',
               decode(bs.billing_setup_level, 
                      'POLICY', 30,
                      'OCCURRENCE', 20,
                      'CLAIM', 10,
                      99),
               'WC',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'RISK', 20,
                      99),99)
                       priority,
       pp.plan_Id,
       bt.account_no,
       bt.billing_account_pk,
       bt.issue_company_entity_fk,
       bt.accounting_mode,
       bt.effective_from_date,
       bt.effective_date,
       row_number() OVER (PARTITION BY fm_master_pk ORDER BY
       decode(bs.source_subsystem_code,
               'PM',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'RISK', 20,
                      'COVERAGE', 10,
                      99),
               'CM',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'OCCURRENCE', 20,
                      'CLAIM', 10,
                      99),
               'WC',
               decode(bs.billing_setup_level,
                      'POLICY', 30,
                      'RISK', 20,
                      99),99) asc,
       bs.effective_to_date DESC, 
       bs.effective_from_date DESC,
       bs.fm_billing_setup_pk DESC) pick
  FROM (select a.*
         from dw_tmp_sft_transdetaila a
        where not exists(select 'x'
                           from dw_tmp_sft_transdetailb b
                          where b.fm_master_pk = a.fm_master_pk)) bt,
       FM_Billing_Setup bs,
       payment_plan pp
 WHERE bs.accounting_from_date &lt;= bt.as_of_date AND bs.accounting_to_date > bt.as_of_date
   AND bs.source_record_fk     =  bt.policy_fk
   AND bs.source_record_fk2    IN (-1, bt.risk_fk)
   AND bs.source_record_fk3    IN (-1, bt.coverage_fk) 
   and bs.payment_plan_fk = pp.payment_plan_pk
   AND bs.source_subsystem_code = 'PM')
where pick = 1; 
/* This will make sure all our data is accounted for if we did not take a hit on any
   of the above selects and were unable to find a payment plan */
insert 
  into dw_tmp_sft_transdetailb
select fm_master_pk,
       'UNK' payment_plan_id,
       account_no,
       billing_account_pk,
       issue_company_entity_fk,
       accounting_mode,
       effective_from_date,
       effective_date
from ( 
SELECT /*+ ordered */ 
       bt.fm_master_pk,
       bt.account_no,
       bt.billing_account_pk,
       bt.issue_company_entity_fk,
       bt.accounting_mode,
       bt.effective_from_date,
       bt.effective_date
  FROM (select a.*
         from dw_tmp_sft_transdetaila a
        where not exists(select 'x'
                           from dw_tmp_sft_transdetailb b
                          where b.fm_master_pk = a.fm_master_pk)) bt
    ) ; 
commit;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>381</xloc>
      <yloc>31</yloc>
    </entry>
    <entry>
      <name>dw_tmp_sft_transdetail1 exists?  2</name>
      <description/>
      <type>TABLE_EXISTS</type>
      <tablename>dw_tmp_sft_transdetail1</tablename>
      <schemaname/>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>566</xloc>
      <yloc>139</yloc>
    </entry>
    <entry>
      <name>Insert dw_tmp_sft_transdetail1 3</name>
      <description/>
      <type>SQL</type>
      <sql>INSERT /*+ append */ INTO dw_tmp_sft_transdetail1
SELECT /*+ full(tmpb) ordered use_hash(tmpb m)*/ 
       m.fm_master_pk financialTransaction_uniqueID,
       decode(tmpb.ACCOUNT_NO, NULL, '-1', tmpb.ACCOUNT_NO || '^' || tmpb.BILLING_ACCOUNT_PK) account1_uniqueID,
       CAST (-1 AS VARCHAR2(100)) account2_uniqueID,
       ep.client_id company_uniqueID,
       decode(m.policy_fk, -1, '-1', 0, '0', p.policy_no||'^'||m.policy_term_history_fk) policy_uniqueid,
       m.risk_fk,
       m.coverage_fk,
       m.claim_fk,
       nvl(decode(m.fm_trans_type_code , 'REVERSAL', r1.batch_fk, 
                                         'VOID', r1.batch_fk, r.batch_fk), -1) batch_fk,
       nvl(decode(m.fm_trans_type_code , 'REVERSAL', r.parent_receipt_fk, 
                                         'VOID', r.parent_receipt_fk, r.receipt_pk), -1) receipt_pk,  
       nvl(m.fm_bill_fk, -1) fm_bill_fk,           
       m.sub_account_code, 
       tmpb.effective_from_date,
       tmpb.effective_date + 1 effective_to_date,
       nvl(m.installment_no, -1) installment_no,
       CAST (-1 AS VARCHAR2(100)) financial_group_uniqueid,  
       tmpb.payment_plan_id,             
       m.accounting_date,
       m.effective_from_date trans_effective_date,
       m.due_date,
       m.aging_date,
       m.invoice_date,
       m.fm_trans_type_code,
       m.transaction_status,
       m.fm_master_pk,
       m.transaction_reference_no,
       m.amount,
       m.policy_fk,       
       m.policy_term_history_fk, 
       m.source_record_fk,
       m.source_table_name,
       CAST (NULL AS NUMBER) null_key,
       decode(m.source_code, 'PM', 'POLICY', 'FM', 'FINANCE', 'CM', 'CLAIM') transaction_source,
       decode(m1.source_code, 'PM', 'POLICY', 'FM', 'FINANCE', 'CM', 'CLAIM') original_transaction_source,
       m1.source_record_fk original_source_record_fk,
       m1.source_table_name original_source_table_name,
       m1.policy_term_history_fk original_trans_term_fk,
       m1.risk_fk original_risk_fk,
       m1.coverage_fk original_coverage_fk,
       NVL(m1.fm_trans_type_code,'Unknown') original_trans_type_code,
       m1.tail_coverage_b original_trans_tail_coverage_b,
       m1.transaction_date original_transaction_date,
       DECODE(m.fm_trans_type_code, 'COMMISSION', m1.amount, NULL) original_trans_amount,
       CAST (-1 AS VARCHAR2(100)) producer_uniqueid,
       m.reason_code,
       tr.long_description reason_desc,
       m.transaction_description,
       -- #192757
       CASE 
         WHEN m.fm_trans_type_code = 'COMMISSION' AND ba.account_type = 'A' THEN 
           'PAID'
         ELSE 
           'N/A' 
       END record_status
  FROM dw_tmp_sft_transdetailb tmpb,
       FM_Master m,
       Receipt r,
       Receipt r1,
       FM_Master m1,
       Fm_Trans_Reason tr,
       Policy_Term_History h,
       Entity ep,
       Entity ea,
       policy p,
       billing_account ba
 WHERE tmpb.fm_master_pk = m.fm_master_pk
   AND m.billing_account_fk = ba.billing_account_pk
   and m.policy_fk = p.policy_pk(+)
   and ea.entity_pk(+) = tmpb.issue_company_entity_fk
   AND ep.entity_pk(+) = h.issue_company_entity_fk
   AND h.policy_term_history_pk(+) = m.policy_term_history_fk
   AND m.source_record_fk = r.receipt_pk(+)
   AND r.parent_receipt_fk = r1.receipt_pk(+)
   AND m.billing_account_fk = tmpb.billing_account_pk
   AND m.source_record_fk = m1.fm_master_pk(+)
   AND m.reason_code = tr.reason_code(+)
   AND nvl(tmpb.accounting_mode, 'BAL_FWD') = 'BAL_FWD';</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>566</xloc>
      <yloc>31</yloc>
    </entry>
    <entry>
      <name>dw_tmp_sft_transdetail2 exists?  2 2</name>
      <description/>
      <type>TABLE_EXISTS</type>
      <tablename>dw_tmp_sft_transdetail2</tablename>
      <schemaname/>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>767</xloc>
      <yloc>139</yloc>
    </entry>
    <entry>
      <name>dw_tmp_sft_transdetail3 exists? 2</name>
      <description/>
      <type>TABLE_EXISTS</type>
      <tablename>dw_tmp_sft_transdetail3</tablename>
      <schemaname/>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>973</xloc>
      <yloc>139</yloc>
    </entry>
    <entry>
      <name>Insert dw_tmp_sft_transdetail2 3</name>
      <description/>
      <type>SQL</type>
      <sql>INSERT /*+ append */ INTO dw_tmp_sft_transdetail2
SELECT c.fm_open_item_change_pk financialTransaction_uniqueID,
       decode(ba.ACCOUNT_NO, NULL, '-1', ba.ACCOUNT_NO || '^' || ba.BILLING_ACCOUNT_PK) account1_uniqueID,
       CAST (-1 AS VARCHAR2(100)) account2_uniqueID,
       ep.client_id company_uniqueID,
       decode(i.policy_fk, -1, '-1', 0, '0', 
              FMN_Get_PM.Get_Policy_No(i.policy_fk, i.policy_term_history_fk) || 
              '^' | |i.policy_term_history_fk) policy_uniqueID,
       i.risk_fk,
       i.coverage_fk,
       i.claim_fk,
       nvl(decode(m.fm_trans_type_code , 'REVERSAL', r1.batch_fk, 
                                         'VOID', r1.batch_fk, r.batch_fk), -1) batch_fk,
       nvl(decode(c.open_item_change_type , 'REVERSAL', r.parent_receipt_fk, 
                                            'VOID', r.parent_receipt_fk, r.receipt_pk), -1) receipt_pk,            
       i.fm_bill_fk,       
       i.sub_account_code,
       bt.effective_from_date,
       bt.effective_to_date, 
       nvl(i.installment_no, -1) installment_no,
       TO_CHAR(i.transaction_fk) financial_group_uniqueid,  
       FMN_Billing_Setup.Get_BS_Attr('PM', i.policy_fk, i.risk_fk, i.coverage_fk, 'POLICY', i.policy_fk,
                                          'PLAN_ID', c.transaction_date,  bt.effective_to_date -1) payment_plan_id, 
       c.transaction_date,
       m.effective_from_date trans_effective_date,   
       i.bill_due_date due_date,
       i.installment_due_date aging_date,
       i.bill_date invoice_date, 
       c.open_item_change_type fm_trans_type_code,
       i.transaction_status, 
       i.fm_open_item_pk fm_master_pk,
       c.transaction_reference_no,
       (c.amount + c.open_balance) amount,  
       i.policy_fk,                       
       i.policy_term_history_fk,
       m.source_record_fk,
       m.source_table_name,
       CAST (NULL AS NUMBER) null_key,
       decode(m.source_code, 'PM', 'POLICY', 'FM', 'FINANCE', 'CM', 'CLAIM') transaction_source,
       decode(m1.source_code, 'PM', 'POLICY', 'FM', 'FINANCE', 'CM', 'CLAIM') original_transaction_source,
       m1.source_record_fk original_source_record_fk,
       m1.source_table_name original_source_table_name,
       m1.policy_term_history_fk original_trans_term_fk,
       m1.risk_fk original_risk_fk,
       m1.coverage_fk original_coverage_fk,
       NVL(m1.fm_trans_type_code,'Unknown') original_trans_type_code,
       m1.tail_coverage_b original_trans_tail_coverage_b,
       m1.transaction_date original_transaction_date,
       DECODE(m.fm_trans_type_code, 'COMMISSION', m1.amount, NULL) original_trans_amount,
       CAST (-1 AS VARCHAR2(100)) producer_uniqueid,
       m.reason_code,
       tr.long_description reason_desc,
       m.transaction_description,
       -- #192757
       CASE 
         WHEN m.fm_trans_type_code = 'COMMISSION' AND ba.account_type = 'A' THEN 
           'PAID'
         ELSE 
           'N/A' 
       END record_status
  FROM FM_Open_Item i,
       Fm_Open_Item_Change c,
       Booked_Term bt,
       Receipt r,
       Receipt r1,
       FM_Master m,
       FM_Master m1,
       FM_Trans_Reason tr,     
       Billing_Account ba,
       Policy_Term_History h,
       Entity ep,
       Entity ea
 WHERE ea.entity_pk(+) = ba.issue_company_entity_fk
   AND ep.entity_pk(+) = h.issue_company_entity_fk
   AND h.policy_term_history_pk(+) = i.policy_term_history_fk
   AND i.fm_open_item_pk = c.fm_open_item_fk 
   AND i.policy_term_history_fk = bt.base_term_fk(+)  
   AND i.billing_account_fk = ba.billing_account_pk
   AND c.source_record_fk = m.fm_master_pk(+)
   AND m.source_record_fk = m1.fm_master_pk(+)
   AND m.reason_code = tr.reason_code(+)
   AND c.receipt_fk = r.receipt_pk(+)
   AND r.parent_receipt_fk = r1.receipt_pk(+)
   AND nvl(ba.accounting_mode, 'BAL_FWD') = 'OPEN_ITEM'
   AND instr('${CHUNK_NUMBER}',decode(i.policy_fk,-1,'1',substr(to_char(i.policy_fk),${CHUNK_POSITION},1))) > 0;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>767</xloc>
      <yloc>31</yloc>
    </entry>
    <entry>
      <name>Insert dw_tmp_sft_transdetail3 3</name>
      <description/>
      <type>SQL</type>
      <sql>INSERT /*+ append */ INTO dw_tmp_sft_transdetail3
SELECT ac.agent_commission_pk financialTransaction_uniqueID,
       decode(ba.ACCOUNT_NO, NULL, '-1', ba.ACCOUNT_NO || '^' || ba.BILLING_ACCOUNT_PK) account1_uniqueID,
       CAST (-1 AS VARCHAR2(100)) account2_uniqueID,
       ep.client_id company_uniqueID,
       decode(ac.policy_fk, NULL, '-1', -1, '-1', 0, '0', 
              FMN_Get_PM.Get_Policy_No(ac.policy_fk, ac.policy_term_history_fk) || 
              '^' | |ac.policy_term_history_fk) policy_uniqueID,
       nvl(ac.risk_fk,-1) risk_fk,
       nvl(ac.coverage_fk,-1) coverage_fk,
       CAST (-1 AS NUMBER) claim_fk,
       CAST (-1 AS NUMBER) batch_fk,
       CAST (-1 AS NUMBER) receipt_pk,
       CAST (-1 AS NUMBER) fm_bill_fk,
       CAST ('AGENTCOMM' AS varchar2(10)) sub_account_code,
       bt.effective_from_date,
       bt.effective_to_date, 
       CAST (-1 AS NUMBER) installment_no, 
       CAST (-1 AS VARCHAR2(100)) financial_group_uniqueid,
       FMN_Billing_Setup.Get_BS_Attr('PM', ac.policy_fk, ac.risk_fk, ac.coverage_fk, 'POLICY', ac.policy_fk,
                                          'PLAN_ID', ac.accounting_date,  h.effective_to_date -1) payment_plan_id,
       ac.accounting_date,
       nvl(ac.transaction_effective_date,
           (SELECT MAX(tl.effective_from_date)
              FROM transaction_log tl
             WHERE tl.transaction_log_pk = m.source_record_fk
               AND m.source_table_name = 'TRANSACTION_LOG')) trans_effective_date,
       CAST (NULL AS DATE) due_date,
       CAST (NULL AS DATE) aging_date,
       CAST (NULL AS DATE) invoice_date,
       CAST ('AGENTCOMM' AS varchar2(10)) fm_trans_type_code,
       'C' transaction_status,
       ac.agent_commission_pk fm_master_pk,
       ac.transaction_reference_no,
       nvl(ac.commission_amount, 0) amount,
       ac.policy_fk,
       ac.policy_term_history_fk,
       ac.fm_master_fk source_record_fk,
       CAST ('FM_MASTER' AS VARCHAR2(30)) source_table_name,
       CAST (NULL AS NUMBER) null_key,
       'FINANCE' transaction_source,
       decode(m.source_code, 'PM', 'POLICY', 'FM', 'FINANCE', 'CM', 'CLAIM') original_transaction_source,
       m.source_record_fk original_source_record_fk,
       m.source_table_name original_source_table_name,
       m.policy_term_history_fk original_trans_term_fk,
       m.risk_fk original_risk_fk,
       m.coverage_fk original_coverage_fk,       
       (SELECT tl.transaction_type_code
          FROM transaction_log tl
         WHERE tl.transaction_log_pk = m.source_record_fk 
           AND m.source_table_name = 'TRANSACTION_LOG'
           AND ROWNUM = 1) original_trans_type_code,
       m.tail_coverage_b original_trans_tail_coverage_b,
       m.transaction_date original_transaction_date,
       -- #165442
       ac.amount_calculated_on original_trans_amount,
       el.client_id producer_uniqueid,
       CAST (NULL AS VARCHAR2(10)) reason_code,
       CAST (NULL AS VARCHAR2(40)) reason_desc,
       m.transaction_description,
       -- #165442
       ac.record_status
  FROM Agent_Commission ac,
       Agent_License al,
       Agent a,
       Booked_Term bt,
       FM_Master m,
       Billing_Account ba,
       Policy_Term_History h,
       Entity ep,
       Entity ea,
       Entity el
WHERE ea.entity_pk(+) = ba.issue_company_entity_fk
   AND ep.entity_pk(+) = h.issue_company_entity_fk
   AND ac.policy_term_history_fk = h.policy_term_history_pk(+) 
   AND ac.policy_term_history_fk = bt.base_term_fk(+)
   AND ac.billing_account_fk = ba.billing_account_pk(+)
   AND ac.PRODUCER_AGENT_LICENSE_FK = al.agent_license_pk(+)
   AND al.agent_fk = a.agent_pk(+)
   AND a.entity_fk = el.entity_pk(+)
   AND ac.fm_master_fk = m.fm_master_pk(+)
   AND instr('${CHUNK_NUMBER}',decode(ac.policy_fk,-1,'1',substr(to_char(nvl(ac.policy_fk, -1)),${CHUNK_POSITION},1))) > 0;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>973</xloc>
      <yloc>31</yloc>
    </entry>
  </entries>
  <hops>
    <hop>
      <from>START</from>
      <to>Simple evaluation - OASIS Version</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>Simple evaluation - OASIS Version</from>
      <to>dw_tmp_sft_transdetaila exists?</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>dw_tmp_sft_transdetaila exists?</from>
      <to>Insert transdeta 2</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Insert transdeta 2</from>
      <to>dw_tmp_sft_transdetailb exists? 2</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>dw_tmp_sft_transdetaila exists?</from>
      <to>Create transdeta 2</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Create transdeta 2</from>
      <to>dw_tmp_sft_transdetailb exists? 2</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>dw_tmp_sft_transdetailb exists? 2</from>
      <to>Insert transdetb 2</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>dw_tmp_sft_transdetailb exists? 2</from>
      <to>Create transdetb 2</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Create transdetb 2</from>
      <to>dw_tmp_sft_transdetail1 exists? </to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Insert transdetb 2</from>
      <to>dw_tmp_sft_transdetail1 exists? </to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>dw_tmp_sft_transdetail1 exists? </from>
      <to>Insert dw_tmp_sft_transdetail1 2 2</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Insert dw_tmp_sft_transdetail1 2 2</from>
      <to>dw_tmp_sft_transdetail2 exists?  2</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>dw_tmp_sft_transdetail1 exists? </from>
      <to>Create dw_tmp_sft_transdetail1 2</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Create dw_tmp_sft_transdetail1 2</from>
      <to>dw_tmp_sft_transdetail2 exists?  2</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>dw_tmp_sft_transdetail2 exists?  2</from>
      <to>Insert dw_tmp_sft_transdetail2</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>dw_tmp_sft_transdetail2 exists?  2</from>
      <to>Create dw_tmp_sft_transdetail2 2</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Create dw_tmp_sft_transdetail2 2</from>
      <to>dw_tmp_sft_transdetail3 exists?</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Insert dw_tmp_sft_transdetail2</from>
      <to>dw_tmp_sft_transdetail3 exists?</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>dw_tmp_sft_transdetail3 exists?</from>
      <to>Insert dw_tmp_sft_transdetail3</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>dw_tmp_sft_transdetail3 exists?</from>
      <to>Create dw_tmp_sft_transdetail3 2</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Simple evaluation - OASIS Version</from>
      <to>dw_tmp_sft_transdetaila exists? 3</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>dw_tmp_sft_transdetaila exists? 3</from>
      <to>Insert transdeta 3</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>dw_tmp_sft_transdetaila exists? 3</from>
      <to>Create transdeta</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Insert transdeta 3</from>
      <to>dw_tmp_sft_transdetailb exists?</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Create transdeta</from>
      <to>dw_tmp_sft_transdetailb exists?</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>dw_tmp_sft_transdetailb exists?</from>
      <to>Insert transdetb 3</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>dw_tmp_sft_transdetailb exists?</from>
      <to>Create transdetb</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Create transdetb</from>
      <to>dw_tmp_sft_transdetail1 exists?  2</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Insert transdetb 3</from>
      <to>dw_tmp_sft_transdetail1 exists?  2</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>dw_tmp_sft_transdetail1 exists?  2</from>
      <to>Insert dw_tmp_sft_transdetail1 3</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>dw_tmp_sft_transdetail1 exists?  2</from>
      <to>Create dw_tmp_sft_transdetail1</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Create dw_tmp_sft_transdetail1</from>
      <to>dw_tmp_sft_transdetail2 exists?  2 2</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Insert dw_tmp_sft_transdetail1 3</from>
      <to>dw_tmp_sft_transdetail2 exists?  2 2</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>dw_tmp_sft_transdetail2 exists?  2 2</from>
      <to>Insert dw_tmp_sft_transdetail2 3</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>dw_tmp_sft_transdetail2 exists?  2 2</from>
      <to>Create dw_tmp_sft_transdetail2</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Create dw_tmp_sft_transdetail2</from>
      <to>dw_tmp_sft_transdetail3 exists? 2</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Insert dw_tmp_sft_transdetail2 3</from>
      <to>dw_tmp_sft_transdetail3 exists? 2</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>dw_tmp_sft_transdetail3 exists? 2</from>
      <to>Create dw_tmp_sft_transdetail3</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>dw_tmp_sft_transdetail3 exists? 2</from>
      <to>Insert dw_tmp_sft_transdetail3 3</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
  </hops>
  <notepads>
    <notepad>
      <note>For OASIS version above 2016.1</note>
      <xloc>80</xloc>
      <yloc>320</yloc>
      <width>175</width>
      <heigth>26</heigth>
      <fontname/>
      <fontsize>-1</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
    <notepad>
      <note>For OASIS version prior 2016.1</note>
      <xloc>80</xloc>
      <yloc>197</yloc>
      <width>168</width>
      <heigth>26</heigth>
      <fontname/>
      <fontsize>-1</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
  </notepads>
  <attributes>
    <group>
      <name>JobRestart</name>
      <attribute>
        <key>UniqueConnections</key>
        <value>N</value>
      </attribute>
    </group>
  </attributes>
</job>
