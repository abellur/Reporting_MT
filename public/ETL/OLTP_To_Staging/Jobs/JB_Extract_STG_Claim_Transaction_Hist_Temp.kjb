<job>
  <name>JB_Extract_STG_Claim_Transaction_Hist_Temp</name>
  <description>Job to load data to STG_CLAIMTRANSACTION table.</description>
  <extended_description>Date         By     Description
01/19/2016   Jma    Issue #167193. Updated the query in JB_Extract_STG_Claim_Transaction_Hist_Temp 
                    job (Create stg txn tmp step) to handle the situation that no coverage is 
                    attached to a claim. </extended_description>
  <job_version/>
  <job_status>0</job_status>
  <directory>/public/ETL/OLTP_To_Staging/Jobs</directory>
  <created_user>-</created_user>
  <created_date>2014/10/22 09:27:50.343</created_date>
  <modified_user>-</modified_user>
  <modified_date>2018/01/23 13:54:23.870</modified_date>
  <parameters>
    </parameters>
  <connection>
    <name>Delphi_OLTP</name>
    <server>${G_OLTP_DB_HOST}</server>
    <type>ORACLE</type>
    <access>Native</access>
    <database>${G_OLTP_DB_NAME}</database>
    <port>${G_OLTP_DB_PORT}</port>
    <username>${G_OLTP_DB_USERNAME}</username>
    <password>${G_OLTP_DB_PWD}</password>
    <servername/>
    <data_tablespace>${G_OLTP_DB_DATA}</data_tablespace>
    <index_tablespace>${G_OLTP_DB_INDEX}</index_tablespace>
    <attributes>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_LOWERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_UPPERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>IS_CLUSTERED</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>PORT_NUMBER</code>
        <attribute>${G_OLTP_DB_PORT}</attribute>
      </attribute>
      <attribute>
        <code>QUOTE_ALL_FIELDS</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>SUPPORTS_BOOLEAN_DATA_TYPE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>USE_POOLING</code>
        <attribute>N</attribute>
      </attribute>
    </attributes>
  </connection>
  <connection>
    <name>DW_Log_Link</name>
    <server>${G_LOG_DB_HOST}</server>
    <type>ORACLE</type>
    <access>Native</access>
    <database>${G_LOG_DB_NAME}</database>
    <port>${G_LOG_DB_PORT}</port>
    <username>${G_LOG_DB_USERNAME}</username>
    <password>${G_LOG_DB_PWD}</password>
    <servername/>
    <data_tablespace>${G_LOG_DB_DATA}</data_tablespace>
    <index_tablespace>${G_LOG_DB_INDEX}</index_tablespace>
    <attributes>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_LOWERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_UPPERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>IS_CLUSTERED</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>PORT_NUMBER</code>
        <attribute>${G_LOG_DB_PORT}</attribute>
      </attribute>
      <attribute>
        <code>QUOTE_ALL_FIELDS</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>SUPPORTS_BOOLEAN_DATA_TYPE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>USE_POOLING</code>
        <attribute>N</attribute>
      </attribute>
    </attributes>
  </connection>
  <slaveservers>
    <slaveserver>
      <name>4Sight BI - PDI Server</name>
      <hostname>10.0.0.21</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>joe</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>Carte 1</name>
      <hostname>localhost</hostname>
      <port>9081</port>
      <webAppName/>
      <username>cluster</username>
      <password>Encrypted 2be98afc86aa7f2e4cb1aa265cd86aac8</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>DI Server</name>
      <hostname>localhost</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>joe</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_ETL_DEV</name>
      <hostname>magspentaho</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>shota</username>
      <password>Encrypted 2be98afc86aa7f2e4cb79ce63d69dbbdb</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_ETL_SERVER</name>
      <hostname>http://magspentaho</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>shota</username>
      <password>Encrypted 2be98afc86aa7f2e4cb79ce63d69dbbdb</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_ETL_TEST</name>
      <hostname>magspentahotest</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_PENTAHO</name>
      <hostname>magspentaho</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_PENTAHO_BTS</name>
      <hostname>129.144.25.104</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_PENTAHO_DEV</name>
      <hostname>magspentahodev</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>Master</name>
      <hostname>localhost</hostname>
      <port>8081</port>
      <webAppName/>
      <username>cluster</username>
      <password>Encrypted 2be98afc86aa7f2e4cb1aa265cd86aac8</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>SERVER1</name>
      <hostname>LOCALHOST</hostname>
      <port>3306</port>
      <webAppName/>
      <username>root</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>SLAVE ONE</name>
      <hostname>192.168.2.101</hostname>
      <port>3306</port>
      <webAppName/>
      <username>root</username>
      <password>Encrypted 2be98afc86aa7f2e4a418bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>SLAVE TWO</name>
      <hostname>192.168.2.101</hostname>
      <port>3306</port>
      <webAppName/>
      <username>root</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>Slave1</name>
      <hostname>localhost</hostname>
      <port>8082</port>
      <webAppName/>
      <username>cluster</username>
      <password>Encrypted 2be98afc86aa7f2e4cb1aa265cd86aac8</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>Slave2</name>
      <hostname>localhost</hostname>
      <port>8083</port>
      <webAppName/>
      <username>cluster</username>
      <password>Encrypted 2be98afc86aa7f2e4cb1aa265cd86aac8</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>Slave3</name>
      <hostname>localhost</hostname>
      <port>8084</port>
      <webAppName/>
      <username>cluster</username>
      <password>Encrypted 2be98afc86aa7f2e4cb1aa265cd86aac8</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>local DIS</name>
      <hostname>localhost</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>magspentahodev</name>
      <hostname>magspentahodev</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
  </slaveservers>
  <job-log-table>
    <connection>DW_LOG_Link</connection>
    <schema/>
    <table>${G_DB_JOB_LOG_TABLE}</table>
    <size_limit_lines/>
    <interval/>
    <timeout_days/>
    <field>
      <id>ID_JOB</id>
      <enabled>Y</enabled>
      <name>ID_JOB</name>
    </field>
    <field>
      <id>CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>CHANNEL_ID</name>
    </field>
    <field>
      <id>JOBNAME</id>
      <enabled>Y</enabled>
      <name>JOBNAME</name>
    </field>
    <field>
      <id>STATUS</id>
      <enabled>Y</enabled>
      <name>STATUS</name>
    </field>
    <field>
      <id>LINES_READ</id>
      <enabled>Y</enabled>
      <name>LINES_READ</name>
    </field>
    <field>
      <id>LINES_WRITTEN</id>
      <enabled>Y</enabled>
      <name>LINES_WRITTEN</name>
    </field>
    <field>
      <id>LINES_UPDATED</id>
      <enabled>Y</enabled>
      <name>LINES_UPDATED</name>
    </field>
    <field>
      <id>LINES_INPUT</id>
      <enabled>Y</enabled>
      <name>LINES_INPUT</name>
    </field>
    <field>
      <id>LINES_OUTPUT</id>
      <enabled>Y</enabled>
      <name>LINES_OUTPUT</name>
    </field>
    <field>
      <id>LINES_REJECTED</id>
      <enabled>Y</enabled>
      <name>LINES_REJECTED</name>
    </field>
    <field>
      <id>ERRORS</id>
      <enabled>Y</enabled>
      <name>ERRORS</name>
    </field>
    <field>
      <id>STARTDATE</id>
      <enabled>Y</enabled>
      <name>STARTDATE</name>
    </field>
    <field>
      <id>ENDDATE</id>
      <enabled>Y</enabled>
      <name>ENDDATE</name>
    </field>
    <field>
      <id>LOGDATE</id>
      <enabled>Y</enabled>
      <name>LOGDATE</name>
    </field>
    <field>
      <id>DEPDATE</id>
      <enabled>Y</enabled>
      <name>DEPDATE</name>
    </field>
    <field>
      <id>REPLAYDATE</id>
      <enabled>Y</enabled>
      <name>REPLAYDATE</name>
    </field>
    <field>
      <id>LOG_FIELD</id>
      <enabled>Y</enabled>
      <name>LOG_FIELD</name>
    </field>
    <field>
      <id>EXECUTING_SERVER</id>
      <enabled>N</enabled>
      <name>EXECUTING_SERVER</name>
    </field>
    <field>
      <id>EXECUTING_USER</id>
      <enabled>N</enabled>
      <name>EXECUTING_USER</name>
    </field>
    <field>
      <id>START_JOB_ENTRY</id>
      <enabled>N</enabled>
      <name>START_JOB_ENTRY</name>
    </field>
    <field>
      <id>CLIENT</id>
      <enabled>N</enabled>
      <name>CLIENT</name>
    </field>
  </job-log-table>
  <jobentry-log-table>
    <connection/>
    <schema/>
    <table/>
    <timeout_days/>
    <field>
      <id>ID_BATCH</id>
      <enabled>Y</enabled>
      <name>ID_BATCH</name>
    </field>
    <field>
      <id>CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>CHANNEL_ID</name>
    </field>
    <field>
      <id>LOG_DATE</id>
      <enabled>Y</enabled>
      <name>LOG_DATE</name>
    </field>
    <field>
      <id>JOBNAME</id>
      <enabled>Y</enabled>
      <name>TRANSNAME</name>
    </field>
    <field>
      <id>JOBENTRYNAME</id>
      <enabled>Y</enabled>
      <name>STEPNAME</name>
    </field>
    <field>
      <id>LINES_READ</id>
      <enabled>Y</enabled>
      <name>LINES_READ</name>
    </field>
    <field>
      <id>LINES_WRITTEN</id>
      <enabled>Y</enabled>
      <name>LINES_WRITTEN</name>
    </field>
    <field>
      <id>LINES_UPDATED</id>
      <enabled>Y</enabled>
      <name>LINES_UPDATED</name>
    </field>
    <field>
      <id>LINES_INPUT</id>
      <enabled>Y</enabled>
      <name>LINES_INPUT</name>
    </field>
    <field>
      <id>LINES_OUTPUT</id>
      <enabled>Y</enabled>
      <name>LINES_OUTPUT</name>
    </field>
    <field>
      <id>LINES_REJECTED</id>
      <enabled>Y</enabled>
      <name>LINES_REJECTED</name>
    </field>
    <field>
      <id>ERRORS</id>
      <enabled>Y</enabled>
      <name>ERRORS</name>
    </field>
    <field>
      <id>RESULT</id>
      <enabled>Y</enabled>
      <name>RESULT</name>
    </field>
    <field>
      <id>NR_RESULT_ROWS</id>
      <enabled>Y</enabled>
      <name>NR_RESULT_ROWS</name>
    </field>
    <field>
      <id>NR_RESULT_FILES</id>
      <enabled>Y</enabled>
      <name>NR_RESULT_FILES</name>
    </field>
    <field>
      <id>LOG_FIELD</id>
      <enabled>N</enabled>
      <name>LOG_FIELD</name>
    </field>
    <field>
      <id>COPY_NR</id>
      <enabled>N</enabled>
      <name>COPY_NR</name>
    </field>
  </jobentry-log-table>
  <channel-log-table>
    <connection/>
    <schema/>
    <table/>
    <timeout_days/>
    <field>
      <id>ID_BATCH</id>
      <enabled>Y</enabled>
      <name>ID_BATCH</name>
    </field>
    <field>
      <id>CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>CHANNEL_ID</name>
    </field>
    <field>
      <id>LOG_DATE</id>
      <enabled>Y</enabled>
      <name>LOG_DATE</name>
    </field>
    <field>
      <id>LOGGING_OBJECT_TYPE</id>
      <enabled>Y</enabled>
      <name>LOGGING_OBJECT_TYPE</name>
    </field>
    <field>
      <id>OBJECT_NAME</id>
      <enabled>Y</enabled>
      <name>OBJECT_NAME</name>
    </field>
    <field>
      <id>OBJECT_COPY</id>
      <enabled>Y</enabled>
      <name>OBJECT_COPY</name>
    </field>
    <field>
      <id>REPOSITORY_DIRECTORY</id>
      <enabled>Y</enabled>
      <name>REPOSITORY_DIRECTORY</name>
    </field>
    <field>
      <id>FILENAME</id>
      <enabled>Y</enabled>
      <name>FILENAME</name>
    </field>
    <field>
      <id>OBJECT_ID</id>
      <enabled>Y</enabled>
      <name>OBJECT_ID</name>
    </field>
    <field>
      <id>OBJECT_REVISION</id>
      <enabled>Y</enabled>
      <name>OBJECT_REVISION</name>
    </field>
    <field>
      <id>PARENT_CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>PARENT_CHANNEL_ID</name>
    </field>
    <field>
      <id>ROOT_CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>ROOT_CHANNEL_ID</name>
    </field>
  </channel-log-table>
  <checkpoint-log-table>
    <connection/>
    <schema/>
    <table/>
    <timeout_days/>
    <max_nr_retries/>
    <run_retry_period/>
    <namespace_parameter/>
    <save_parameters/>
    <save_result_rows/>
    <save_result_files/>
    <field>
      <id>ID_JOB_RUN</id>
      <enabled>Y</enabled>
      <name>ID_JOB_RUN</name>
    </field>
    <field>
      <id>ID_JOB</id>
      <enabled>Y</enabled>
      <name>ID_JOB</name>
    </field>
    <field>
      <id>JOBNAME</id>
      <enabled>Y</enabled>
      <name>JOBNAME</name>
    </field>
    <field>
      <id>NAMESPACE</id>
      <enabled>Y</enabled>
      <name>NAMESPACE</name>
    </field>
    <field>
      <id>CHECKPOINT_NAME</id>
      <enabled>Y</enabled>
      <name>CHECKPOINT_NAME</name>
    </field>
    <field>
      <id>CHECKPOINT_COPYNR</id>
      <enabled>Y</enabled>
      <name>CHECKPOINT_COPYNR</name>
    </field>
    <field>
      <id>ATTEMPT_NR</id>
      <enabled>Y</enabled>
      <name>ATTEMPT_NR</name>
    </field>
    <field>
      <id>JOB_RUN_START_DATE</id>
      <enabled>Y</enabled>
      <name>JOB_RUN_START_DATE</name>
    </field>
    <field>
      <id>LOGDATE</id>
      <enabled>Y</enabled>
      <name>LOGDATE</name>
    </field>
    <field>
      <id>RESULT_XML</id>
      <enabled>Y</enabled>
      <name>RESULT_XML</name>
    </field>
    <field>
      <id>PARAMETER_XML</id>
      <enabled>Y</enabled>
      <name>PARAMETER_XML</name>
    </field>
  </checkpoint-log-table>
  <pass_batchid>N</pass_batchid>
  <shared_objects_file/>
  <entries>
    <entry>
      <name>START</name>
      <description/>
      <type>SPECIAL</type>
      <start>Y</start>
      <dummy>N</dummy>
      <repeat>N</repeat>
      <schedulerType>0</schedulerType>
      <intervalSeconds>0</intervalSeconds>
      <intervalMinutes>60</intervalMinutes>
      <hour>12</hour>
      <minutes>0</minutes>
      <weekDay>1</weekDay>
      <DayOfMonth>1</DayOfMonth>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>10</xloc>
      <yloc>128</yloc>
    </entry>
    <entry>
      <name>Create tmp clm txn</name>
      <description/>
      <type>SQL</type>
      <sql>create table  dw_tmp_clm_stg_txn_hist_txn 
nologging pctfree 0 
tablespace ${G_OLTP_DB_DATA} as
select rownum id,v.*
  from (
SELECT distinct cm_transaction_detail_pk ct_sequence,
       'TXN'||cm_transaction_pk       || 
       'CIX'||coverage_insured_xref_pk||
       'CMT'||claimant_pk             ||
       'DET'||td.cm_transaction_detail_pk claimTransaction_uniqueid,
       td.cm_transaction_type_code ct_typeCode,
       ctc.cm_cost_type_code ct_subtypeCode,
       ctc.long_description costTypeDesc,
       t.cm_payment_type_code mmct_pmt_type_code,
      --ctc.cm_cost_type_code ct_subtypeCode,
       (select long_description
          from cm_payment_type_code ptc
         where ptc.cm_payment_Type_code = t.cm_payment_Type_code) mmct_pmt_type_desc,
       nvl(td.amount,0) ct_amount,
       trunc(t.approved_date) mmct_trans_approved_date,  
       tc.cm_cost_type_code mmct_cost_type_code,
       ctc.long_description mmct_cost_type_desc,
       cm_transaction_pk,
       t.comments mmct_comments,
       t.cpt_code1 mmct_cpt_code1,
       t.cpt_code2 mmct_cpt_code2,
       t.cpt_code3 mmct_cpt_code3,
       t.cpt_code4 mmct_cpt_code4,
       t.rate mmct_rate,
       t.quantity mmct_quantity,
       cix.coverage_fk,
       cix.risk_fk,
       cix.policy_term_fk,
       cix.policy_fk,
       source_record_fk claim_pk,
       claim_insured_pk,
       claimant_pk,
       e.client_id payee_uniqueID,
       td.cm_transaction_detail_pk,
       nvl(trans_amt,0) mmct_trans_amt,
       nvl(e.federal_tax_id,social_security_number) mmct_payee_tax_id,
       t.tax_id_type mmct_payee_tax_id_type,
       coverage_insured_xref_pk,
       trunc(t.trans_date) mmct_trans_date,
       trunc(t.trans_date) ct_transactiondate,
       nvl(trunc(t.accounting_date),nvl(trunc(t.trans_date),trunc(t.sys_create_time))) ct_accountingdate,
       (CASE
         WHEN NVL(tc.recovery_b,'N')   = 'Y' THEN
           'RECOVERY'
         WHEN NVL(tc.paid_b,'N')       = 'Y' THEN
           'PAYMENT'
         WHEN NVL(tc.reserve_b,'N')    = 'Y' THEN
           'RESERVE'
         WHEN NVL(tc.deductible_b,'N') = 'Y' THEN
           'DEDUCTIBLE'
         WHEN tc.cm_cost_type_code = 'DEDUCTIBLE' THEN
           'DEDUCTIBLE'  
         ELSE  
           'OTHER'
       END) mmct_trans_category,
       t.sys_create_time mmct_sys_create_time,
       t.sys_update_Time mmct_sys_update_time,
       t.sys_updated_by mmct_sys_updated_by,
       t.sys_created_by mmct_sys_created_by,
       cix.source_table_name polSource 
  FROM cm_transaction_detail td,
       cm_transaction t,
       claimant clmt,
       coverage_insured_xref cix,
       claim_insured ci,
       cm_transaction_type_code tc,
       cm_cost_type_code ctc ,
       entity e,
       claim c
WHERE c.claim_pk = t.source_record_fk
  AND td.cm_transaction_fk = t.cm_transaction_pk
  AND td.claimant_fk       = clmt.CLAIMANT_PK
  AND td.COVERAGE_INSURED_XREF_FK = cix.coverage_insured_xref_pk
  AND cix.claim_insured_fk = ci.claim_insured_pk  
  AND t.cm_transaction_type_code = tc.cm_transaction_type_code  
  AND tc.cm_cost_type_code = ctc.cm_cost_type_code 
  and t.entity_payee_fk    = e.entity_pk(+)
  and to_number(substr(policy_fk,${CHUNK_POSITION},1)) in(${CHUNK_NUMBER})
UNION all
SELECT distinct claim_pk ct_sequence,
       'TXN' ||claim_pk                ||
       'CIX' ||coverage_insured_xref_pk||
       'CMT'||claimant_pk              ||
       'DET'||claim_pk claimTransaction_uniqueid,
       'DUMMY' ct_typeCode,
       'DUMMY'  ct_subtypeCode,
       'Dummy'  costTypeDesc,
       to_char(null) mmct_pmt_type_code,
      --'DUMMY' ct_subtypeCode,
       to_char(NULL) mmct_pmt_type_desc,
       0 ct_amount,
       to_date(NULL) mmct_trans_approved_date,  
       'DUMMY' mmct_cost_type_code,
       'Dummy' mmct_cost_type_desc,
       claim_pk cm_transaction_pk,
       'Dummy transaction created by DW staging' mmct_comments,
       to_char(null) mmct_cpt_code1,
       to_char(null) mmct_cpt_code2,
       to_char(null) mmct_cpt_code3,
       to_char(null) mmct_cpt_code4,
       to_number(null)  mmct_rate,
       to_number(null) mmct_quantity,
       cix.coverage_fk,
       cix.risk_fk,
       cix.policy_term_fk,
       cix.policy_fk,
       claim_pk claim_pk,
       claim_insured_pk,
       claimant_pk,
       to_char(NULL) payee_uniqueID,
       c.claim_pk cm_transaction_detail_pk,
       0 mmct_trans_amt,
       to_char(NULL) mmct_payee_tax_id,
       to_char(null) mmct_payee_tax_id_type,
       coverage_insured_xref_pk,
       trunc(sctsd.effective_date) mmct_trans_date,
       trunc(sctsd.effective_date) ct_transactiondate,
       trunc(sctsd.effective_date) ct_accountingdate,
       'DUMMY' mmct_trans_category,
       cix.sys_create_time mmct_sys_create_time,
       cix.sys_update_Time mmct_sys_update_time,
       cix.sys_updated_by mmct_sys_updated_by,
       cix.sys_created_by mmct_sys_created_by,
       cix.source_table_name polSource     
  FROM claimant clmt,
       entity_role erc,
       entity ec,
       coverage_insured_xref cix,
       claimant_coverage_xref ccx,
       claim_insured ci,
       claim c,
       dw_stg_claim_type_status_disp sctsd
WHERE cix.claim_insured_fk         = ci.claim_insured_pk  
  AND ccx.claimant_fk              = clmt.claimant_pk
  and clmt.entity_role_fk          = erc.entity_role_pk
  and erc.entity_fk                = ec.entity_pk
  AND ccx.coverage_insured_xref_fk = cix.coverage_insured_xref_pk
  AND c.claim_pk                   = ccx.claim_fk
  and to_number(substr(cix.policy_fk,${CHUNK_POSITION},1)) in(${CHUNK_NUMBER})
  and sctsd.claim_fk              = c.claim_pk
  and sctsd.effective_date        = (select min(effective_date)
                                      from dw_stg_claim_type_status_disp sctsd1
                                     where c.claim_pk = sctsd1.claim_fk)    
  AND NOT EXISTS(SELECT 'x'
                   FROM cm_transaction_detail d,
                        cm_transaction t
                  WHERE d.coverage_insured_xref_fk = cix.coverage_insured_xref_pk
                    and d.cm_transaction_fk = t.cm_transaction_pk
                    and to_number(to_char(accounting_date,'yyyymm')) &lt;= to_number(to_char(sctsd.effective_date,'yyyymm')))
union all
SELECT distinct claim_pk ct_sequence,
       'TXN'||claim_pk   ||
       'CIX'||9999       ||
       'CMT'||claimant_pk||
       'DET'||claim_pk claimTransaction_uniqueid,
       'DUMMY' ct_typeCode,
       'DUMMY'  ct_subtypeCode,
       'Dummy'  costTypeDesc,
       to_char(null) mmct_pmt_type_code,
      --'DUMMY' ct_subtypeCode,
       to_char(NULL) mmct_pmt_type_desc,
       0 ct_amount,
       to_date(NULL) mmct_trans_approved_date,  
       'DUMMY' mmct_cost_type_code,
       'Dummy' mmct_cost_type_desc,
       claim_pk cm_transaction_pk,
       'Dummy transaction created by DW staging' mmct_comments,
       to_char(null) mmct_cpt_code1,
       to_char(null) mmct_cpt_code2,
       to_char(null) mmct_cpt_code3,
       to_char(null) mmct_cpt_code4,
       to_number(null)  mmct_rate,
       to_number(null) mmct_quantity,
       to_number(null) coverage_fk,
       to_number(null) risk_fk,
       to_number(null) policy_term_fk,
       to_number(null) policy_fk,
       claim_pk claim_pk,
       claim_insured_pk,
       claimant_pk,
       to_char(NULL) payee_uniqueID,
       c.claim_pk cm_transaction_detail_pk,
       0 mmct_trans_amt,
       to_char(NULL) mmct_payee_tax_id,
       to_char(null) mmct_payee_tax_id_type,
       to_number(null) coverage_insured_xref_pk,
       trunc(csh.status_start_date) mmct_trans_date,
       trunc(csh.status_start_date) ct_transactiondate,
       trunc(csh.status_start_date) ct_accountingdate,
       'DUMMY' mmct_trans_category,
       ci.sys_create_time mmct_sys_create_time,
       ci.sys_update_Time mmct_sys_update_time,
       ci.sys_updated_by mmct_sys_updated_by,
       ci.sys_created_by mmct_sys_created_by,
       to_char(null) polSource     
  FROM claimant clmt,
       claim_insured ci,
       entity_role erci,
       entity_role erclmnt,
       claim c,
       claim_status_history csh
WHERE c.claim_pk = erci.source_record_fk
  and erci.entity_role_pk = ci.entity_role_fk
  and c.claim_pk  = erclmnt.source_record_fk
  and erclmnt.entity_role_pk = clmt.entity_role_fk
  and csh.claim_status_history_pk = (select min(claim_status_history_pk)
                                       from claim_status_history sh1
                                      where sh1.source_record_fk = c.claim_pk)
  and to_number(substr(c.claim_pk,${CHUNK_POSITION},1)) in(${CHUNK_NUMBER})
  and not exists(select 'x'
                   from coverage_insured_xref cix
                  where claim_insured_fk = ci.claim_insured_pk)
) v;
               
</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>433</xloc>
      <yloc>128</yloc>
    </entry>
    <entry>
      <name>Table exists</name>
      <description/>
      <type>TABLE_EXISTS</type>
      <tablename>dw_tmp_clm_stg_txn_hist_txn</tablename>
      <schemaname/>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>157</xloc>
      <yloc>128</yloc>
    </entry>
    <entry>
      <name>JB_Extr_CM_Stg_Txn_Hist_Create_Temp</name>
      <description/>
      <type>JOB</type>
      <specification_method>rep_name</specification_method>
      <job_object_id/>
      <filename/>
      <jobname>JB_Extr_CM_Stg_Txn_Hist_Create_Temp</jobname>
      <directory>/public/ETL/OLTP_To_Staging/Jobs</directory>
      <arg_from_previous>N</arg_from_previous>
      <params_from_previous>N</params_from_previous>
      <exec_per_row>N</exec_per_row>
      <set_logfile>N</set_logfile>
      <logfile/>
      <logext/>
      <add_date>N</add_date>
      <add_time>N</add_time>
      <loglevel>Nothing</loglevel>
      <slave_server_name/>
      <wait_until_finished>Y</wait_until_finished>
      <follow_abort_remote>N</follow_abort_remote>
      <expand_remote_job>N</expand_remote_job>
      <create_parent_folder>N</create_parent_folder>
      <pass_export>N</pass_export>
      <run_configuration/>
      <parameters>
        <pass_all_parameters>Y</pass_all_parameters>
      </parameters>
      <set_append_logfile>N</set_append_logfile>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>706</xloc>
      <yloc>128</yloc>
    </entry>
    <entry>
      <name>stg txn tmp Exists?</name>
      <description/>
      <type>TABLE_EXISTS</type>
      <tablename>dw_stg_claimtransaction_temp</tablename>
      <schemaname/>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>706</xloc>
      <yloc>382</yloc>
    </entry>
    <entry>
      <name>Create stg txn tmp</name>
      <description/>
      <type>SQL</type>
      <sql>create table  dw_stg_claimtransaction_temp
nologging pctfree 0 
tablespace ${G_OLTP_DB_DATA} as
select ${MAX_STGCLAIMTRANSACTION_ID} + rownum stgclaimtransaction_id,
       v.*
from (
SELECT '3.0CT' file_version,
       'OASIS' source_system,
       SYSDATE extract_date,
       txn.claimtransaction_uniqueid,
       to_char(k.claim_fk) || '^' || k.feature_key claim_uniqueid,
       ct_accountingdate,
       ct_typecode,
       ct_amount,
       ct_sequence,
       ct_transactionflag,
       mmct_trans_status_code ct_transactionstatus,
       ct_transactiondate,
       ct_subtypecode,
       ct_changeeffectivedate,
       payee_uniqueid,
       txn_status_fk transactionstatus_id,
       mmct_pmt_type_code,
       mmct_pmt_type_desc,
       mmct_trans_category,
       mmct_trans_status_code,
       mmct_trans_status_desc,
       mmct_trans_status_date,
       mmct_trans_approved_date,
       mmct_cost_type_code mmct_cm_cost_type_code,
       mmct_cost_type_desc mmct_cm_cost_type_desc,
       mmct_payee_name,
       mmct_invoice_no,
       mmct_invoice_date,
       mmct_invoice_amt,
       mmct_rate,
       mmct_quantity,
       mmct_comments,
       CAST(to_number(NULL) AS INTEGER) mmct_cm_batch_payment_no,
       mmct_cpt_code1,
       mmct_cpt_code2,
       mmct_cpt_code3,
       mmct_cpt_code4,
       mmct_payee_uniqueid,
       mmct_payee_tax_id,
       mmct_payee_tax_id_type,
       mmct_trans_amt,
       txn.cm_transaction_pk mmct_trans_uniqueid,
       txn.cm_transaction_detail_pk mmct_trans_detail_uniqueid,
       b.mmct_batch_no mmct_cm_batch_no,
       mmct_batch_type_code,
       mmct_batch_type_desc,
       mmct_batch_status_code,
       mmct_batch_status_desc,
       mmct_batch_entry_date,
       mmct_batch_accounting_date,
       mmct_batch_approval_date,
       mmct_batch_approved_by,
       mmct_batch_branch_office_code,
       mmct_batch_branch_office_desc,
       mmct_batch_tot_amt,
       mmct_batch_tot_qty,
       mmct_batch_source,
       CAST(to_date(NULL) AS DATE) mmct_invoice_invoice_date,
       mmct_invoice_due_date,
       mmct_invoice_receive_date,
       mmct_invoice_accounting_date,
       mmct_invoice_cost_type_code,
       mmct_invoice_cost_type_desc,
       CAST(to_number(NULL) AS NUMBER(13, 2)) mmct_invoice_inv_amt,
       mmct_invoice_qty mmct_invoice_inv_qty,
       mmct_invoice_denied_amt,
       mmct_invoice_sequence_no,
       mmct_invoicer_name mmct_invoice_invoicer_name,
       mmct_invioce_invoicer_uniqueid,
       mmct_invoice_source,
       mmct_pmt_pmt_type_code,
       mmct_pmt_pmt_type_desc,
       mmct_pmt_number mmct_pmt_no,
       mmct_pmt_pmt_status_code mmct_pmt_status_code,
       mmct_pmt_pmt_status_desc mmct_pmt_status_desc,
       mmct_pmt_status_date,
       mmct_pmt_amount,
       s.mmct_pmt_payee_name mmct_pmt_name,
       mmct_pmt_payee_bnk_acct_no,
       mmct_pmt_payee_bnk_rte_no mmct_pmt_bnk_rte_no,
       mmct_pmt_request_date,
       mmct_pmt_cut_date,
       mmct_pmt_accept_date,
       mmct_pmt_addr1,
       mmct_pmt_addr2,
       mmct_pmt_city,
       mmct_pmt_state,
       mmct_pmt_zip,
       mmct_pmt_country,
       mmct_pmt_bnk_acct_no,
       mmct_pmt_stopvoid_reason,
       mmct_pmt_stopvoid_action,
       mmct_pmt_reissued,
       mmct_trans_date,
       mmct_sys_create_time,
       mmct_sys_update_time,
       mmct_sys_created_by,
       mmct_sys_updated_by,
       ${sql_loadDate} loaddate
  FROM dw_tmp_clm_stg_txn_hist_txn txn,
       dw_tmp_clm_stg_txn_hist_fks bfk,
       dw_tmp_clm_stg_txn_hist_batch b,
       dw_tmp_clm_stg_txn_hist_inv i,
       dw_tmp_clm_stg_txn_hist_stpmt s,
       (SELECT k1.claim_fk,
               NVL(k1.claim_insured_fk, 0) claim_insured_fk,
               NVL(k1.claimant_fk, 0) claimant_fk,
               NVL(k1.coverage_insured_xref_fk, 0) coverage_insured_xref_fk,
               k1.feature_key
          FROM dw_claim_feature_key k1) k
 WHERE 1 = 1
   AND txn.id = bfk.id(+)
   AND txn.id = s.id
   AND txn.id = b.id(+)
   AND txn.id = i.id(+)
   AND txn.claim_pk = k.claim_fk(+)
   AND NVL(txn.claim_insured_pk, 0) = k.claim_insured_fk(+)
   AND NVL(txn.claimant_pk, 0) = k.claimant_fk(+)
   AND NVL(txn.coverage_insured_xref_pk, 0) = k.coverage_insured_xref_fk(+)
 ORDER BY to_char(k.claim_fk) || '^' || k.feature_key,
          claimtransaction_uniqueid,
          s.ct_changeeffectivedate) v;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>706</xloc>
      <yloc>498</yloc>
    </entry>
    <entry>
      <name>JB_Copy_Claim_STG_TXN_TMP_to_DWR</name>
      <description/>
      <type>JOB</type>
      <specification_method>rep_name</specification_method>
      <job_object_id/>
      <filename/>
      <jobname>JB_Copy_Claim_STG_TXN_TMP_to_DWR</jobname>
      <directory>/public/ETL/OLTP_To_Staging/Jobs</directory>
      <arg_from_previous>N</arg_from_previous>
      <params_from_previous>N</params_from_previous>
      <exec_per_row>N</exec_per_row>
      <set_logfile>N</set_logfile>
      <logfile/>
      <logext/>
      <add_date>N</add_date>
      <add_time>N</add_time>
      <loglevel>Nothing</loglevel>
      <slave_server_name/>
      <wait_until_finished>Y</wait_until_finished>
      <follow_abort_remote>N</follow_abort_remote>
      <expand_remote_job>N</expand_remote_job>
      <create_parent_folder>N</create_parent_folder>
      <pass_export>N</pass_export>
      <run_configuration/>
      <parameters>
        <pass_all_parameters>Y</pass_all_parameters>
      </parameters>
      <set_append_logfile>N</set_append_logfile>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>954</xloc>
      <yloc>498</yloc>
    </entry>
    <entry>
      <name>JB_Extr_CM_Stg_Txn_Hist_Create_Temp1</name>
      <description/>
      <type>JOB</type>
      <specification_method>rep_name</specification_method>
      <job_object_id/>
      <filename/>
      <jobname>JB_Extr_CM_Stg_Txn_Hist_Create_Temp1</jobname>
      <directory>/public/ETL/OLTP_To_Staging/Jobs</directory>
      <arg_from_previous>N</arg_from_previous>
      <params_from_previous>N</params_from_previous>
      <exec_per_row>N</exec_per_row>
      <set_logfile>N</set_logfile>
      <logfile/>
      <logext/>
      <add_date>N</add_date>
      <add_time>N</add_time>
      <loglevel>Nothing</loglevel>
      <slave_server_name/>
      <wait_until_finished>Y</wait_until_finished>
      <follow_abort_remote>N</follow_abort_remote>
      <expand_remote_job>N</expand_remote_job>
      <create_parent_folder>N</create_parent_folder>
      <pass_export>N</pass_export>
      <run_configuration/>
      <parameters>
        <pass_all_parameters>Y</pass_all_parameters>
      </parameters>
      <set_append_logfile>N</set_append_logfile>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>706</xloc>
      <yloc>247</yloc>
    </entry>
    <entry>
      <name>Truncate dw_tmp_clm_stg_txn_hist_txn</name>
      <description/>
      <type>SQL</type>
      <sql>--Drop table dw_tmp_clm_stg_txn_hist_txn;
begin
  ${G_OLTP_DB_OWNER}.DW_Truncate_Table('${G_OLTP_DB_OWNER}','dw_tmp_clm_stg_txn_hist_txn') ;
end;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>T</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>157</xloc>
      <yloc>21</yloc>
    </entry>
    <entry>
      <name>Insert dw_tmp_clm_stg_txn_hist_txn</name>
      <description/>
      <type>SQL</type>
      <sql>insert /*+ append */ into dw_tmp_clm_stg_txn_hist_txn
select rownum id,v.*
  from (
SELECT distinct cm_transaction_detail_pk ct_sequence,
       'TXN'||cm_transaction_pk       || 
       'CIX'||coverage_insured_xref_pk||
       'CMT'||claimant_pk             ||
       'DET'||td.cm_transaction_detail_pk claimTransaction_uniqueid,
       td.cm_transaction_type_code ct_typeCode,
       ctc.cm_cost_type_code ct_subtypeCode,
       ctc.long_description costTypeDesc,
       t.cm_payment_type_code mmct_pmt_type_code,
      --ctc.cm_cost_type_code ct_subtypeCode,
       (select long_description
          from cm_payment_type_code ptc
         where ptc.cm_payment_Type_code = t.cm_payment_Type_code) mmct_pmt_type_desc,
       nvl(td.amount,0) ct_amount,
       trunc(t.approved_date) mmct_trans_approved_date,  
       tc.cm_cost_type_code mmct_cost_type_code,
       ctc.long_description mmct_cost_type_desc,
       cm_transaction_pk,
       t.comments mmct_comments,
       t.cpt_code1 mmct_cpt_code1,
       t.cpt_code2 mmct_cpt_code2,
       t.cpt_code3 mmct_cpt_code3,
       t.cpt_code4 mmct_cpt_code4,
       t.rate mmct_rate,
       t.quantity mmct_quantity,
       cix.coverage_fk,
       cix.risk_fk,
       cix.policy_term_fk,
       cix.policy_fk,
       source_record_fk claim_pk,
       claim_insured_pk,
       claimant_pk,
       e.client_id payee_uniqueID,
       td.cm_transaction_detail_pk,
       nvl(trans_amt,0) mmct_trans_amt,
       nvl(e.federal_tax_id,social_security_number) mmct_payee_tax_id,
       t.tax_id_type mmct_payee_tax_id_type,
       coverage_insured_xref_pk,
       trunc(t.trans_date) mmct_trans_date,
       trunc(t.trans_date) ct_transactiondate,
       nvl(trunc(t.accounting_date),nvl(trunc(t.trans_date),trunc(t.sys_create_time))) ct_accountingdate,
       (CASE
         WHEN NVL(tc.recovery_b,'N')   = 'Y' THEN
           'RECOVERY'
         WHEN NVL(tc.paid_b,'N')       = 'Y' THEN
           'PAYMENT'
         WHEN NVL(tc.reserve_b,'N')    = 'Y' THEN
           'RESERVE'
         WHEN NVL(tc.deductible_b,'N') = 'Y' THEN
           'DEDUCTIBLE'
         WHEN tc.cm_cost_type_code = 'DEDUCTIBLE' THEN
           'DEDUCTIBLE'  
         ELSE  
           'OTHER'
       END) mmct_trans_category,
       t.sys_create_time mmct_sys_create_time,
       t.sys_update_Time mmct_sys_update_time,
       t.sys_updated_by mmct_sys_updated_by,
       t.sys_created_by mmct_sys_created_by,
       cix.source_table_name polSource 
  FROM cm_transaction_detail td,
       cm_transaction t,
       claimant clmt,
       coverage_insured_xref cix,
       claim_insured ci,
       cm_transaction_type_code tc,
       cm_cost_type_code ctc ,
       entity e,
       claim c
WHERE c.claim_pk = t.source_record_fk
  AND td.cm_transaction_fk = t.cm_transaction_pk
  AND td.claimant_fk       = clmt.CLAIMANT_PK
  AND td.COVERAGE_INSURED_XREF_FK = cix.coverage_insured_xref_pk
  AND cix.claim_insured_fk = ci.claim_insured_pk  
  AND t.cm_transaction_type_code = tc.cm_transaction_type_code  
  AND tc.cm_cost_type_code = ctc.cm_cost_type_code 
  and t.entity_payee_fk    = e.entity_pk(+)
  and to_number(substr(policy_fk,${CHUNK_POSITION},1)) in(${CHUNK_NUMBER})
UNION all
SELECT distinct claim_pk ct_sequence,
       'TXN' ||claim_pk                ||
       'CIX' ||coverage_insured_xref_pk||
       'CMT'||claimant_pk              ||
       'DET'||claim_pk claimTransaction_uniqueid,
       'DUMMY' ct_typeCode,
       'DUMMY'  ct_subtypeCode,
       'Dummy'  costTypeDesc,
       to_char(null) mmct_pmt_type_code,
      --'DUMMY' ct_subtypeCode,
       to_char(NULL) mmct_pmt_type_desc,
       0 ct_amount,
       to_date(NULL) mmct_trans_approved_date,  
       'DUMMY' mmct_cost_type_code,
       'Dummy' mmct_cost_type_desc,
       claim_pk cm_transaction_pk,
       'Dummy transaction created by DW staging' mmct_comments,
       to_char(null) mmct_cpt_code1,
       to_char(null) mmct_cpt_code2,
       to_char(null) mmct_cpt_code3,
       to_char(null) mmct_cpt_code4,
       to_number(null)  mmct_rate,
       to_number(null) mmct_quantity,
       cix.coverage_fk,
       cix.risk_fk,
       cix.policy_term_fk,
       cix.policy_fk,
       claim_pk claim_pk,
       claim_insured_pk,
       claimant_pk,
       to_char(NULL) payee_uniqueID,
       c.claim_pk cm_transaction_detail_pk,
       0 mmct_trans_amt,
       to_char(NULL) mmct_payee_tax_id,
       to_char(null) mmct_payee_tax_id_type,
       coverage_insured_xref_pk,
       trunc(sctsd.effective_date) mmct_trans_date,
       trunc(sctsd.effective_date) ct_transactiondate,
       trunc(sctsd.effective_date) ct_accountingdate,
       'DUMMY' mmct_trans_category,
       cix.sys_create_time mmct_sys_create_time,
       cix.sys_update_Time mmct_sys_update_time,
       cix.sys_updated_by mmct_sys_updated_by,
       cix.sys_created_by mmct_sys_created_by,
       cix.source_table_name polSource     
  FROM claimant clmt,
       entity_role erc,
       entity ec,
       coverage_insured_xref cix,
       claimant_coverage_xref ccx,
       claim_insured ci,
       claim c,
       dw_stg_claim_type_status_disp sctsd
WHERE cix.claim_insured_fk         = ci.claim_insured_pk  
  AND ccx.claimant_fk              = clmt.claimant_pk
  and clmt.entity_role_fk          = erc.entity_role_pk
  and erc.entity_fk                = ec.entity_pk
  AND ccx.coverage_insured_xref_fk = cix.coverage_insured_xref_pk
  AND c.claim_pk                   = ccx.claim_fk
  and to_number(substr(cix.policy_fk,${CHUNK_POSITION},1)) in(${CHUNK_NUMBER})
  and sctsd.claim_fk              = c.claim_pk
  and sctsd.effective_date        = (select min(effective_date)
                                      from dw_stg_claim_type_status_disp sctsd1
                                     where c.claim_pk = sctsd1.claim_fk)    
  AND NOT EXISTS(SELECT 'x'
                   FROM cm_transaction_detail d,
                        cm_transaction t
                  WHERE d.coverage_insured_xref_fk = cix.coverage_insured_xref_pk
                    and d.cm_transaction_fk = t.cm_transaction_pk
                    and to_number(to_char(accounting_date,'yyyymm')) &lt;= to_number(to_char(sctsd.effective_date,'yyyymm')))
union all
SELECT distinct claim_pk ct_sequence,
       'TXN'||claim_pk   ||
       'CIX'||9999       ||
       'CMT'||claimant_pk||
       'DET'||claim_pk claimTransaction_uniqueid,
       'DUMMY' ct_typeCode,
       'DUMMY'  ct_subtypeCode,
       'Dummy'  costTypeDesc,
       to_char(null) mmct_pmt_type_code,
      --'DUMMY' ct_subtypeCode,
       to_char(NULL) mmct_pmt_type_desc,
       0 ct_amount,
       to_date(NULL) mmct_trans_approved_date,  
       'DUMMY' mmct_cost_type_code,
       'Dummy' mmct_cost_type_desc,
       claim_pk cm_transaction_pk,
       'Dummy transaction created by DW staging' mmct_comments,
       to_char(null) mmct_cpt_code1,
       to_char(null) mmct_cpt_code2,
       to_char(null) mmct_cpt_code3,
       to_char(null) mmct_cpt_code4,
       to_number(null)  mmct_rate,
       to_number(null) mmct_quantity,
       to_number(null) coverage_fk,
       to_number(null) risk_fk,
       to_number(null) policy_term_fk,
       to_number(null) policy_fk,
       claim_pk claim_pk,
       claim_insured_pk,
       claimant_pk,
       to_char(NULL) payee_uniqueID,
       c.claim_pk cm_transaction_detail_pk,
       0 mmct_trans_amt,
       to_char(NULL) mmct_payee_tax_id,
       to_char(null) mmct_payee_tax_id_type,
       to_number(null) coverage_insured_xref_pk,
       trunc(csh.status_start_date) mmct_trans_date,
       trunc(csh.status_start_date) ct_transactiondate,
       trunc(csh.status_start_date) ct_accountingdate,
       'DUMMY' mmct_trans_category,
       ci.sys_create_time mmct_sys_create_time,
       ci.sys_update_Time mmct_sys_update_time,
       ci.sys_updated_by mmct_sys_updated_by,
       ci.sys_created_by mmct_sys_created_by,
       to_char(null) polSource     
  FROM claimant clmt,
       claim_insured ci,
       entity_role erci,
       entity_role erclmnt,
       claim c,
       claim_status_history csh
WHERE c.claim_pk = erci.source_record_fk
  and erci.entity_role_pk = ci.entity_role_fk
  and c.claim_pk  = erclmnt.source_record_fk
  and erclmnt.entity_role_pk = clmt.entity_role_fk
  and csh.claim_status_history_pk = (select min(claim_status_history_pk)
                                       from claim_status_history sh1
                                      where sh1.source_record_fk = c.claim_pk)
  and to_number(substr(c.claim_pk,${CHUNK_POSITION},1)) in(${CHUNK_NUMBER})
  and not exists(select 'x'
                   from coverage_insured_xref cix
                  where claim_insured_fk = ci.claim_insured_pk)
) v;
               
</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>433</xloc>
      <yloc>21</yloc>
    </entry>
    <entry>
      <name>Truncate dw_stg_claimtransaction_temp</name>
      <description/>
      <type>SQL</type>
      <sql>--Drop table dw_stg_claimtransaction_temp;

begin
  ${G_OLTP_DB_OWNER}.DW_Truncate_Table('${G_OLTP_DB_OWNER}','dw_stg_claimtransaction_temp') ;
end;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>T</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>869</xloc>
      <yloc>382</yloc>
    </entry>
    <entry>
      <name>Insert dw_stg_claimtransaction_temp</name>
      <description/>
      <type>SQL</type>
      <sql>Insert /*+ append */ into dw_stg_claimtransaction_temp
select ${MAX_STGCLAIMTRANSACTION_ID} + rownum stgclaimtransaction_id,
       v.*
from (
SELECT '3.0CT' file_version,
       'OASIS' source_system,
       SYSDATE extract_date,
       txn.claimtransaction_uniqueid,
       to_char(k.claim_fk) || '^' || k.feature_key claim_uniqueid,
       ct_accountingdate,
       ct_typecode,
       ct_amount,
       ct_sequence,
       ct_transactionflag,
       mmct_trans_status_code ct_transactionstatus,
       ct_transactiondate,
       ct_subtypecode,
       ct_changeeffectivedate,
       payee_uniqueid,
       txn_status_fk transactionstatus_id,
       mmct_pmt_type_code,
       mmct_pmt_type_desc,
       mmct_trans_category,
       mmct_trans_status_code,
       mmct_trans_status_desc,
       mmct_trans_status_date,
       mmct_trans_approved_date,
       mmct_cost_type_code mmct_cm_cost_type_code,
       mmct_cost_type_desc mmct_cm_cost_type_desc,
       mmct_payee_name,
       mmct_invoice_no,
       mmct_invoice_date,
       mmct_invoice_amt,
       mmct_rate,
       mmct_quantity,
       mmct_comments,
       CAST(to_number(NULL) AS INTEGER) mmct_cm_batch_payment_no,
       mmct_cpt_code1,
       mmct_cpt_code2,
       mmct_cpt_code3,
       mmct_cpt_code4,
       mmct_payee_uniqueid,
       mmct_payee_tax_id,
       mmct_payee_tax_id_type,
       mmct_trans_amt,
       txn.cm_transaction_pk mmct_trans_uniqueid,
       txn.cm_transaction_detail_pk mmct_trans_detail_uniqueid,
       b.mmct_batch_no mmct_cm_batch_no,
       mmct_batch_type_code,
       mmct_batch_type_desc,
       mmct_batch_status_code,
       mmct_batch_status_desc,
       mmct_batch_entry_date,
       mmct_batch_accounting_date,
       mmct_batch_approval_date,
       mmct_batch_approved_by,
       mmct_batch_branch_office_code,
       mmct_batch_branch_office_desc,
       mmct_batch_tot_amt,
       mmct_batch_tot_qty,
       mmct_batch_source,
       CAST(to_date(NULL) AS DATE) mmct_invoice_invoice_date,
       mmct_invoice_due_date,
       mmct_invoice_receive_date,
       mmct_invoice_accounting_date,
       mmct_invoice_cost_type_code,
       mmct_invoice_cost_type_desc,
       CAST(to_number(NULL) AS NUMBER(13, 2)) mmct_invoice_inv_amt,
       mmct_invoice_qty mmct_invoice_inv_qty,
       mmct_invoice_denied_amt,
       mmct_invoice_sequence_no,
       mmct_invoicer_name mmct_invoice_invoicer_name,
       mmct_invioce_invoicer_uniqueid,
       mmct_invoice_source,
       mmct_pmt_pmt_type_code,
       mmct_pmt_pmt_type_desc,
       mmct_pmt_number mmct_pmt_no,
       mmct_pmt_pmt_status_code mmct_pmt_status_code,
       mmct_pmt_pmt_status_desc mmct_pmt_status_desc,
       mmct_pmt_status_date,
       mmct_pmt_amount,
       s.mmct_pmt_payee_name mmct_pmt_name,
       mmct_pmt_payee_bnk_acct_no,
       mmct_pmt_payee_bnk_rte_no mmct_pmt_bnk_rte_no,
       mmct_pmt_request_date,
       mmct_pmt_cut_date,
       mmct_pmt_accept_date,
       mmct_pmt_addr1,
       mmct_pmt_addr2,
       mmct_pmt_city,
       mmct_pmt_state,
       mmct_pmt_zip,
       mmct_pmt_country,
       mmct_pmt_bnk_acct_no,
       mmct_pmt_stopvoid_reason,
       mmct_pmt_stopvoid_action,
       mmct_pmt_reissued,
       mmct_trans_date,
       mmct_sys_create_time,
       mmct_sys_update_time,
       mmct_sys_created_by,
       mmct_sys_updated_by,
       ${sql_loadDate} loaddate
  FROM dw_tmp_clm_stg_txn_hist_txn txn,
       dw_tmp_clm_stg_txn_hist_fks bfk,
       dw_tmp_clm_stg_txn_hist_batch b,
       dw_tmp_clm_stg_txn_hist_inv i,
       dw_tmp_clm_stg_txn_hist_stpmt s,
       (SELECT k1.claim_fk,
               NVL(k1.claim_insured_fk, 0) claim_insured_fk,
               NVL(k1.claimant_fk, 0) claimant_fk,
               NVL(k1.coverage_insured_xref_fk, 0) coverage_insured_xref_fk,
               k1.feature_key
          FROM dw_claim_feature_key k1) k
 WHERE 1 = 1
   AND txn.id = bfk.id(+)
   AND txn.id = s.id
   AND txn.id = b.id(+)
   AND txn.id = i.id(+)
   AND txn.claim_pk = k.claim_fk(+)
   AND NVL(txn.claim_insured_pk, 0) = k.claim_insured_fk(+)
   AND NVL(txn.claimant_pk, 0) = k.claimant_fk(+)
   AND NVL(txn.coverage_insured_xref_pk, 0) = k.coverage_insured_xref_fk(+)
 ORDER BY to_char(k.claim_fk) || '^' || k.feature_key,
          claimtransaction_uniqueid,
          s.ct_changeeffectivedate) v;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>Delphi_OLTP</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>921</xloc>
      <yloc>440</yloc>
    </entry>
  </entries>
  <hops>
    <hop>
      <from>START</from>
      <to>Table exists</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>Table exists</from>
      <to>Create tmp clm txn</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Create tmp clm txn</from>
      <to>JB_Extr_CM_Stg_Txn_Hist_Create_Temp</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>stg txn tmp Exists?</from>
      <to>Create stg txn tmp</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Create stg txn tmp</from>
      <to>JB_Copy_Claim_STG_TXN_TMP_to_DWR</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>JB_Extr_CM_Stg_Txn_Hist_Create_Temp</from>
      <to>JB_Extr_CM_Stg_Txn_Hist_Create_Temp1</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>JB_Extr_CM_Stg_Txn_Hist_Create_Temp1</from>
      <to>stg txn tmp Exists?</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Table exists</from>
      <to>Truncate dw_tmp_clm_stg_txn_hist_txn</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Truncate dw_tmp_clm_stg_txn_hist_txn</from>
      <to>Insert dw_tmp_clm_stg_txn_hist_txn</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Insert dw_tmp_clm_stg_txn_hist_txn</from>
      <to>JB_Extr_CM_Stg_Txn_Hist_Create_Temp</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>stg txn tmp Exists?</from>
      <to>Truncate dw_stg_claimtransaction_temp</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Truncate dw_stg_claimtransaction_temp</from>
      <to>Insert dw_stg_claimtransaction_temp</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Insert dw_stg_claimtransaction_temp</from>
      <to>JB_Copy_Claim_STG_TXN_TMP_to_DWR</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
  </hops>
  <notepads>
  </notepads>
  <attributes>
    <group>
      <name>JobRestart</name>
      <attribute>
        <key>UniqueConnections</key>
        <value>N</value>
      </attribute>
    </group>
  </attributes>
</job>
