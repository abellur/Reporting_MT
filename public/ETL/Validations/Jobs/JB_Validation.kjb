<job>
  <name>JB_Validation</name>
  <description>Job to validation the data populated to DW</description>
  <extended_description>Date         By     Description
01/29/2016   Jma    Issue #166063. Update validation job to create some temp tables to 
                    improve PM validation queries.
</extended_description>
  <job_version/>
  <job_status>0</job_status>
  <directory>/public/ETL/Validations/Jobs</directory>
  <created_user/>
  <created_date>2014/06/23 13:18:16.591</created_date>
  <modified_user>-</modified_user>
  <modified_date>2017/06/29 11:24:30.163</modified_date>
  <parameters>
    </parameters>
  <connection>
    <name>4SBI_DataWarehouse</name>
    <server>${G_DW_DB_HOST}</server>
    <type>ORACLE</type>
    <access>Native</access>
    <database>${G_DW_DB_NAME}</database>
    <port>${G_DW_DB_PORT}</port>
    <username>${G_DW_DB_USERNAME}</username>
    <password>${G_DW_DB_PWD}</password>
    <servername/>
    <data_tablespace>${G_DW_DB_DATA}</data_tablespace>
    <index_tablespace>${G_DW_DB_INDEX}</index_tablespace>
    <attributes>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_LOWERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_UPPERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>IS_CLUSTERED</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>PORT_NUMBER</code>
        <attribute>${G_DW_DB_PORT}</attribute>
      </attribute>
      <attribute>
        <code>QUOTE_ALL_FIELDS</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>SUPPORTS_BOOLEAN_DATA_TYPE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>USE_POOLING</code>
        <attribute>N</attribute>
      </attribute>
    </attributes>
  </connection>
  <connection>
    <name>DW_Log_Link</name>
    <server>${G_LOG_DB_HOST}</server>
    <type>ORACLE</type>
    <access>Native</access>
    <database>${G_LOG_DB_NAME}</database>
    <port>${G_LOG_DB_PORT}</port>
    <username>${G_LOG_DB_USERNAME}</username>
    <password>${G_LOG_DB_PWD}</password>
    <servername/>
    <data_tablespace>${G_LOG_DB_DATA}</data_tablespace>
    <index_tablespace>${G_LOG_DB_INDEX}</index_tablespace>
    <attributes>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_LOWERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_UPPERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>IS_CLUSTERED</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>PORT_NUMBER</code>
        <attribute>${G_LOG_DB_PORT}</attribute>
      </attribute>
      <attribute>
        <code>QUOTE_ALL_FIELDS</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>SUPPORTS_BOOLEAN_DATA_TYPE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>USE_POOLING</code>
        <attribute>N</attribute>
      </attribute>
    </attributes>
  </connection>
  <slaveservers>
    <slaveserver>
      <name>4Sight BI - PDI Server</name>
      <hostname>10.0.0.21</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>joe</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>Carte 1</name>
      <hostname>localhost</hostname>
      <port>9081</port>
      <webAppName/>
      <username>cluster</username>
      <password>Encrypted 2be98afc86aa7f2e4cb1aa265cd86aac8</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>DI Server</name>
      <hostname>localhost</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>joe</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_ETL_DEV</name>
      <hostname>magspentaho</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>shota</username>
      <password>Encrypted 2be98afc86aa7f2e4cb79ce63d69dbbdb</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_ETL_SERVER</name>
      <hostname>http://magspentaho</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>shota</username>
      <password>Encrypted 2be98afc86aa7f2e4cb79ce63d69dbbdb</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_ETL_TEST</name>
      <hostname>magspentahotest</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_PENTAHO</name>
      <hostname>magspentaho</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_PENTAHO_BTS</name>
      <hostname>129.144.25.104</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_PENTAHO_DEV</name>
      <hostname>magspentahodev</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>Master</name>
      <hostname>localhost</hostname>
      <port>8081</port>
      <webAppName/>
      <username>cluster</username>
      <password>Encrypted 2be98afc86aa7f2e4cb1aa265cd86aac8</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>SERVER1</name>
      <hostname>LOCALHOST</hostname>
      <port>3306</port>
      <webAppName/>
      <username>root</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>SLAVE ONE</name>
      <hostname>192.168.2.101</hostname>
      <port>3306</port>
      <webAppName/>
      <username>root</username>
      <password>Encrypted 2be98afc86aa7f2e4a418bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>SLAVE TWO</name>
      <hostname>192.168.2.101</hostname>
      <port>3306</port>
      <webAppName/>
      <username>root</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>Slave1</name>
      <hostname>localhost</hostname>
      <port>8082</port>
      <webAppName/>
      <username>cluster</username>
      <password>Encrypted 2be98afc86aa7f2e4cb1aa265cd86aac8</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>Slave2</name>
      <hostname>localhost</hostname>
      <port>8083</port>
      <webAppName/>
      <username>cluster</username>
      <password>Encrypted 2be98afc86aa7f2e4cb1aa265cd86aac8</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>Slave3</name>
      <hostname>localhost</hostname>
      <port>8084</port>
      <webAppName/>
      <username>cluster</username>
      <password>Encrypted 2be98afc86aa7f2e4cb1aa265cd86aac8</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>local DIS</name>
      <hostname>localhost</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>magspentahodev</name>
      <hostname>magspentahodev</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
  </slaveservers>
  <job-log-table>
    <connection>DW_Log_Link</connection>
    <schema/>
    <table>${G_DB_JOB_LOG_TABLE}</table>
    <size_limit_lines/>
    <interval/>
    <timeout_days/>
    <field>
      <id>ID_JOB</id>
      <enabled>Y</enabled>
      <name>ID_JOB</name>
    </field>
    <field>
      <id>CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>CHANNEL_ID</name>
    </field>
    <field>
      <id>JOBNAME</id>
      <enabled>Y</enabled>
      <name>JOBNAME</name>
    </field>
    <field>
      <id>STATUS</id>
      <enabled>Y</enabled>
      <name>STATUS</name>
    </field>
    <field>
      <id>LINES_READ</id>
      <enabled>Y</enabled>
      <name>LINES_READ</name>
    </field>
    <field>
      <id>LINES_WRITTEN</id>
      <enabled>Y</enabled>
      <name>LINES_WRITTEN</name>
    </field>
    <field>
      <id>LINES_UPDATED</id>
      <enabled>Y</enabled>
      <name>LINES_UPDATED</name>
    </field>
    <field>
      <id>LINES_INPUT</id>
      <enabled>Y</enabled>
      <name>LINES_INPUT</name>
    </field>
    <field>
      <id>LINES_OUTPUT</id>
      <enabled>Y</enabled>
      <name>LINES_OUTPUT</name>
    </field>
    <field>
      <id>LINES_REJECTED</id>
      <enabled>Y</enabled>
      <name>LINES_REJECTED</name>
    </field>
    <field>
      <id>ERRORS</id>
      <enabled>Y</enabled>
      <name>ERRORS</name>
    </field>
    <field>
      <id>STARTDATE</id>
      <enabled>Y</enabled>
      <name>STARTDATE</name>
    </field>
    <field>
      <id>ENDDATE</id>
      <enabled>Y</enabled>
      <name>ENDDATE</name>
    </field>
    <field>
      <id>LOGDATE</id>
      <enabled>Y</enabled>
      <name>LOGDATE</name>
    </field>
    <field>
      <id>DEPDATE</id>
      <enabled>Y</enabled>
      <name>DEPDATE</name>
    </field>
    <field>
      <id>REPLAYDATE</id>
      <enabled>Y</enabled>
      <name>REPLAYDATE</name>
    </field>
    <field>
      <id>LOG_FIELD</id>
      <enabled>Y</enabled>
      <name>LOG_FIELD</name>
    </field>
    <field>
      <id>EXECUTING_SERVER</id>
      <enabled>N</enabled>
      <name>EXECUTING_SERVER</name>
    </field>
    <field>
      <id>EXECUTING_USER</id>
      <enabled>N</enabled>
      <name>EXECUTING_USER</name>
    </field>
    <field>
      <id>START_JOB_ENTRY</id>
      <enabled>N</enabled>
      <name>START_JOB_ENTRY</name>
    </field>
    <field>
      <id>CLIENT</id>
      <enabled>N</enabled>
      <name>CLIENT</name>
    </field>
  </job-log-table>
  <jobentry-log-table>
    <connection/>
    <schema/>
    <table/>
    <timeout_days/>
    <field>
      <id>ID_BATCH</id>
      <enabled>Y</enabled>
      <name>ID_BATCH</name>
    </field>
    <field>
      <id>CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>CHANNEL_ID</name>
    </field>
    <field>
      <id>LOG_DATE</id>
      <enabled>Y</enabled>
      <name>LOG_DATE</name>
    </field>
    <field>
      <id>JOBNAME</id>
      <enabled>Y</enabled>
      <name>TRANSNAME</name>
    </field>
    <field>
      <id>JOBENTRYNAME</id>
      <enabled>Y</enabled>
      <name>STEPNAME</name>
    </field>
    <field>
      <id>LINES_READ</id>
      <enabled>Y</enabled>
      <name>LINES_READ</name>
    </field>
    <field>
      <id>LINES_WRITTEN</id>
      <enabled>Y</enabled>
      <name>LINES_WRITTEN</name>
    </field>
    <field>
      <id>LINES_UPDATED</id>
      <enabled>Y</enabled>
      <name>LINES_UPDATED</name>
    </field>
    <field>
      <id>LINES_INPUT</id>
      <enabled>Y</enabled>
      <name>LINES_INPUT</name>
    </field>
    <field>
      <id>LINES_OUTPUT</id>
      <enabled>Y</enabled>
      <name>LINES_OUTPUT</name>
    </field>
    <field>
      <id>LINES_REJECTED</id>
      <enabled>Y</enabled>
      <name>LINES_REJECTED</name>
    </field>
    <field>
      <id>ERRORS</id>
      <enabled>Y</enabled>
      <name>ERRORS</name>
    </field>
    <field>
      <id>RESULT</id>
      <enabled>Y</enabled>
      <name>RESULT</name>
    </field>
    <field>
      <id>NR_RESULT_ROWS</id>
      <enabled>Y</enabled>
      <name>NR_RESULT_ROWS</name>
    </field>
    <field>
      <id>NR_RESULT_FILES</id>
      <enabled>Y</enabled>
      <name>NR_RESULT_FILES</name>
    </field>
    <field>
      <id>LOG_FIELD</id>
      <enabled>N</enabled>
      <name>LOG_FIELD</name>
    </field>
    <field>
      <id>COPY_NR</id>
      <enabled>N</enabled>
      <name>COPY_NR</name>
    </field>
  </jobentry-log-table>
  <channel-log-table>
    <connection/>
    <schema/>
    <table/>
    <timeout_days/>
    <field>
      <id>ID_BATCH</id>
      <enabled>Y</enabled>
      <name>ID_BATCH</name>
    </field>
    <field>
      <id>CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>CHANNEL_ID</name>
    </field>
    <field>
      <id>LOG_DATE</id>
      <enabled>Y</enabled>
      <name>LOG_DATE</name>
    </field>
    <field>
      <id>LOGGING_OBJECT_TYPE</id>
      <enabled>Y</enabled>
      <name>LOGGING_OBJECT_TYPE</name>
    </field>
    <field>
      <id>OBJECT_NAME</id>
      <enabled>Y</enabled>
      <name>OBJECT_NAME</name>
    </field>
    <field>
      <id>OBJECT_COPY</id>
      <enabled>Y</enabled>
      <name>OBJECT_COPY</name>
    </field>
    <field>
      <id>REPOSITORY_DIRECTORY</id>
      <enabled>Y</enabled>
      <name>REPOSITORY_DIRECTORY</name>
    </field>
    <field>
      <id>FILENAME</id>
      <enabled>Y</enabled>
      <name>FILENAME</name>
    </field>
    <field>
      <id>OBJECT_ID</id>
      <enabled>Y</enabled>
      <name>OBJECT_ID</name>
    </field>
    <field>
      <id>OBJECT_REVISION</id>
      <enabled>Y</enabled>
      <name>OBJECT_REVISION</name>
    </field>
    <field>
      <id>PARENT_CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>PARENT_CHANNEL_ID</name>
    </field>
    <field>
      <id>ROOT_CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>ROOT_CHANNEL_ID</name>
    </field>
  </channel-log-table>
  <checkpoint-log-table>
    <connection/>
    <schema/>
    <table/>
    <timeout_days/>
    <max_nr_retries/>
    <run_retry_period/>
    <namespace_parameter/>
    <save_parameters/>
    <save_result_rows/>
    <save_result_files/>
    <field>
      <id>ID_JOB_RUN</id>
      <enabled>Y</enabled>
      <name>ID_JOB_RUN</name>
    </field>
    <field>
      <id>ID_JOB</id>
      <enabled>Y</enabled>
      <name>ID_JOB</name>
    </field>
    <field>
      <id>JOBNAME</id>
      <enabled>Y</enabled>
      <name>JOBNAME</name>
    </field>
    <field>
      <id>NAMESPACE</id>
      <enabled>Y</enabled>
      <name>NAMESPACE</name>
    </field>
    <field>
      <id>CHECKPOINT_NAME</id>
      <enabled>Y</enabled>
      <name>CHECKPOINT_NAME</name>
    </field>
    <field>
      <id>CHECKPOINT_COPYNR</id>
      <enabled>Y</enabled>
      <name>CHECKPOINT_COPYNR</name>
    </field>
    <field>
      <id>ATTEMPT_NR</id>
      <enabled>Y</enabled>
      <name>ATTEMPT_NR</name>
    </field>
    <field>
      <id>JOB_RUN_START_DATE</id>
      <enabled>Y</enabled>
      <name>JOB_RUN_START_DATE</name>
    </field>
    <field>
      <id>LOGDATE</id>
      <enabled>Y</enabled>
      <name>LOGDATE</name>
    </field>
    <field>
      <id>RESULT_XML</id>
      <enabled>Y</enabled>
      <name>RESULT_XML</name>
    </field>
    <field>
      <id>PARAMETER_XML</id>
      <enabled>Y</enabled>
      <name>PARAMETER_XML</name>
    </field>
  </checkpoint-log-table>
  <pass_batchid>N</pass_batchid>
  <shared_objects_file/>
  <entries>
    <entry>
      <name>START</name>
      <description/>
      <type>SPECIAL</type>
      <start>Y</start>
      <dummy>N</dummy>
      <repeat>N</repeat>
      <schedulerType>0</schedulerType>
      <intervalSeconds>0</intervalSeconds>
      <intervalMinutes>60</intervalMinutes>
      <hour>12</hour>
      <minutes>0</minutes>
      <weekDay>1</weekDay>
      <DayOfMonth>1</DayOfMonth>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>76</xloc>
      <yloc>114</yloc>
    </entry>
    <entry>
      <name>Claim Number Validation</name>
      <description/>
      <type>SQL</type>
      <sql>insert
  into dw_etl_audit
WITH max_id AS
     (select nvl(max(dw_etl_audit_pk),0)  max_audit_pk
      from   dw_etl_audit e)
select max_audit_pk + rownum,
       error_msg,
       ${sql_loadDate},
       '${Internal.Job.Name}',
       'Claim Number Validation',
       'Claims',
       message_level
  from max_id,
(
with oltp_claim as (select distinct claim_no
  from claim@oltp
  order by 1)
select 'Summary: Total Claims in Both OLTP and DW = '||to_char(count(*),'99,999,999') error_msg,
       'Information' message_level
  from (select distinct clm_claimnumber
          from dim_claim) dw,
       oltp_claim oltp
 where dw.clm_claimnumber = oltp.claim_no
union
select 'Claim Found in OLTP but not in DW, Claim_no = '||claim_no,'Error'
  from oltp_claim oltp
 where not exists(select 'x'
                    from dim_claim dc
                   where dc.clm_claimnumber = oltp.claim_no)
union
select distinct 'Claim Found in DW but not in OLTP, Claim_no = '||clm_claimnumber,'Error'
  from dim_claim dc
 where not exists(select 'x'
                    from oltp_claim oltp
                   where dc.clm_claimnumber = oltp.claim_no) 
   and dc.clm_claimnumber &lt;&gt; 'Unknown'  );
commit;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_DataWarehouse</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>312</xloc>
      <yloc>114</yloc>
    </entry>
    <entry>
      <name>Claim Amount Validation</name>
      <description/>
      <type>SQL</type>
      <sql>insert
  into dw_etl_audit
WITH max_id AS
     (select nvl(max(dw_etl_audit_pk),0)  max_audit_pk
      from   dw_etl_audit e)
select max_audit_pk + rownum,
       error_msg,
       ${sql_loadDate},
       '${Internal.Job.Name}',
       'Claim Amount Validation',
       'Claims',
       message_level
  from max_id, 
(
with oltp_amts as
(
      select claim_no,
             sum(paid_amt) paid_amt,
             sum(res_amt) res_amt,
             sum(recv_amt) recv_amt
      from (
      SELECT claim_no,
             sum(decode(nvl(paid_b,'N'),'Y',
                    decode(nvl(recovery_b,'N'),'Y',0,trans_amt),0)) paid_amt,
             sum(decode(nvl(reserve_b,'N'),'Y',trans_amt,0)) res_amt,
             sum(decode(nvl(recovery_b,'N'),'Y',trans_amt,0)) recv_amt
             
        FROM cm_transaction@oltp             t,
             cm_transaction_type_code@oltp   tt,
             cm_transaction_status_code@oltp tsc,
             claim@oltp c
       WHERE t.cm_transaction_type_code = tt.cm_transaction_type_code(+)
         AND t.trans_status_code        = tsc.cm_transaction_status_code(+)
         AND tsc.include_in_reports_b   = 'Y'
         and nvl(tt.deductible_b,'N')   = 'N'
         AND instr(',' || ',INDEMNITY,EXPENSE,' || ',', ',' || tt.cm_cost_type_code|| ',') > 0
         AND t.source_record_fk = claim_pk
         group by claim_no
    union 
    select claim_no,
                 0,
                 0,
                 0
     from claim@oltp c
     )
group by claim_no),
dw_amts as (select /*+ INDEX(fc in_fc_clm_month_id ) */ clm_claimnumber claim_no,
               sum(fc.loss_rsrv_chng_amt_itd) + sum(fc.alc_exp_rsrv_chng_amt_itd) res_amt,
               sum(fc.loss_pd_amt_itd)        + sum(fc.alc_exp_pd_amt_itd) paid_amt,
               sum(fc.loss_recovery_amt_itd)  + sum(fc.alc_exp_recovery_amt_itd) recv_amt
          from dim_claim dc,
               fact_claim fc
         where 1 = 1
           and fc.month_id = (SELECT /*+ INDEX(fact_claim in_fc_clm_month_id ) */ max(month_id) 
                                from fact_claim)
           and fc.claim_id = dc.claim_id
           group by clm_claimnumber)
         
select 'DW and OLTP Amount Mismatch, clm_no = '||oltp.claim_no||
       ', dw res_amt = '||dw.res_amt||
       ', oltp res_amt = '||oltp.res_amt||
       ', dw pd_amt = '||dw.paid_amt||
       ', oltp pd_amt = '||oltp.paid_amt||
       ', dw rec_amt = '||dw.recv_amt||
       ', oltp rec_amt = '||oltp.recv_amt error_msg,
       'Error' message_level
  from oltp_amts oltp,
       dw_amts dw
where oltp.claim_no = dw.claim_no
  and (oltp.res_amt  &lt;&gt; dw.res_amt   or
       oltp.paid_amt &lt;&gt; dw.paid_amt  or
       oltp.recv_amt &lt;&gt; dw.recv_amt)
union
select 'Summary: Total of OLTP and DW matches = '||to_char(count(*),'99,999,999') ,
       'Information'
  from oltp_amts oltp,
       dw_amts dw     
where oltp.claim_no = dw.claim_no
  and oltp.res_amt  = dw.res_amt 
  and oltp.paid_amt = dw.paid_amt
  and oltp.recv_amt = dw.recv_amt
union
select 'Data found in OLTP but not in DW, Claim_no = '||oltp.claim_no,
       'Error'
  from oltp_amts oltp
 where not exists(select 'x'
                    from dw_amts dw
                   where dw.claim_no = oltp.claim_no)
union
select 'Data found in DW but not in OLTP, Claim_no = '||dw.claim_no,
       'Error'
  from dw_amts dw
 where not exists(select 'x'
                    from oltp_amts oltp
                   where dw.claim_no = oltp.claim_no)                   

 );
commit;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_DataWarehouse</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>465</xloc>
      <yloc>15</yloc>
    </entry>
    <entry>
      <name>Policy Number Validation</name>
      <description/>
      <type>SQL</type>
      <sql>INSERT
  INTO dw_etl_audit
WITH max_id AS
     (select nvl(max(dw_etl_audit_pk),0)  max_audit_pk
      from   dw_etl_audit e)
SELECT max_audit_pk + rownum,
       error_msg,
       ${sql_loadDate},
       '${Internal.Job.Name}',
       'Policy Number Validation',
       'Policy',
       message_level
FROM max_id,
     (
      WITH o AS (
                  SELECT p.policy_no||'^'||pth.policy_term_history_pk POL_UNIQUEID
                  FROM   Policy@OLTP p,
                         Policy_Term_History@OLTP pth
                  WHERE  p.policy_cycle_code = 'POLICY'
                  AND    pth.policy_fk = p.policy_pk
                  AND    pth.record_mode_code = 'OFFICIAL'
                  AND    pth.base_record_b = 'Y'
                  UNION ALL
                  SELECT cp.policy_no||'^PYN'||to_char(cp.policy_start_date,'YY')||'^'||cp.cm_policy_pk
                  FROM   Cm_Policy@OLTP cp), 
           d AS (
                  SELECT DISTINCT P.POL_UNIQUEID POL_UNIQUEID
                  FROM   DIM_POLICY P
                  WHERE  p.pol_policynumber &lt;&gt; 'Unknown'
                  AND    SOURCE_SYSTEM = 'OASIS')
      SELECT 'Summary: Total Policy terms in Both OLTP and DW = '||to_char(COUNT(*),'99,999,999') error_msg,
             'Information' message_level
      FROM   o, d
      WHERE  o.POL_UNIQUEID = d.POL_UNIQUEID                        
      UNION ALL
      SELECT 'Policy term Found in OLTP but not in DW, Policy No = '||o.POL_UNIQUEID error_msg,
             'Error' message_level
      FROM   o
      WHERE  NOT EXISTS 
             (SELECT 1
              FROM   d
              WHERE  d.POL_UNIQUEID = o.POL_UNIQUEID)    
      UNION ALL
      SELECT 'Policy term Found in DW but not in OLTP, Policy No = '||d.POL_UNIQUEID error_msg,
             'Information' message_level
      FROM   d
      WHERE  NOT EXISTS 
             (SELECT 1
              FROM   o
              WHERE  d.POL_UNIQUEID = o.POL_UNIQUEID)
     );
commit;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_DataWarehouse</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>559</xloc>
      <yloc>114</yloc>
    </entry>
    <entry>
      <name>Policy Transaction Validation</name>
      <description/>
      <type>SQL</type>
      <sql>INSERT
  INTO dw_etl_audit
WITH max_id AS
     (select nvl(max(dw_etl_audit_pk),0)  max_audit_pk
      from   dw_etl_audit e)
SELECT max_audit_pk + rownum,
       error_msg,
       ${sql_loadDate},
       '${Internal.Job.Name}',
       'Policy Transaction Validation',
       'Policy',
       message_level
FROM max_id, 
     (
     SELECT *
     FROM (
     SELECT 'Summary: Total Policy Trans On Both OLTP and DW = ' ||
            to_char(COUNT(*), 'FM99,999,999') error_msg,
            NULL trans_pk,
            NULL policy_no,
            'Information' message_level
     FROM   dw_tmp_val_pmtrans o, dw_tmp_val_pmtrans1 d
     WHERE  o.policy_no = d.policy_no
     AND    o.transaction_log_pk = d.transaction_log_pk)
     UNION ALL
     SELECT 'Policy Trans Found in OLTP but not in DW. Trans Log PK ' ||
            o.transaction_log_pk error_msg,
            o.transaction_log_pk trans_pk,
            o.policy_no policy_no,
            'Error' message_level
     FROM   dw_tmp_val_pmtrans o
     WHERE  NOT EXISTS
            (SELECT 1
             FROM   dw_tmp_val_pmtrans1 d
             WHERE  d.transaction_log_pk = o.transaction_log_pk)
     UNION ALL
     SELECT 'Policy Trans Found in DW but not in OLTP. Trans Log PK ' ||
            d.transaction_log_pk error_msg,
            d.transaction_log_pk trans_pk,
            d.policy_no policy_no,
            'Information' message_level
     FROM   dw_tmp_val_pmtrans1 d
     WHERE  NOT EXISTS
            (SELECT 1
             FROM   dw_tmp_val_pmtrans o
             WHERE  d.transaction_log_pk = o.transaction_log_pk)
     );
commit;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_DataWarehouse</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>984</xloc>
      <yloc>114</yloc>
    </entry>
    <entry>
      <name>Policy Term Premium Validation</name>
      <description/>
      <type>SQL</type>
      <sql>INSERT
  INTO dw_etl_audit
WITH max_id AS (
     SELECT NVL(MAX(dw_etl_audit_pk),0)  max_audit_pk
     FROM   dw_etl_audit e)
SELECT max_audit_pk + rownum,
       error_msg,
       ${sql_loadDate},
       '${Internal.Job.Name}',
       'Policy Term Premium Validation',
       'Policy',
       message_level
FROM   max_id,
      (
       WITH o AS (
            SELECT t.pol_uniqueid     Pol_UniqueID,
                   t.Policy_No,
                   t.written_prem     Written_Prem
            FROM   dw_tmp_val_pmterm t),
            d AS (
            SELECT t1.Pol_UniqueID,
                   t1.policy_no,
                   t1.written_prem
            FROM   dw_tmp_val_pmterm1 t1)
       SELECT *
       FROM  (SELECT 'Summary: Total Policy Premium Match Between ' ||
                     'Both OLTP and DW = '                          ||
                     To_Char(COUNT(*), 'FM99,999,999')                 Error_Msg,
                     NULL                                              Policy_No,
                     NULL                                              Pol_UniqueID,
                     NULL                                              OLTP_Writ_Prem,
                     NULL                                              DW_Writ_Prem,
                     'Information'                                     Message_Level
              FROM   o,
                     d
              WHERE  o.Pol_UniqueID = d.Pol_UniqueID
              AND    o.Written_Prem = d.Written_Prem)
       UNION ALL
       SELECT 'Policy Premium Found in OLTP but not in DW.' || o.Pol_UniqueID  Error_Msg,
              o.Policy_No,
              o.Pol_UniqueID                                           Pol_UniqueID,
              o.Written_Prem                                           OLTP_Writ_Prem,
              NULL                                                     DW_Writ_Prem,
              'Error'                                                  Message_Level
       FROM   o
       WHERE  NOT EXISTS (SELECT 1
                          FROM   d
                          WHERE  d.Pol_UniqueID = o.Pol_UniqueID)
       UNION ALL
       SELECT 'Policy Premium Found in DW but not in OLTP. ' || d.Pol_UniqueID Error_Msg,
              d.Policy_No,
              d.Pol_UniqueID                                           Pol_UniqueID,
              NULL                                                     OLTP_Writ_Prem,
              d.Written_Prem                                           DW_Writ_Prem,
              'Information'                                                  Message_Level
       FROM   d
       WHERE  d.Written_Prem &lt;&gt; 0
       AND    NOT EXISTS (SELECT 1
                          FROM   o
                          WHERE d.Pol_UniqueID = o.Pol_UniqueID)
       UNION ALL
       SELECT 'Policy Premium does not match between DW and OLTP. ' || o.Pol_UniqueID Error_Msg,
              NVL(o.Policy_No, d.Policy_No)                           Policy_No,
              d.Pol_UniqueID                                          Pol_UniqueID,
              o.Written_Prem                                          OLTP_Writ_Prem,
              d.Written_Prem                                          DW_Writ_Prem,
              'Error'                                                 Message_Level
       FROM   d,
              o
       WHERE  d.Pol_UniqueID  = o.Pol_UniqueID
       AND    d.Written_Prem &lt;&gt; o.Written_Prem);
commit;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_DataWarehouse</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>984</xloc>
      <yloc>253</yloc>
    </entry>
    <entry>
      <name>Policy MTD &amp; ITD Premium Validation</name>
      <description/>
      <type>SQL</type>
      <sql>INSERT
  INTO dw_etl_audit
WITH max_id AS
     (select nvl(max(dw_etl_audit_pk),0)  max_audit_pk
      from   dw_etl_audit e)
SELECT max_audit_pk + rownum,
       error_msg,
       ${sql_loadDate},
       '${Internal.Job.Name}',
       'Policy MTD Premium Validation',
       'Policy',
       message_level
FROM  max_id,
     (
      WITH m AS ( SELECT dm.mon_enddate
                  FROM   dim_month dm
                  WHERE  dm.month_id = 
                         (SELECT MAX(fp.month_id) max_month_id
                          FROM   fact_policycoverage fp)),                 
           o AS ( SELECT dp.pol_uniqueid, SUM(fpt.amount) written_prem
                  FROM   Fact_Policytransaction fpt, 
                         Dim_Policy dp,
                         Vdim_Policytransactiontype vpt,
                         Vdim_Accountingdate va,
                         Vdim_Effectivedate  ve, 
                         Dim_Coverage        dc,
                         m
                  WHERE  fpt.policy_id = dp.policy_id
                  AND    fpt.accountingdate_id = va.ACCOUNTINGDATE_ID
                  AND    fpt.effectivedate_id = ve.EFFECTIVEDATE_ID
                  AND    fpt.transactiontype_id = vpt.POLICYTRANSACTIONTYPE_ID
                  AND    fpt.coverage_id = dc.coverage_id
                  AND    GREATEST(va.ACCT_DATE, ve.EFF_DATE) &lt;= m.mon_enddate
                  AND    fpt.earningstype = 'N'
                  AND    fpt.include_in_summary_b = 'Y'
                  AND    dp.pol_uniqueid NOT LIKE '%^0'
                  AND    dp.pol_uniqueid NOT LIKE '%^PYN%'
                  AND    dp.pol_uniqueid &lt;&gt; 'Unknown'   
                  AND    vpt.PTRANS_CODE NOT LIKE 'USD%' 
                  AND    vpt.PTRANS_CODE NOT LIKE 'TX%'       
                  AND    dc.cov_type NOT IN ('CAPITAL','PLIGA','PCF')   
                  AND    fpt.prem_type = 'REGPREM'
                  AND    fpt.source_system = 'OASIS'
                  GROUP  BY dp.pol_uniqueid
                  ),            
           d AS (
                  SELECT dp.pol_uniqueid, SUM(fpc.wrtn_prem_amt) written_prem
                  FROM   Fact_Policycoverage fpc, 
                         Dim_Policy dp
                  WHERE  fpc.policy_id = dp.policy_id
                  AND    dp.pol_uniqueid NOT LIKE '%^0'
                  AND    dp.pol_uniqueid NOT LIKE '%^PYN%'
                  AND    dp.pol_uniqueid &lt;&gt; 'Unknown'     
                  AND    fpc.source_system = 'OASIS'             
                  GROUP  BY dp.pol_uniqueid
                  )
      SELECT 'Summary: Total Policy Premium Match Between FPT and FPC MTD = '||to_char(COUNT(*),'99,999,999') error_msg,
             'Information' message_level
      FROM   o, d
      WHERE  o.pol_uniqueid = d.pol_uniqueid
      AND    o.written_prem = d.written_prem                    
      UNION ALL
      SELECT 'Policy Premium Found in FPT but not in FPC, Policy Uniqueid = '||o.pol_uniqueid error_msg,
             'Error' message_level
      FROM   o
      WHERE  NOT EXISTS 
             (SELECT 1
              FROM   d
              WHERE  d.pol_uniqueid = o.pol_uniqueid)    
      UNION ALL
      SELECT 'Policy Premium Found in FPC but not in FPT, Policy Uniqueid = '||d.pol_uniqueid error_msg,
             'Error' message_level
      FROM   d
      WHERE  NOT EXISTS 
             (SELECT 1
              FROM   o
              WHERE  d.pol_uniqueid = o.pol_uniqueid)
      UNION ALL
      SELECT 'Policy Premium does not match between FPT and FPC MTD, Policy Uniqueid = '||d.pol_uniqueid error_msg,
             'Error' message_level
      FROM   d, o
      WHERE  d.pol_uniqueid = o.pol_uniqueid
      AND    d.written_prem &lt;&gt; o.written_prem
     );
commit;

INSERT
  INTO dw_etl_audit
WITH max_id AS
     (select nvl(max(dw_etl_audit_pk),0)  max_audit_pk
      from   dw_etl_audit e)
SELECT max_audit_pk + rownum,
       error_msg,
       ${sql_loadDate},
       '${Internal.Job.Name}',
       'Policy ITD Premium Validation',
       'Policy',
       message_level
FROM max_id,
     (
      SELECT
       'Summary: Total Policy Premium Match Between ' ||
       'Both MTD and ITD = '                      ||
         To_Char(COUNT(*), 'FM99,999,999')          || '.'      Error_Msg,
       ''                                                         Policy_UniqueID,
       NULL                                                       OLTP_Writ_Prem,
       NULL                                                       DW_Writ_Prem,
       'Information'                                              Message_Level
    FROM  dw_tmp_val_pol_mtd o,
          dw_tmp_val_pol_itd d
    WHERE  o.Pol_UniqueID = d.Pol_UniqueID
       AND o.Written_Prem = d.Written_Prem
    UNION ALL
    SELECT
       'Policy Premium Found in MTD but not in ITD. ' || o.Pol_UniqueID Error_Msg,
       o.Pol_UniqueID                                             Policy_UniqueID,
       o.Written_Prem                                             OLTP_Writ_Prem,
       NULL                                                       DW_Writ_Prem,                  
       'Error'                                                    Message_Level
    FROM  dw_tmp_val_pol_mtd o
    WHERE  NOT EXISTS (SELECT 1 FROM dw_tmp_val_pol_itd d
               WHERE  d.Pol_UniqueID = o.Pol_UniqueID)
    UNION ALL
    SELECT
       'Policy Premium Found in ITD but not in MTD. ' || d.Pol_UniqueID Error_Msg,
       d.Pol_UniqueID                                             Policy_UniqueID,          
       NULL                                                       OLTP_Writ_Prem,                  
       d.Written_Prem                                             DW_Writ_Prem,
       'Error'                                                    Message_Level
    FROM  dw_tmp_val_pol_itd d
    WHERE  NOT EXISTS (SELECT 1 FROM dw_tmp_val_pol_mtd o
               WHERE  d.Pol_UniqueID = o.Pol_UniqueID)
    UNION ALL
    SELECT
       'Policy Premium does not match between ITD and MTD.' || d.Pol_UniqueID Error_Msg,
       d.Pol_UniqueID                                             Policy_UniqueID,
       o.Written_Prem                                             OLTP_Writ_Prem,                  
       d.Written_Prem                                             DW_Writ_Prem,
       'Error'                                                    Message_Level
    FROM  dw_tmp_val_pol_itd d, dw_tmp_val_pol_mtd o
    WHERE  d.Pol_UniqueID  = o.Pol_UniqueID
       AND d.Written_Prem &lt;&gt; o.Written_Prem
     );
</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_DataWarehouse</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>849</xloc>
      <yloc>181</yloc>
    </entry>
    <entry>
      <name>Execute Account Number &amp; Balance Validation SQL</name>
      <description/>
      <type>SQL</type>
      <sql>INSERT
  INTO dw_etl_audit
WITH max_id AS
     (select nvl(max(dw_etl_audit_pk),0)  max_audit_pk
      from   dw_etl_audit e)
SELECT max_audit_pk + rownum,
       error_msg,
       ${sql_loadDate},
       '${Internal.Job.Name}',
       'Account Number Validation',
       'Financial',
       message_level
FROM max_id,
     (
      WITH o AS (
                  SELECT ba.account_no
                  FROM   Billing_Account@OLTP ba), 
           d AS (
                  SELECT DISTINCT da.acct_number account_no
                  FROM   Dim_Account da
                  WHERE  da.acct_number &lt;&gt; '000000000'
                  )
      SELECT 'Summary: Total Account No exist in Both OLTP and DW = '||to_char(COUNT(*),'99,999,999') error_msg,
             'Information' message_level
      FROM   o, d
      WHERE  o.account_no = d.account_no                  
      UNION ALL
      SELECT 'Account Found in OLTP but not in DW, Account No = '||o.account_no error_msg,
             'Error' message_level
      FROM   o
      WHERE  NOT EXISTS 
             (SELECT 1
              FROM   d
              WHERE  d.account_no = o.account_no)    
      UNION ALL
      SELECT 'Account Found in DW but not in OLTP, Account No = '||d.account_no error_msg,
             'Error' message_level
      FROM   d
      WHERE  NOT EXISTS 
             (SELECT 1
              FROM   o
              WHERE  d.account_no = o.account_no)
     );
commit;

INSERT
  INTO dw_etl_audit
WITH max_id AS
     (select nvl(max(dw_etl_audit_pk),0)  max_audit_pk
      from   dw_etl_audit e)
SELECT max_audit_pk + rownum,
       error_msg,
       ${sql_loadDate},
       '${Internal.Job.Name}',
       'Account Balance Validation',
       'Financial',
       message_level
FROM max_id,
     (
      WITH o AS (
                  SELECT ba.account_no, SUM(amount) balance
                  FROM   FM_Master@oltp         m, 
                         Billing_Account@oltp   ba
                  WHERE  NVL(ba.accounting_mode, 'BAL_FWD') = 'BAL_FWD'
                  AND    ba.billing_account_pk = m.billing_account_fk
                  GROUP  BY ba.account_no 
                  UNION ALL
                  SELECT ba.account_no, SUM(i.open_balance) balance
                  FROM   FM_Open_Item@oltp      i, 
                         Billing_Account@oltp   ba
                  WHERE  NVL(ba.accounting_mode, 'BAL_FWD') = 'OPEN_ITEM'
                  AND    ba.billing_account_pk = i.billing_account_fk
                  GROUP  BY ba.account_no), 
           d AS (
                  SELECT da.acct_number account_no,
                         sum(fft.amount) balance
                  FROM   dim_account da,
                         fact_financialtransaction fft,
                         dim_subaccount dsa
                  WHERE  da.account_id = fft.account1_id
                  AND    fft.subaccount_id = dsa.subaccount_id
                  AND    dsa.subacct_type &lt;&gt; 'AGENTCOMM'   
                  GROUP  BY da.acct_number
                  )
      SELECT 'Summary: Total Accounts that balance match between OLTP and DW = '||to_char(COUNT(*),'99,999,999') error_msg,
             'Information' message_level
      FROM   o, d
      WHERE  o.account_no = d.account_no  
      AND    o.balance    = d.balance                
      UNION ALL
      SELECT 'Account Found in OLTP but not in DW, Account No = '||o.account_no error_msg,
             'Error' message_level
      FROM   o
      WHERE  NOT EXISTS 
             (SELECT 1
              FROM   d
              WHERE  d.account_no = o.account_no)    
      UNION ALL
      SELECT 'Account Found in DW but not in OLTP, Account No = '||d.account_no error_msg,
             'Error' message_level
      FROM   d
      WHERE  NOT EXISTS 
             (SELECT 1
              FROM   o
              WHERE  d.account_no = o.account_no)
      UNION ALL
      SELECT 'Account Balance does not match between DW and OLTP, Account No = '||d.account_no error_msg,
             'Error' message_level
      FROM   d, o
      WHERE  d.account_no = o.account_no
      AND    d.balance   &lt;&gt; o.balance
     );
commit;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_DataWarehouse</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>713</xloc>
      <yloc>253</yloc>
    </entry>
    <entry>
      <name>Financial Summary Balance Validation</name>
      <description/>
      <type>SQL</type>
      <sql>INSERT
  INTO dw_etl_audit
WITH max_id AS
     (select nvl(max(dw_etl_audit_pk),0)  max_audit_pk
      from   dw_etl_audit e)
SELECT max_audit_pk + rownum,
       error_msg,
       ${sql_loadDate},
       '${Internal.Job.Name}',
       'Financial Summary Balance Validation',
       'Financial',
       message_level
FROM max_id,
     (
      WITH m AS (SELECT dm.month_id max_month_id, 
                         to_number(to_char(dm.mon_enddate,'yyyymmdd')) mon_enddate
                  FROM   dim_month dm 
                  WHERE  dm.month_id = (SELECT MAX(fs.month_id)
                                        FROM   Fact_Financialsummary fs)),
           o AS (
                  SELECT a.acct_number account_no, 
                         SUM(ft.amount) balance
                  FROM   Fact_Financialtransaction ft, 
                         Dim_Account a,                           
                         Dim_Subaccount vsa,
                         Dim_Financialtransactiontype dft,
                         m
                  WHERE  ft.account1_id = a.account_id
                  AND    ft.subaccount_id = vsa.subaccount_id
                  AND    ft.financialtransactiontype_id = dft.financialtransactiontype_id
                  AND    ft.accountingdate_id &lt;= m.mon_enddate
                  AND    vsa.subacct_code &lt;&gt; 'AGENTCOMM'    
                  AND    dft.ftrans_code &lt;&gt; 'BILL'
                  GROUP  BY a.acct_number), 
           d AS (
                  SELECT a.acct_number account_no, 
                         SUM(fs.tot_rcvbl_amt_itd) balance
                  FROM   Fact_Financialsummary fs, 
                         Dim_Account a,                           
                         Dim_Subaccount vsa,
                         m
                  WHERE  fs.account1_id = a.account_id
                  AND    fs.subaccount_id = vsa.subaccount_id
                  AND    fs.month_id = m.max_month_id
                  AND    vsa.subacct_code &lt;&gt; 'AGENTCOMM'    
                  GROUP  BY a.acct_number
                  )
      SELECT 'Summary: Total Accounts that balance match between Fact_Financialtransaction and Summary ITD numbers = '||to_char(COUNT(*),'99,999,999') error_msg,
             'Information' message_level
      FROM   o, d
      WHERE  o.account_no = d.account_no  
      AND    o.balance    = d.balance                
      UNION ALL
      SELECT 'Account Found in Fact_Financialtransaction but not in Fact_Financialsummary, Account No = '||o.account_no error_msg,
             'Error' message_level
      FROM   o
      WHERE  NOT EXISTS 
             (SELECT 1
              FROM   d
              WHERE  d.account_no = o.account_no)    
      UNION ALL
      SELECT 'Account Found in Fact_Financialsummary but not in Fact_Financialtransaction, Account No = '||d.account_no error_msg,
             'Error' message_level
      FROM   d
      WHERE  NOT EXISTS 
             (SELECT 1
              FROM   o
              WHERE  d.account_no = o.account_no)
      UNION ALL
      SELECT 'Account balance does not match between Fact_Financialtransaction and Summary ITD numbers, Account No = '||d.account_no error_msg,
             'Error' message_level
      FROM   d, o
      WHERE  d.account_no = o.account_no
      AND    d.balance   &lt;&gt; o.balance
     );
commit;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_DataWarehouse</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>558</xloc>
      <yloc>181</yloc>
    </entry>
    <entry>
      <name>Financialsummary MTD vs ITD Validation</name>
      <description/>
      <type>SQL</type>
      <sql>INSERT
  INTO dw_etl_audit
WITH max_id AS
     (select nvl(max(dw_etl_audit_pk),0)  max_audit_pk
      from   dw_etl_audit e)
SELECT max_audit_pk + rownum,
       error_msg,
       ${sql_loadDate},
       '${Internal.Job.Name}',
       'Financialsummary MTD vs ITD Validation',
       'Financial',
       message_level
FROM max_id,
     (
      WITH m AS (
                  SELECT MAX(month_id) max_month_id, 
                         MIN(month_id) min_month_id
                  FROM   fact_financialsummary), 
           o AS (
                  SELECT a.acct_number account_no, 
                         SUM(fs.tot_rcvbl_amt_itd) balance
                  FROM   Fact_Financialsummary fs, 
                         Dim_Account a,                           
                         Dim_Subaccount vsa,
                         m
                  WHERE  fs.account1_id = a.account_id
                  AND    fs.subaccount_id = vsa.subaccount_id
                  AND    vsa.subacct_code &lt;&gt; 'AGENTCOMM'  
                  AND    fs.month_id = m.max_month_id  
                  GROUP  BY a.acct_number), 
           d AS (
                  SELECT a.acct_number account_no, 
                         SUM(decode(fs.month_id, m.min_month_id, 
                                    fs.tot_rcvbl_amt_itd, fs.tot_rcvbl_amt)) balance
                  FROM   Fact_Financialsummary fs, 
                         Dim_Account a,                           
                         Dim_Subaccount vsa, 
                         m
                  WHERE  fs.account1_id = a.account_id
                  AND    fs.subaccount_id = vsa.subaccount_id
                  AND    vsa.subacct_code &lt;&gt; 'AGENTCOMM'    
                  GROUP  BY a.acct_number
                  )
      SELECT 'Summary: Total Accounts that balance match between MTD and ITD numbers = '||to_char(COUNT(*),'99,999,999') error_msg,
             'Information' message_level
      FROM   o, d
      WHERE  o.account_no = d.account_no  
      AND    o.balance    = d.balance                      
      UNION ALL
      SELECT 'Account balance does not match between MTD and ITD numbers, Account No = '||d.account_no error_msg,
             'Error' message_level
      FROM   d, o
      WHERE  d.account_no = o.account_no
      AND    d.balance   &lt;&gt; o.balance
     );
commit;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_DataWarehouse</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>417</xloc>
      <yloc>253</yloc>
    </entry>
    <entry>
      <name>TR_Validation_Error_Check</name>
      <description/>
      <type>TRANS</type>
      <specification_method>rep_name</specification_method>
      <trans_object_id/>
      <filename/>
      <transname>TR_Validation_Error_Check</transname>
      <directory>/public/ETL/Validations/Transformations</directory>
      <arg_from_previous>N</arg_from_previous>
      <params_from_previous>N</params_from_previous>
      <exec_per_row>N</exec_per_row>
      <clear_rows>N</clear_rows>
      <clear_files>N</clear_files>
      <set_logfile>N</set_logfile>
      <logfile/>
      <logext/>
      <add_date>N</add_date>
      <add_time>N</add_time>
      <loglevel>Basic</loglevel>
      <cluster>N</cluster>
      <slave_server_name/>
      <set_append_logfile>N</set_append_logfile>
      <wait_until_finished>Y</wait_until_finished>
      <follow_abort_remote>N</follow_abort_remote>
      <create_parent_folder>N</create_parent_folder>
      <logging_remote_work>N</logging_remote_work>
      <run_configuration/>
      <parameters>
        <pass_all_parameters>Y</pass_all_parameters>
      </parameters>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>155</xloc>
      <yloc>344</yloc>
    </entry>
    <entry>
      <name>Fact_Claim_OSR Validation</name>
      <description/>
      <type>SQL</type>
      <sql>INSERT
  INTO dw_etl_audit
WITH max_id AS
     (select nvl(max(dw_etl_audit_pk),0)  max_audit_pk
      from   dw_etl_audit e)
SELECT max_audit_pk + rownum,
       error_msg,
       ${sql_loadDate},
       '${Internal.Job.Name}',
       'Fact_Claim_OSR Validation',
       'Claim',
       message_level
FROM max_id,
     (
      WITH m AS 
              (SELECT MAX(month_id) max_mon 
               FROM   fact_claim),
           a AS -- Data from Fact_Claim
              (SELECT  fc.month_id,
                      dc.clm_claimnumber,
                      SUM(fc.loss_pd_amt) loss_pd_mtd,
                      SUM(fc.loss_pd_amt_ytd) loss_pd_ytd,
                      SUM(fc.loss_pd_amt_itd) loss_pd_itd,
                      SUM(fc.loss_recovery_amt) loss_recovery_mtd,
                      SUM(fc.loss_recovery_amt_ytd) loss_recovery_ytd,
                      SUM(fc.loss_recovery_amt_itd) loss_recovery_itd,
                      SUM(fc.loss_rsrv_chng_amt) loss_reserve_mtd,
                      SUM(fc.loss_rsrv_chng_amt_ytd) loss_reserve_ytd,
                      SUM(fc.loss_rsrv_chng_amt_itd) loss_reserve_itd,
                      SUM(fc.alc_exp_pd_amt) exp_pd_mtd,
                      SUM(fc.alc_exp_pd_amt_ytd) exp_pd_ytd,
                      SUM(fc.alc_exp_pd_amt_itd) exp_pd_itd,
                      SUM(fc.alc_exp_recovery_amt) exp_recovery_mtd,
                      SUM(fc.alc_exp_recovery_amt_ytd) exp_recovery_ytd,
                      SUM(fc.alc_exp_recovery_amt_itd) exp_recovery_itd,
                      SUM(fc.alc_exp_rsrv_chng_amt) exp_reserve_mtd,
                      SUM(fc.alc_exp_rsrv_chng_amt_ytd) exp_reserve_ytd,
                      SUM(fc.alc_exp_rsrv_chng_amt_itd) exp_reserve_itd
               FROM   fact_claim fc,
                      dim_claim  dc,
                      m
               WHERE  fc.claim_id = dc.claim_id
               AND    fc.month_id = m.max_mon
               GROUP  BY fc.month_id, dc.clm_claimnumber), 
          b AS -- Data from Fact_Claim_OSR
             (SELECT  fc.month_id,
                      dc.clm_claimnumber,
                      SUM(fc.loss_pd_amt) loss_pd_mtd,
                      SUM(fc.loss_pd_amt_ytd) loss_pd_ytd,
                      SUM(fc.loss_pd_amt_itd) loss_pd_itd,
                      SUM(fc.loss_recovery_amt) loss_recovery_mtd,
                      SUM(fc.loss_recovery_amt_ytd) loss_recovery_ytd,
                      SUM(fc.loss_recovery_amt_itd) loss_recovery_itd,
                      SUM(fc.loss_rsrv_chng_amt) loss_reserve_mtd,
                      SUM(fc.loss_rsrv_chng_amt_ytd) loss_reserve_ytd,
                      SUM(fc.loss_rsrv_chng_amt_itd) loss_reserve_itd,
                      SUM(fc.exp_pd_amt) exp_pd_mtd,
                      SUM(fc.exp_pd_amt_ytd) exp_pd_ytd,
                      SUM(fc.exp_pd_amt_itd) exp_pd_itd,
                      SUM(fc.exp_recovery_amt) exp_recovery_mtd,
                      SUM(fc.exp_recovery_amt_ytd) exp_recovery_ytd,
                      SUM(fc.exp_recovery_amt_itd) exp_recovery_itd,
                      SUM(fc.exp_rsrv_chng_amt) exp_reserve_mtd,
                      SUM(fc.exp_rsrv_chng_amt_ytd) exp_reserve_ytd,
                      SUM(fc.exp_rsrv_chng_amt_itd) exp_reserve_itd
               FROM   fact_claim_osr fc,
                      dim_claim  dc,
                      m
               WHERE  fc.claim_id = dc.claim_id
               AND    fc.month_id = m.max_mon
               GROUP  BY fc.month_id, dc.clm_claimnumber)                 
      SELECT 'MTD, YTD or ITD amount does not match between FACT_CLAIM and FACT_CLAIM_OSR, Claim No = '||a.clm_claimnumber error_msg,
             'Error' message_level
      FROM   a, b
      WHERE  a.clm_claimnumber = b.clm_claimnumber
      AND    (a.exp_reserve_mtd &lt;&gt; b.exp_reserve_mtd OR
              a.exp_reserve_ytd &lt;&gt; b.exp_reserve_ytd OR
              a.exp_reserve_itd &lt;&gt; b.exp_reserve_itd OR
              a.exp_recovery_mtd &lt;&gt; b.exp_recovery_mtd OR 
              a.exp_recovery_ytd &lt;&gt; b.exp_recovery_ytd OR
              a.exp_recovery_itd &lt;&gt; b.exp_recovery_itd OR
              a.exp_pd_mtd &lt;&gt; b.exp_pd_mtd OR
              a.exp_pd_ytd &lt;&gt; b.exp_pd_ytd OR
              a.exp_pd_itd &lt;&gt; b.exp_pd_itd OR
              a.loss_reserve_mtd &lt;&gt; b.loss_reserve_mtd OR
              a.loss_reserve_ytd &lt;&gt; b.loss_reserve_ytd OR
              a.loss_reserve_itd &lt;&gt; b.loss_reserve_itd OR
              a.loss_recovery_mtd &lt;&gt; b.loss_recovery_mtd OR
              a.loss_recovery_ytd &lt;&gt; b.loss_recovery_ytd OR
              a.loss_recovery_itd &lt;&gt; b.loss_recovery_itd OR
              a.loss_pd_mtd &lt;&gt; b.loss_pd_mtd OR
              a.loss_pd_ytd &lt;&gt; b.loss_pd_ytd OR
              a.loss_pd_itd &lt;&gt; b.loss_pd_itd)
      UNION ALL
      -- Claim in Fact_Claim, but not in Fact_Claim_OSR
      SELECT 'Claim record in FACT_CLAIM but not in FACT_CLAIM_OSR, Claim No = '||a.clm_claimnumber error_msg,
             'Error' message_level
      FROM   a
      WHERE  NOT EXISTS 
             (SELECT 1
              FROM   b
              WHERE  a.clm_claimnumber = b.clm_claimnumber)
      UNION ALL
      -- Claim in Fact_Claim_OSR, but not in Fact_Claim
      SELECT 'Claim record in FACT_CLAIM_OSR but not in FACT_CLAIM, Claim No = '||b.clm_claimnumber error_msg,
             'Error' message_level
      FROM   b
      WHERE  NOT EXISTS 
             (SELECT 1
              FROM   a
              WHERE  a.clm_claimnumber = b.clm_claimnumber)
      UNION ALL
      -- Claim matches between Fact_Claim_OSR and Fact_Claim
      SELECT 'Claim records match between FACT_CLAIM_OSR and FACT_CLAIM, Total Count = '|| COUNT(1) error_msg,
             'Information' message_level
      FROM   a, b
      WHERE  a.clm_claimnumber = b.clm_claimnumber
      AND    a.exp_reserve_mtd = b.exp_reserve_mtd 
      AND    a.exp_reserve_ytd = b.exp_reserve_ytd 
      AND    a.exp_reserve_itd = b.exp_reserve_itd 
      AND    a.exp_recovery_mtd = b.exp_recovery_mtd 
      AND    a.exp_recovery_ytd = b.exp_recovery_ytd 
      AND    a.exp_recovery_itd = b.exp_recovery_itd 
      AND    a.exp_pd_mtd = b.exp_pd_mtd 
      AND    a.exp_pd_ytd = b.exp_pd_ytd 
      AND    a.exp_pd_itd = b.exp_pd_itd 
      AND    a.loss_reserve_mtd = b.loss_reserve_mtd 
      AND    a.loss_reserve_ytd = b.loss_reserve_ytd 
      AND    a.loss_reserve_itd = b.loss_reserve_itd 
      AND    a.loss_recovery_mtd = b.loss_recovery_mtd 
      AND    a.loss_recovery_ytd = b.loss_recovery_ytd 
      AND    a.loss_recovery_itd = b.loss_recovery_itd 
      AND    a.loss_pd_mtd = b.loss_pd_mtd 
      AND    a.loss_pd_ytd = b.loss_pd_ytd 
      AND    a.loss_pd_itd = b.loss_pd_itd
     );
commit;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_DataWarehouse</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>300</xloc>
      <yloc>181</yloc>
    </entry>
    <entry>
      <name>TR_Drop_Tmp_Validation_Tables</name>
      <description/>
      <type>TRANS</type>
      <specification_method>rep_name</specification_method>
      <trans_object_id/>
      <filename/>
      <transname>TR_Drop_Tmp_Validation_Tables</transname>
      <directory>/public/ETL/Validations/Transformations</directory>
      <arg_from_previous>N</arg_from_previous>
      <params_from_previous>N</params_from_previous>
      <exec_per_row>N</exec_per_row>
      <clear_rows>N</clear_rows>
      <clear_files>N</clear_files>
      <set_logfile>N</set_logfile>
      <logfile/>
      <logext/>
      <add_date>N</add_date>
      <add_time>N</add_time>
      <loglevel>Basic</loglevel>
      <cluster>N</cluster>
      <slave_server_name/>
      <set_append_logfile>N</set_append_logfile>
      <wait_until_finished>Y</wait_until_finished>
      <follow_abort_remote>N</follow_abort_remote>
      <create_parent_folder>N</create_parent_folder>
      <logging_remote_work>N</logging_remote_work>
      <run_configuration/>
      <parameters>
        <pass_all_parameters>Y</pass_all_parameters>
      </parameters>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>678</xloc>
      <yloc>15</yloc>
    </entry>
    <entry>
      <name>Create DW_TMP_VAL Tables</name>
      <description/>
      <type>SQL</type>
      <sql>CREATE TABLE dw_tmp_val_pmtrans 
(
  policy_no          VARCHAR2(50),
  transaction_log_pk NUMBER(10) not null
) NOLOGGING PCTFREE 0;

CREATE TABLE dw_tmp_val_pmtrans1 NOLOGGING PCTFREE 0 AS
SELECT DISTINCT
       dp.Pol_PolicyNumber   Policy_No,
       fpt.Pt_Sequence       Transaction_Log_PK
FROM   Stg_PolicyTransaction fpt,
       Stg_Policy            dp
WHERE  fpt.Policy_UniqueID        = dp.Policy_UniqueID
AND    dp.Policy_UniqueID  NOT LIKE '%^0'
AND    dp.Policy_UniqueID  NOT LIKE '%^PYN%'
AND    fpt.pt_typesubcode NOT IN ('CHGADDRESS','CHGNAME','CHGDBA')
;


CREATE TABLE dw_tmp_val_pmterm
(
  pol_uniqueid VARCHAR2(100),
  policy_no    VARCHAR2(50),
  written_prem NUMBER
) NOLOGGING PCTFREE 0;

CREATE TABLE dw_tmp_val_pmterm1 NOLOGGING PCTFREE 0 AS
SELECT dp.Pol_UniqueID,
       dp.Pol_Policynumber  Policy_No,
       SUM(fpt.Amount)      Written_Prem
FROM   Fact_PolicyTransaction Fpt,
       Dim_Policy             Dp,
       Dim_Coverage           dc,
       Vdim_Policytransactiontype vpt
WHERE  fpt.Policy_ID             = dp.Policy_ID
AND    fpt.transactiontype_id    = vpt.policytransactiontype_id
AND    fpt.coverage_id = dc.coverage_id
AND    vpt.ptrans_code NOT IN ('FS','TX', 'USD1')
AND    fpt.EarningsType          = 'N'
AND    fpt.Include_In_Summary_b  = 'Y'
AND    dp.Pol_UniqueID    NOT LIKE '%^0'
AND    dp.Pol_UniqueID    NOT LIKE '%^PYN%'
AND    dp.Pol_UniqueID          &lt;&gt; 'Unknown'
AND    dc.cov_type NOT IN ('CAPITAL','PLIGA','PCF')
AND    fpt.prem_type = 'REGPREM'
AND    fpt.source_system = 'OASIS'
GROUP  BY dp.Pol_Policynumber,
       dp.Pol_UniqueID;

create table DW_TMP_VAL_POLPREM
(
  pol_uniqueid VARCHAR2(100),
  written_prem NUMBER
) NOLOGGING PCTFREE 0;


-- Create following TMP tables for Premium MTD vs ITD balancing.
CREATE TABLE dw_tmp_val_pol_mtd PCTFREE 0 NOLOGGING AS 
SELECT dp.pol_uniqueid, SUM(fpc.wrtn_prem_amt) written_prem
  FROM fact_policy fpc, dim_policy dp
 WHERE fpc.policy_id = dp.policy_id
   AND dp.pol_uniqueid NOT LIKE '%^0'
   AND dp.pol_uniqueid NOT LIKE '%^PYN%'
   AND dp.pol_uniqueid &lt;&gt; 'Unknown'
   AND fpc.source_system = 'OASIS'
 GROUP BY dp.pol_uniqueid;

CREATE TABLE dw_tmp_poluid_max_month PCTFREE 0 NOLOGGING AS 
SELECT dp1.pol_uniqueid, MAX(fp1.month_id) max_month_id
  FROM fact_policy fp1, dim_policy dp1
 WHERE fp1.policy_id = dp1.policy_id
   AND fp1.source_system = 'OASIS'
 GROUP BY dp1.pol_uniqueid;

CREATE TABLE dw_tmp_fp_amt PCTFREE 0 NOLOGGING AS
SELECT dp.pol_uniqueid, fp.month_id, fp.wrtn_prem_amt_itd
FROM   fact_policy fp, dim_policy dp
WHERE  fp.policy_id = dp.policy_id
AND    dp.pol_uniqueid NOT LIKE '%^0'
AND    dp.pol_uniqueid NOT LIKE '%^PYN%'
AND    dp.pol_uniqueid &lt;&gt; 'Unknown'
AND    fp.source_system = 'OASIS';

CREATE TABLE dw_tmp_val_pol_itd PCTFREE 0 NOLOGGING AS 
SELECT fpc.pol_uniqueid, SUM(fpc.wrtn_prem_amt_itd) written_prem
  FROM dw_tmp_fp_amt fpc, dw_tmp_poluid_max_month m
 WHERE fpc.pol_uniqueid = m.pol_uniqueid
   AND fpc.month_id = m.max_month_id
 GROUP BY fpc.pol_uniqueid;</sql>
      <useVariableSubstitution>F</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_DataWarehouse</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>776</xloc>
      <yloc>114</yloc>
    </entry>
    <entry>
      <name>TR_Create_Temp_Val_Tables</name>
      <description/>
      <type>TRANS</type>
      <specification_method>rep_name</specification_method>
      <trans_object_id/>
      <filename/>
      <transname>TR_Create_Temp_Val_Tables</transname>
      <directory>/public/ETL/Validations/Transformations</directory>
      <arg_from_previous>N</arg_from_previous>
      <params_from_previous>N</params_from_previous>
      <exec_per_row>N</exec_per_row>
      <clear_rows>N</clear_rows>
      <clear_files>N</clear_files>
      <set_logfile>N</set_logfile>
      <logfile/>
      <logext/>
      <add_date>N</add_date>
      <add_time>N</add_time>
      <loglevel>Basic</loglevel>
      <cluster>N</cluster>
      <slave_server_name/>
      <set_append_logfile>N</set_append_logfile>
      <wait_until_finished>Y</wait_until_finished>
      <follow_abort_remote>N</follow_abort_remote>
      <create_parent_folder>N</create_parent_folder>
      <logging_remote_work>N</logging_remote_work>
      <run_configuration/>
      <parameters>
        <pass_all_parameters>Y</pass_all_parameters>
      </parameters>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>886</xloc>
      <yloc>15</yloc>
    </entry>
    <entry>
      <name>Fact_Policysnapshot Validation</name>
      <description/>
      <type>SQL</type>
      <sql>INSERT
  INTO dw_etl_audit
WITH max_id AS
     (select nvl(max(dw_etl_audit_pk),0)  max_audit_pk
      from   dw_etl_audit e)
SELECT max_audit_pk + rownum,
       error_msg,
       ${sql_loadDate},
       '${Internal.Job.Name}',
       'Fact_Policysnapshot Validation',
       'Policy',
       message_level
FROM max_id,
     (
      WITH x AS (SELECT MAX(fps.month_id) max_mon FROM fact_policysnapshot fps),
		 m AS (SELECT /*+ use_hash(fpc, dp) */
					  dp.Pol_UniqueID,
					  SUM(fpc.wrtn_prem_amt)   Written_Prem
			   FROM   Fact_Policycoverage fpc,
					  Dim_Policy          dp
			   WHERE  fpc.Policy_ID          = dp.Policy_ID
			   AND    dp.Pol_UniqueID NOT LIKE '%^0'
			   AND    dp.Pol_UniqueID NOT LIKE '%^PYN%'
			   AND    dp.Pol_UniqueID       &lt;&gt; 'Unknown'
               AND    fpc.source_system = 'OASIS'
			   GROUP  BY dp.Pol_UniqueID), 
		 s AS (SELECT dp.Pol_UniqueID, SUM(t2.wrtn_prem_amt_itd) Written_Prem 
			   FROM   fact_policysnapshot t2, dim_policy dp, x
			   WHERE  t2.policy_id = dp.policy_id
			   AND    t2.month_id = x.max_mon
			   AND    dp.Pol_UniqueID NOT LIKE '%^0'
			   AND    dp.Pol_UniqueID NOT LIKE '%^PYN%'
			   AND    dp.Pol_UniqueID       &lt;&gt; 'Unknown'
               AND    t2.source_system = 'OASIS'
			   GROUP BY dp.Pol_UniqueID)
	SELECT 'Summary: Total Policy Premium Match Between ' ||
		   'Both MTD and Snap ITD = '                      ||
		   To_Char(COUNT(*), 'FM99,999,999')          || '.'      Error_Msg,
		   ''                                                         Policy_UniqueID,
		   NULL                                                       Snap_Writ_Prem,
		   NULL                                                       FPC_Writ_Prem,
		   'Information'                                              Message_Level
	FROM   s,
		   m
	WHERE  s.Pol_UniqueID = m.Pol_UniqueID
	AND    s.Written_Prem = m.Written_Prem
	UNION ALL
	SELECT 'Policy Premium does not match between snapshot ITD and MTD ' Error_Msg,
		   s.pol_uniqueid                                              Policy_UniqueID,
		   s.Written_Prem                                              Snap_Writ_Prem,
		   m.Written_Prem                                              FPC_Writ_Prem,
		   'Information'                                               Message_Level
	FROM   s,
		   m
	WHERE  s.Pol_UniqueID = m.Pol_UniqueID
	AND    s.Written_Prem &lt;&gt; m.Written_Prem
	UNION ALL
	SELECT 'Policy Premium Found in MTD but not in snap. ' || m.Pol_UniqueID Error_Msg,
		   m.Pol_UniqueID                                             Policy_UniqueID,
		   m.Written_Prem                                             OLTP_Writ_Prem,
		   NULL                                                       DW_Writ_Prem,                  
		   'Information'                                              Message_Level
	FROM   m
	WHERE  NOT EXISTS (SELECT 1 FROM s
					   WHERE  s.Pol_UniqueID = m.Pol_UniqueID)
	UNION ALL
	SELECT 'Policy Premium Found in Snap but not in MTD. ' || s.Pol_UniqueID Error_Msg,
		   s.Pol_UniqueID                                             Policy_UniqueID,          
		   NULL                                                       OLTP_Writ_Prem,                  
		   s.Written_Prem                                             DW_Writ_Prem,
		   'Information'                                              Message_Level
	FROM   s
	WHERE  NOT EXISTS (SELECT 1 FROM m
					   WHERE  s.Pol_UniqueID = m.Pol_UniqueID)
     );
commit;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_DataWarehouse</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>155</xloc>
      <yloc>253</yloc>
    </entry>
  </entries>
  <hops>
    <hop>
      <from>START</from>
      <to>Claim Number Validation</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>Claim Number Validation</from>
      <to>Claim Amount Validation</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Claim Amount Validation</from>
      <to>Policy Number Validation</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Policy Transaction Validation</from>
      <to>Policy Term Premium Validation</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Policy Term Premium Validation</from>
      <to>Policy MTD &amp; ITD Premium Validation</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Financial Summary Balance Validation</from>
      <to>Financialsummary MTD vs ITD Validation</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Execute Account Number &amp; Balance Validation SQL</from>
      <to>Financial Summary Balance Validation</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Policy MTD &amp; ITD Premium Validation</from>
      <to>Execute Account Number &amp; Balance Validation SQL</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Financialsummary MTD vs ITD Validation</from>
      <to>Fact_Claim_OSR Validation</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Policy Number Validation</from>
      <to>TR_Drop_Tmp_Validation_Tables</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>TR_Drop_Tmp_Validation_Tables</from>
      <to>Create DW_TMP_VAL Tables</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Create DW_TMP_VAL Tables</from>
      <to>TR_Create_Temp_Val_Tables</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>TR_Create_Temp_Val_Tables</from>
      <to>Policy Transaction Validation</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Fact_Claim_OSR Validation</from>
      <to>Fact_Policysnapshot Validation</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Fact_Policysnapshot Validation</from>
      <to>TR_Validation_Error_Check</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
  </hops>
  <notepads>
  </notepads>
  <attributes>
    <group>
      <name>JobRestart</name>
      <attribute>
        <key>UniqueConnections</key>
        <value>N</value>
      </attribute>
    </group>
  </attributes>
</job>
