<job>
  <name>SBJ_FT_Create_Lkup_Tables</name>
  <description>Job to create lookup tables for Fact_Financialtransaction load</description>
  <extended_description>Date         By     Description
04/21/2016   Jma    Issue #164949. Add logic in Create tmp_ftt_lkup_coveredriskext and Create tmp_ftt_lkup_coverageext
                    steps to get data without comparing dates.</extended_description>
  <job_version/>
  <job_status>0</job_status>
  <directory>/public/ETL/Facts/Sub-Jobs</directory>
  <created_user>-</created_user>
  <created_date>2014/10/24 13:48:00.861</created_date>
  <modified_user>-</modified_user>
  <modified_date>2016/04/22 16:50:15.454</modified_date>
  <parameters>
    </parameters>
  <connection>
    <name>4SBI_Staging</name>
    <server>${G_STAGING_DB_HOST}</server>
    <type>ORACLE</type>
    <access>Native</access>
    <database>${G_STAGING_DB_NAME}</database>
    <port>${G_STAGING_DB_PORT}</port>
    <username>${G_STAGING_DB_USERNAME}</username>
    <password>${G_STAGING_DB_PWD}</password>
    <servername/>
    <data_tablespace>${G_STAGING_DB_DATA}</data_tablespace>
    <index_tablespace>${G_STAGING_DB_INDEX}</index_tablespace>
    <attributes>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_LOWERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_UPPERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>IS_CLUSTERED</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>PORT_NUMBER</code>
        <attribute>${G_STAGING_DB_PORT}</attribute>
      </attribute>
      <attribute>
        <code>QUOTE_ALL_FIELDS</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>SUPPORTS_BOOLEAN_DATA_TYPE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>USE_POOLING</code>
        <attribute>N</attribute>
      </attribute>
    </attributes>
  </connection>
  <slaveservers>
    <slaveserver>
      <name>4Sight BI - PDI Server</name>
      <hostname>10.0.0.21</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>joe</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>Carte 1</name>
      <hostname>localhost</hostname>
      <port>9081</port>
      <webAppName/>
      <username>cluster</username>
      <password>Encrypted 2be98afc86aa7f2e4cb1aa265cd86aac8</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>DI Server</name>
      <hostname>localhost</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>joe</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_ETL_DEV</name>
      <hostname>magspentaho</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>shota</username>
      <password>Encrypted 2be98afc86aa7f2e4cb79ce63d69dbbdb</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_ETL_SERVER</name>
      <hostname>http://magspentaho</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>shota</username>
      <password>Encrypted 2be98afc86aa7f2e4cb79ce63d69dbbdb</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_ETL_TEST</name>
      <hostname>magspentahotest</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_PENTAHO</name>
      <hostname>magspentaho</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_PENTAHO_BTS</name>
      <hostname>129.144.25.104</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_PENTAHO_DEV</name>
      <hostname>magspentahodev</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>Master</name>
      <hostname>localhost</hostname>
      <port>8081</port>
      <webAppName/>
      <username>cluster</username>
      <password>Encrypted 2be98afc86aa7f2e4cb1aa265cd86aac8</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>SERVER1</name>
      <hostname>LOCALHOST</hostname>
      <port>3306</port>
      <webAppName/>
      <username>root</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>SLAVE ONE</name>
      <hostname>192.168.2.101</hostname>
      <port>3306</port>
      <webAppName/>
      <username>root</username>
      <password>Encrypted 2be98afc86aa7f2e4a418bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>SLAVE TWO</name>
      <hostname>192.168.2.101</hostname>
      <port>3306</port>
      <webAppName/>
      <username>root</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>Slave1</name>
      <hostname>localhost</hostname>
      <port>8082</port>
      <webAppName/>
      <username>cluster</username>
      <password>Encrypted 2be98afc86aa7f2e4cb1aa265cd86aac8</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>Slave2</name>
      <hostname>localhost</hostname>
      <port>8083</port>
      <webAppName/>
      <username>cluster</username>
      <password>Encrypted 2be98afc86aa7f2e4cb1aa265cd86aac8</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>Slave3</name>
      <hostname>localhost</hostname>
      <port>8084</port>
      <webAppName/>
      <username>cluster</username>
      <password>Encrypted 2be98afc86aa7f2e4cb1aa265cd86aac8</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>local DIS</name>
      <hostname>localhost</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>magspentahodev</name>
      <hostname>magspentahodev</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
  </slaveservers>
  <job-log-table>
    <connection/>
    <schema/>
    <table/>
    <size_limit_lines/>
    <interval/>
    <timeout_days/>
    <field>
      <id>ID_JOB</id>
      <enabled>Y</enabled>
      <name>ID_JOB</name>
    </field>
    <field>
      <id>CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>CHANNEL_ID</name>
    </field>
    <field>
      <id>JOBNAME</id>
      <enabled>Y</enabled>
      <name>JOBNAME</name>
    </field>
    <field>
      <id>STATUS</id>
      <enabled>Y</enabled>
      <name>STATUS</name>
    </field>
    <field>
      <id>LINES_READ</id>
      <enabled>Y</enabled>
      <name>LINES_READ</name>
    </field>
    <field>
      <id>LINES_WRITTEN</id>
      <enabled>Y</enabled>
      <name>LINES_WRITTEN</name>
    </field>
    <field>
      <id>LINES_UPDATED</id>
      <enabled>Y</enabled>
      <name>LINES_UPDATED</name>
    </field>
    <field>
      <id>LINES_INPUT</id>
      <enabled>Y</enabled>
      <name>LINES_INPUT</name>
    </field>
    <field>
      <id>LINES_OUTPUT</id>
      <enabled>Y</enabled>
      <name>LINES_OUTPUT</name>
    </field>
    <field>
      <id>LINES_REJECTED</id>
      <enabled>Y</enabled>
      <name>LINES_REJECTED</name>
    </field>
    <field>
      <id>ERRORS</id>
      <enabled>Y</enabled>
      <name>ERRORS</name>
    </field>
    <field>
      <id>STARTDATE</id>
      <enabled>Y</enabled>
      <name>STARTDATE</name>
    </field>
    <field>
      <id>ENDDATE</id>
      <enabled>Y</enabled>
      <name>ENDDATE</name>
    </field>
    <field>
      <id>LOGDATE</id>
      <enabled>Y</enabled>
      <name>LOGDATE</name>
    </field>
    <field>
      <id>DEPDATE</id>
      <enabled>Y</enabled>
      <name>DEPDATE</name>
    </field>
    <field>
      <id>REPLAYDATE</id>
      <enabled>Y</enabled>
      <name>REPLAYDATE</name>
    </field>
    <field>
      <id>LOG_FIELD</id>
      <enabled>Y</enabled>
      <name>LOG_FIELD</name>
    </field>
    <field>
      <id>EXECUTING_SERVER</id>
      <enabled>N</enabled>
      <name>EXECUTING_SERVER</name>
    </field>
    <field>
      <id>EXECUTING_USER</id>
      <enabled>N</enabled>
      <name>EXECUTING_USER</name>
    </field>
    <field>
      <id>START_JOB_ENTRY</id>
      <enabled>N</enabled>
      <name>START_JOB_ENTRY</name>
    </field>
    <field>
      <id>CLIENT</id>
      <enabled>N</enabled>
      <name>CLIENT</name>
    </field>
  </job-log-table>
  <jobentry-log-table>
    <connection/>
    <schema/>
    <table/>
    <timeout_days/>
    <field>
      <id>ID_BATCH</id>
      <enabled>Y</enabled>
      <name>ID_BATCH</name>
    </field>
    <field>
      <id>CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>CHANNEL_ID</name>
    </field>
    <field>
      <id>LOG_DATE</id>
      <enabled>Y</enabled>
      <name>LOG_DATE</name>
    </field>
    <field>
      <id>JOBNAME</id>
      <enabled>Y</enabled>
      <name>TRANSNAME</name>
    </field>
    <field>
      <id>JOBENTRYNAME</id>
      <enabled>Y</enabled>
      <name>STEPNAME</name>
    </field>
    <field>
      <id>LINES_READ</id>
      <enabled>Y</enabled>
      <name>LINES_READ</name>
    </field>
    <field>
      <id>LINES_WRITTEN</id>
      <enabled>Y</enabled>
      <name>LINES_WRITTEN</name>
    </field>
    <field>
      <id>LINES_UPDATED</id>
      <enabled>Y</enabled>
      <name>LINES_UPDATED</name>
    </field>
    <field>
      <id>LINES_INPUT</id>
      <enabled>Y</enabled>
      <name>LINES_INPUT</name>
    </field>
    <field>
      <id>LINES_OUTPUT</id>
      <enabled>Y</enabled>
      <name>LINES_OUTPUT</name>
    </field>
    <field>
      <id>LINES_REJECTED</id>
      <enabled>Y</enabled>
      <name>LINES_REJECTED</name>
    </field>
    <field>
      <id>ERRORS</id>
      <enabled>Y</enabled>
      <name>ERRORS</name>
    </field>
    <field>
      <id>RESULT</id>
      <enabled>Y</enabled>
      <name>RESULT</name>
    </field>
    <field>
      <id>NR_RESULT_ROWS</id>
      <enabled>Y</enabled>
      <name>NR_RESULT_ROWS</name>
    </field>
    <field>
      <id>NR_RESULT_FILES</id>
      <enabled>Y</enabled>
      <name>NR_RESULT_FILES</name>
    </field>
    <field>
      <id>LOG_FIELD</id>
      <enabled>N</enabled>
      <name>LOG_FIELD</name>
    </field>
    <field>
      <id>COPY_NR</id>
      <enabled>N</enabled>
      <name>COPY_NR</name>
    </field>
  </jobentry-log-table>
  <channel-log-table>
    <connection/>
    <schema/>
    <table/>
    <timeout_days/>
    <field>
      <id>ID_BATCH</id>
      <enabled>Y</enabled>
      <name>ID_BATCH</name>
    </field>
    <field>
      <id>CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>CHANNEL_ID</name>
    </field>
    <field>
      <id>LOG_DATE</id>
      <enabled>Y</enabled>
      <name>LOG_DATE</name>
    </field>
    <field>
      <id>LOGGING_OBJECT_TYPE</id>
      <enabled>Y</enabled>
      <name>LOGGING_OBJECT_TYPE</name>
    </field>
    <field>
      <id>OBJECT_NAME</id>
      <enabled>Y</enabled>
      <name>OBJECT_NAME</name>
    </field>
    <field>
      <id>OBJECT_COPY</id>
      <enabled>Y</enabled>
      <name>OBJECT_COPY</name>
    </field>
    <field>
      <id>REPOSITORY_DIRECTORY</id>
      <enabled>Y</enabled>
      <name>REPOSITORY_DIRECTORY</name>
    </field>
    <field>
      <id>FILENAME</id>
      <enabled>Y</enabled>
      <name>FILENAME</name>
    </field>
    <field>
      <id>OBJECT_ID</id>
      <enabled>Y</enabled>
      <name>OBJECT_ID</name>
    </field>
    <field>
      <id>OBJECT_REVISION</id>
      <enabled>Y</enabled>
      <name>OBJECT_REVISION</name>
    </field>
    <field>
      <id>PARENT_CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>PARENT_CHANNEL_ID</name>
    </field>
    <field>
      <id>ROOT_CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>ROOT_CHANNEL_ID</name>
    </field>
  </channel-log-table>
  <checkpoint-log-table>
    <connection/>
    <schema/>
    <table/>
    <timeout_days/>
    <max_nr_retries/>
    <run_retry_period/>
    <namespace_parameter/>
    <save_parameters/>
    <save_result_rows/>
    <save_result_files/>
    <field>
      <id>ID_JOB_RUN</id>
      <enabled>Y</enabled>
      <name>ID_JOB_RUN</name>
    </field>
    <field>
      <id>ID_JOB</id>
      <enabled>Y</enabled>
      <name>ID_JOB</name>
    </field>
    <field>
      <id>JOBNAME</id>
      <enabled>Y</enabled>
      <name>JOBNAME</name>
    </field>
    <field>
      <id>NAMESPACE</id>
      <enabled>Y</enabled>
      <name>NAMESPACE</name>
    </field>
    <field>
      <id>CHECKPOINT_NAME</id>
      <enabled>Y</enabled>
      <name>CHECKPOINT_NAME</name>
    </field>
    <field>
      <id>CHECKPOINT_COPYNR</id>
      <enabled>Y</enabled>
      <name>CHECKPOINT_COPYNR</name>
    </field>
    <field>
      <id>ATTEMPT_NR</id>
      <enabled>Y</enabled>
      <name>ATTEMPT_NR</name>
    </field>
    <field>
      <id>JOB_RUN_START_DATE</id>
      <enabled>Y</enabled>
      <name>JOB_RUN_START_DATE</name>
    </field>
    <field>
      <id>LOGDATE</id>
      <enabled>Y</enabled>
      <name>LOGDATE</name>
    </field>
    <field>
      <id>RESULT_XML</id>
      <enabled>Y</enabled>
      <name>RESULT_XML</name>
    </field>
    <field>
      <id>PARAMETER_XML</id>
      <enabled>Y</enabled>
      <name>PARAMETER_XML</name>
    </field>
  </checkpoint-log-table>
  <pass_batchid>N</pass_batchid>
  <shared_objects_file/>
  <entries>
    <entry>
      <name>If exists tmp_ftt_lkup_transissuecompany</name>
      <description/>
      <type>TABLE_EXISTS</type>
      <tablename>tmp_ftt_lkup_transissuecompany</tablename>
      <schemaname/>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>217</xloc>
      <yloc>69</yloc>
    </entry>
    <entry>
      <name>Create tmp_ftt_lkup_transissuecompany</name>
      <description/>
      <type>SQL</type>
      <sql>create table tmp_ftt_lkup_transissuecompany nologging PCTFREE 0 
tablespace ${G_STAGING_DB_DATA}
as
SELECT sk_recordnum,
       COMPANY_ID TRANSACTIONISSUINGCOMPANY_ID
FROM   (       
        SELECT /*+ use_hash(vc, sp) */
               sp.sk_recordnum,
               vc.COMPANY_ID,
               row_number() OVER (PARTITION BY sp.sk_recordnum ORDER BY vc.COMPANY_ID DESC) pick1
        FROM   Vdim_Company vc,
               tmp_ftt_trans_detail sp
        WHERE  vc.COMP_UNIQUEID = sp.issuingcompany_uniqueid) 
WHERE  pick1 = 1;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>530</xloc>
      <yloc>69</yloc>
    </entry>
    <entry>
      <name>Drop tmp_ftt_lkup_transissuecompany</name>
      <description/>
      <type>SQL</type>
      <sql>drop table tmp_ftt_lkup_transissuecompany purge;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>365</xloc>
      <yloc>10</yloc>
    </entry>
    <entry>
      <name>START</name>
      <description/>
      <type>SPECIAL</type>
      <start>Y</start>
      <dummy>N</dummy>
      <repeat>N</repeat>
      <schedulerType>0</schedulerType>
      <intervalSeconds>0</intervalSeconds>
      <intervalMinutes>60</intervalMinutes>
      <hour>12</hour>
      <minutes>0</minutes>
      <weekDay>1</weekDay>
      <DayOfMonth>1</DayOfMonth>
      <parallel>Y</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>26</xloc>
      <yloc>717</yloc>
    </entry>
    <entry>
      <name>If exists tmp_ftt_help_assign_prd</name>
      <description/>
      <type>TABLE_EXISTS</type>
      <tablename>tmp_ftt_help_assign_prd</tablename>
      <schemaname/>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>220</xloc>
      <yloc>174</yloc>
    </entry>
    <entry>
      <name>Create tmp_ftt_help_assign_prd</name>
      <description/>
      <type>SQL</type>
      <sql>create table tmp_ftt_help_assign_prd nologging PCTFREE 0 
tablespace ${G_STAGING_DB_DATA}
as
SELECT /*+ use_hash(i, sp) */
       i.sk_recordnum,
       DECODE(i.ft_typecode,'AGENTCOMM',i.agent_producer_uniqueid,sp.pol_produceruniqueid) producer_uniqueid
FROM   tmp_ftt_trans_detail i,
       tmp_ftt_lkup_stg_policy sp
WHERE  i.sk_recordnum = sp.sk_recordnum;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>533</xloc>
      <yloc>174</yloc>
    </entry>
    <entry>
      <name>Drop tmp_ftt_help_assign_prd</name>
      <description/>
      <type>SQL</type>
      <sql>drop table tmp_ftt_help_assign_prd purge;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>368</xloc>
      <yloc>115</yloc>
    </entry>
    <entry>
      <name>If exists tmp_ftt_lkup_producer</name>
      <description/>
      <type>TABLE_EXISTS</type>
      <tablename>tmp_ftt_lkup_producer</tablename>
      <schemaname/>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>533</xloc>
      <yloc>255</yloc>
    </entry>
    <entry>
      <name>Create tmp_ftt_lkup_producer</name>
      <description/>
      <type>SQL</type>
      <sql>create table tmp_ftt_lkup_producer nologging PCTFREE 0 
tablespace ${G_STAGING_DB_DATA}
as
SELECT sk_recordnum,
       PRODUCER_ID
FROM   (       
SELECT /*+ use_hash(vp, t) */
       t.sk_recordnum,
       vp.PRODUCER_ID,
       row_number() OVER (PARTITION BY t.sk_recordnum ORDER BY vp.PRODUCER_ID DESC) pick1
FROM   Vdim_Producer vp,
       tmp_ftt_help_assign_prd t
WHERE  vp.PRDR_UNIQUEID = t.producer_uniqueid) 
WHERE  pick1 = 1;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>853</xloc>
      <yloc>255</yloc>
    </entry>
    <entry>
      <name>Drop tmp_ftt_lkup_producer</name>
      <description/>
      <type>SQL</type>
      <sql>drop table tmp_ftt_lkup_producer purge;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>688</xloc>
      <yloc>196</yloc>
    </entry>
    <entry>
      <name>If exists tmp_ftt_lkup_subproducer</name>
      <description/>
      <type>TABLE_EXISTS</type>
      <tablename>tmp_ftt_lkup_subproducer</tablename>
      <schemaname/>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>228</xloc>
      <yloc>364</yloc>
    </entry>
    <entry>
      <name>Create tmp_ftt_lkup_subproducer</name>
      <description/>
      <type>SQL</type>
      <sql>create table tmp_ftt_lkup_subproducer nologging PCTFREE 0 
tablespace ${G_STAGING_DB_DATA}
as
SELECT sk_recordnum,
       SUBPRODUCER_ID
FROM   (       
SELECT /*+ use_hash(t, svp) */
       t.sk_recordnum,
       svp.SUBPRODUCER_ID,
       row_number() OVER (PARTITION BY t.sk_recordnum ORDER BY svp.SUBPRODUCER_ID DESC) pick1
FROM   VDIM_SUBPRODUCER svp,
       tmp_ftt_lkup_stg_policy t
WHERE  svp.SUBPRDR_UNIQUEID = t.subproducer_uniqueid) 
WHERE  pick1 = 1;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>541</xloc>
      <yloc>364</yloc>
    </entry>
    <entry>
      <name>Drop tmp_ftt_lkup_subproducer</name>
      <description/>
      <type>SQL</type>
      <sql>drop table tmp_ftt_lkup_subproducer purge;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>376</xloc>
      <yloc>305</yloc>
    </entry>
    <entry>
      <name>If exists tmp_ftt_lkup_firstinsured</name>
      <description/>
      <type>TABLE_EXISTS</type>
      <tablename>tmp_ftt_lkup_firstinsured</tablename>
      <schemaname/>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>228</xloc>
      <yloc>455</yloc>
    </entry>
    <entry>
      <name>Create tmp_ftt_lkup_firstinsured</name>
      <description/>
      <type>SQL</type>
      <sql>create table tmp_ftt_lkup_firstinsured nologging PCTFREE 0 
tablespace ${G_STAGING_DB_DATA}
as
SELECT sk_recordnum,
       FIRSTINSURED_ID
FROM   (       
SELECT /*+ use_hash(vfi, t) */
       t.sk_recordnum,
       vfi.FIRSTINSURED_ID,
       row_number() OVER (PARTITION BY t.sk_recordnum ORDER BY vfi.FIRSTINSURED_ID DESC) pick1
FROM   Vdim_Firstinsured vfi,
       tmp_ftt_lkup_stg_policy t
WHERE  vfi.FINSD_UNIQUEID = t.firstinsured_uniqueid) 
WHERE  pick1 = 1;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>541</xloc>
      <yloc>455</yloc>
    </entry>
    <entry>
      <name>Drop tmp_ftt_lkup_firstinsured</name>
      <description/>
      <type>SQL</type>
      <sql>drop table tmp_ftt_lkup_firstinsured purge;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>376</xloc>
      <yloc>396</yloc>
    </entry>
    <entry>
      <name>If exists tmp_ftt_lkup_coveredrisk</name>
      <description/>
      <type>TABLE_EXISTS</type>
      <tablename>tmp_ftt_lkup_coveredrisk</tablename>
      <schemaname/>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>231</xloc>
      <yloc>549</yloc>
    </entry>
    <entry>
      <name>Create tmp_ftt_lkup_coveredrisk</name>
      <description/>
      <type>SQL</type>
      <sql>create table tmp_ftt_lkup_coveredrisk nologging PCTFREE 0 
tablespace ${G_STAGING_DB_DATA}
as
SELECT sk_recordnum,
       coveredrisk_id
FROM   (       
SELECT /*+ use_hash(t, dcr) */
       t.sk_recordnum,
       dcr.coveredrisk_id,
       row_number() OVER (PARTITION BY t.sk_recordnum ORDER BY dcr.coveredrisk_id DESC) pick1
FROM   Dim_Coveredrisk dcr,
       tmp_ftt_trans_detail t
WHERE  t.primaryrisk_uniqueid = dcr.cvrsk_uniqueid) 
WHERE  pick1 = 1;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>548</xloc>
      <yloc>549</yloc>
    </entry>
    <entry>
      <name>Drop tmp_ftt_lkup_coveredrisk</name>
      <description/>
      <type>SQL</type>
      <sql>drop table tmp_ftt_lkup_coveredrisk purge;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>379</xloc>
      <yloc>490</yloc>
    </entry>
    <entry>
      <name>If exists tmp_ftt_lkup_coveredriskext</name>
      <description/>
      <type>TABLE_EXISTS</type>
      <tablename>tmp_ftt_lkup_coveredriskext</tablename>
      <schemaname/>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>231</xloc>
      <yloc>635</yloc>
    </entry>
    <entry>
      <name>Create tmp_ftt_lkup_coveredriskext</name>
      <description/>
      <type>SQL</type>
      <sql>create table tmp_ftt_lkup_coveredriskext nologging PCTFREE 0 
tablespace ${G_STAGING_DB_DATA}
as
SELECT sk_recordnum,
       PRIMARYRISKEXTENSION_ID
FROM   (       
SELECT 
       t.sk_recordnum,
       dcre.coveredriskextension_id PRIMARYRISKEXTENSION_ID,
       row_number() OVER (PARTITION BY t.sk_recordnum ORDER BY dcre.record_version DESC) pick1
FROM   Dim_Coveredriskextension dcre,
       tmp_ftt_trans_detail t
WHERE  t.primaryrisk_uniqueid = dcre.cvrsk_uniqueid
AND    trunc(dcre.valid_fromdate) &lt;= t.ft_accountingdate
AND    trunc(dcre.valid_todate)   >= t.ft_accountingdate
AND    dcre.pt_sequence &lt;= t.Source_Record_Uniqueid 
       ) 
WHERE  pick1 = 1;

-- Issue #164949
-- Add following logic to get data from DIM_COVEREDRISKEXTENSION without comparing risk date with FM transaction accounting date.

INSERT INTO tmp_ftt_lkup_coveredriskext 
SELECT sk_recordnum,
       primaryriskextension_id
FROM   (SELECT t.sk_recordnum,
               dcre.coveredriskextension_id primaryriskextension_id,
               row_number() OVER (PARTITION BY t.sk_recordnum ORDER BY dcre.record_version DESC) pick1
        FROM   Dim_Coveredriskextension dcre,
               tmp_ftt_trans_detail t
        WHERE  t.primaryrisk_uniqueid = dcre.cvrsk_uniqueid
        AND    dcre.pt_sequence &lt;= t.source_record_uniqueid
        AND    NOT EXISTS 
               (SELECT 1 
                FROM   tmp_ftt_lkup_coveredriskext r
                WHERE  r.sk_recordnum = t.sk_recordnum)
        ) 
WHERE  pick1 = 1;

commit;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>548</xloc>
      <yloc>635</yloc>
    </entry>
    <entry>
      <name>Drop tmp_ftt_lkup_coveredriskext</name>
      <description/>
      <type>SQL</type>
      <sql>drop table tmp_ftt_lkup_coveredriskext purge;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>379</xloc>
      <yloc>591</yloc>
    </entry>
    <entry>
      <name>If exists tmp_ftt_lkup_territory</name>
      <description/>
      <type>TABLE_EXISTS</type>
      <tablename>tmp_ftt_lkup_territory</tablename>
      <schemaname/>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>231</xloc>
      <yloc>717</yloc>
    </entry>
    <entry>
      <name>Create tmp_ftt_lkup_territory</name>
      <description/>
      <type>SQL</type>
      <sql>create table tmp_ftt_lkup_territory nologging PCTFREE 0 
tablespace ${G_STAGING_DB_DATA}
as
SELECT sk_recordnum,
       territory_id
FROM   (       
SELECT t.sk_recordnum,
       dt.territory_id,
       row_number() OVER (PARTITION BY t.sk_recordnum ORDER BY dt.territory_id DESC) pick1
FROM   Dim_Territory dt,
       tmp_ftt_lkup_stg_risk t
WHERE  t.rsk_territorycode = dt.terr_code
AND    t.rsk_territoryname = dt.terr_name) 
WHERE  pick1 = 1;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>548</xloc>
      <yloc>717</yloc>
    </entry>
    <entry>
      <name>Drop tmp_ftt_lkup_territory</name>
      <description/>
      <type>SQL</type>
      <sql>drop table tmp_ftt_lkup_territory purge;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>379</xloc>
      <yloc>665</yloc>
    </entry>
    <entry>
      <name>If exists tmp_ftt_lkup_dim_coverage</name>
      <description/>
      <type>TABLE_EXISTS</type>
      <tablename>tmp_ftt_lkup_dim_coverage</tablename>
      <schemaname/>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>231</xloc>
      <yloc>812</yloc>
    </entry>
    <entry>
      <name>Create tmp_ftt_lkup_dim_coverage</name>
      <description/>
      <type>SQL</type>
      <sql>create table tmp_ftt_lkup_dim_coverage nologging PCTFREE 0 
tablespace ${G_STAGING_DB_DATA}
as
SELECT sk_recordnum,
       coverage_id
FROM   (       
SELECT t.sk_recordnum,
       dc.coverage_id,
       row_number() OVER (PARTITION BY t.sk_recordnum ORDER BY dc.coverage_id DESC) pick1
FROM   Dim_Coverage dc,
       tmp_ftt_trans_detail_1 t
WHERE  t.cov_type = dc.cov_type
AND    t.cov_code = dc.cov_code
AND    t.cov_name = dc.cov_name
AND    t.cov_description = dc.cov_description
AND    t.cov_subcode = dc.cov_subcode
AND    t.cov_subcodename = dc.cov_subcodename
AND    t.cov_subcodedescription = dc.cov_subcodedescription
AND    t.cov_asl = dc.cov_asl
AND    t.cov_subline = dc.cov_subline) 
WHERE  pick1 = 1;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>548</xloc>
      <yloc>812</yloc>
    </entry>
    <entry>
      <name>Drop tmp_ftt_lkup_dim_coverage</name>
      <description/>
      <type>SQL</type>
      <sql>drop table tmp_ftt_lkup_dim_coverage purge;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>379</xloc>
      <yloc>758</yloc>
    </entry>
    <entry>
      <name>If exists tmp_ftt_lkup_dim_policy1</name>
      <description/>
      <type>TABLE_EXISTS</type>
      <tablename>tmp_ftt_lkup_dim_policy1</tablename>
      <schemaname/>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>231</xloc>
      <yloc>891</yloc>
    </entry>
    <entry>
      <name>Create tmp_ftt_lkup_dim_policy1</name>
      <description/>
      <type>SQL</type>
      <sql>create table tmp_ftt_lkup_dim_policy1 nologging PCTFREE 0 
tablespace ${G_STAGING_DB_DATA}
as
SELECT sk_recordnum,
       policy_id
FROM   (       
SELECT t.sk_recordnum,
       dp.policy_id,
       row_number() OVER (PARTITION BY t.sk_recordnum ORDER BY dp.record_version DESC) pick1
FROM   Dim_Policy dp,
       tmp_ftt_trans_detail_1 t
WHERE  t.policy_uniqueid = dp.pol_uniqueid
AND    trunc(dp.valid_fromdate) &lt;= t.ft_accountingdate
AND    trunc(dp.valid_todate) >= t.ft_accountingdate) 
WHERE  pick1 = 1;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>548</xloc>
      <yloc>887</yloc>
    </entry>
    <entry>
      <name>Drop tmp_ftt_lkup_dim_policy1</name>
      <description/>
      <type>SQL</type>
      <sql>drop table tmp_ftt_lkup_dim_policy1 purge;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>379</xloc>
      <yloc>847</yloc>
    </entry>
    <entry>
      <name>If exists tmp_ftt_lkup_dim_policy2</name>
      <description/>
      <type>TABLE_EXISTS</type>
      <tablename>tmp_ftt_lkup_dim_policy2</tablename>
      <schemaname/>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>233</xloc>
      <yloc>980</yloc>
    </entry>
    <entry>
      <name>Create tmp_ftt_lkup_dim_policy2</name>
      <description/>
      <type>SQL</type>
      <sql>create table tmp_ftt_lkup_dim_policy2 nologging PCTFREE 0 
tablespace ${G_STAGING_DB_DATA}
as
SELECT sk_recordnum,
       policy_id
FROM   (       
SELECT t.sk_recordnum,
       dp.policy_id,
       row_number() OVER (PARTITION BY t.sk_recordnum ORDER BY dp.record_version DESC) pick1
FROM   Dim_Policy dp,
       tmp_ftt_trans_detail_1 t
WHERE  t.policy_uniqueid = dp.pol_uniqueid
AND    trunc(dp.valid_todate) > t.ft_accountingdate) 
WHERE  pick1 = 1;
</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>550</xloc>
      <yloc>976</yloc>
    </entry>
    <entry>
      <name>Drop tmp_ftt_lkup_dim_policy2</name>
      <description/>
      <type>SQL</type>
      <sql>drop table tmp_ftt_lkup_dim_policy2 purge;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>381</xloc>
      <yloc>936</yloc>
    </entry>
    <entry>
      <name>If exists tmp_ftt_lkup_underwriter</name>
      <description/>
      <type>TABLE_EXISTS</type>
      <tablename>tmp_ftt_lkup_underwriter</tablename>
      <schemaname/>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>238</xloc>
      <yloc>1061</yloc>
    </entry>
    <entry>
      <name>Create tmp_ftt_lkup_underwriter</name>
      <description/>
      <type>SQL</type>
      <sql>create table tmp_ftt_lkup_underwriter nologging PCTFREE 0 
tablespace ${G_STAGING_DB_DATA}
as
SELECT sk_recordnum,
       UNDERWRITER_ID
FROM   (       
SELECT /*+ use_hash(vd, t) */
       t.sk_recordnum,
       vd.UNDERWRITER_ID,
       row_number() OVER (PARTITION BY t.sk_recordnum ORDER BY vd.UNDERWRITER_ID DESC) pick1
FROM   Vdim_Underwriter vd,
       tmp_ftt_lkup_stg_policy t
WHERE  vd.UW_UNIQUEID = t.underwriter_uniqueid) 
WHERE  pick1 = 1;

</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>555</xloc>
      <yloc>1061</yloc>
    </entry>
    <entry>
      <name>Drop tmp_ftt_lkup_underwriter</name>
      <description/>
      <type>SQL</type>
      <sql>drop table tmp_ftt_lkup_underwriter purge;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>386</xloc>
      <yloc>1017</yloc>
    </entry>
    <entry>
      <name>If exists tmp_ftt_lkup_classification</name>
      <description/>
      <type>TABLE_EXISTS</type>
      <tablename>tmp_ftt_lkup_classification</tablename>
      <schemaname/>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>240</xloc>
      <yloc>1141</yloc>
    </entry>
    <entry>
      <name>Create tmp_ftt_lkup_classification</name>
      <description/>
      <type>SQL</type>
      <sql>create table tmp_ftt_lkup_classification nologging PCTFREE 0 
tablespace ${G_STAGING_DB_DATA}
as
SELECT sk_recordnum,
       classification_id
FROM   (       
SELECT 
       t.sk_recordnum,
       dcs.classification_id,
       row_number() OVER (PARTITION BY t.sk_recordnum ORDER BY dcs.classification_id DESC) pick1
FROM   Dim_Classification     dcs,
       tmp_ftt_trans_detail_1 t
WHERE  t.cov_classcode    = dcs.class_code )
WHERE  pick1 = 1;

</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>557</xloc>
      <yloc>1141</yloc>
    </entry>
    <entry>
      <name>Drop tmp_ftt_lkup_classification</name>
      <description/>
      <type>SQL</type>
      <sql>drop table tmp_ftt_lkup_classification purge;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>388</xloc>
      <yloc>1097</yloc>
    </entry>
    <entry>
      <name>If exists tmp_ftt_lkup_coverageext</name>
      <description/>
      <type>TABLE_EXISTS</type>
      <tablename>tmp_ftt_lkup_coverageext</tablename>
      <schemaname/>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>241</xloc>
      <yloc>1223</yloc>
    </entry>
    <entry>
      <name>Create tmp_ftt_lkup_coverageext</name>
      <description/>
      <type>SQL</type>
      <sql>create table tmp_ftt_lkup_coverageext nologging PCTFREE 0 
tablespace ${G_STAGING_DB_DATA}
as
SELECT sk_recordnum,
       coverageextension_id
FROM   (       
SELECT 
       t.sk_recordnum,
       dce.coverageextension_id,
       row_number() OVER (PARTITION BY t.sk_recordnum ORDER BY dce.record_version DESC) pick1
FROM   Dim_Coverageextension  dce,
       tmp_ftt_trans_detail_1 t
WHERE  t.coverage_uniqueid = dce.cov_uniqueid
AND    trunc(dce.valid_fromdate) &lt;= t.ft_accountingdate
AND    trunc(dce.valid_todate) >= t.ft_accountingdate )
WHERE  pick1 = 1;

-- Issue #164949
-- Add following logic to get data from DIM_COVERAGEEXTENSION without comparing coverage date with FM transaction accounting date.

INSERT INTO tmp_ftt_lkup_coverageext 
SELECT sk_recordnum,
       coverageextension_id
FROM   (       
       SELECT t.sk_recordnum,
              dce.coverageextension_id,
              row_number() OVER (PARTITION BY t.sk_recordnum ORDER BY dce.record_version DESC) pick1
       FROM   Dim_Coverageextension  dce,
              tmp_ftt_trans_detail_1 t
       WHERE  t.coverage_uniqueid = dce.cov_uniqueid
       AND    NOT EXISTS 
              (SELECT 1 
               FROM   tmp_ftt_lkup_coverageext l
               WHERE  l.sk_recordnum = t.sk_recordnum)
       )
WHERE  pick1 = 1;

commit;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>558</xloc>
      <yloc>1223</yloc>
    </entry>
    <entry>
      <name>Drop tmp_ftt_lkup_coverageext</name>
      <description/>
      <type>SQL</type>
      <sql>drop table tmp_ftt_lkup_coverageext purge;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>389</xloc>
      <yloc>1179</yloc>
    </entry>
    <entry>
      <name>If exists tmp_ftt_lkup_dim_policyext1</name>
      <description/>
      <type>TABLE_EXISTS</type>
      <tablename>tmp_ftt_lkup_dim_policyext1</tablename>
      <schemaname/>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>242</xloc>
      <yloc>1307</yloc>
    </entry>
    <entry>
      <name>Create tmp_ftt_lkup_dim_policyext1</name>
      <description/>
      <type>SQL</type>
      <sql>create table tmp_ftt_lkup_dim_policyext1 nologging PCTFREE 0 
tablespace ${G_STAGING_DB_DATA}
as
SELECT sk_recordnum,
       policyextension_id
FROM   (       
SELECT t.sk_recordnum,
       dpe.policyextension_id,
       row_number() OVER (PARTITION BY t.sk_recordnum ORDER BY dpe.record_version DESC) pick1
FROM   Dim_Policyextension dpe,
       tmp_ftt_trans_detail_1 t
WHERE  t.policy_uniqueid = dpe.policy_uniqueid
AND    trunc(dpe.valid_fromdate) &lt;= t.ft_accountingdate
AND    trunc(dpe.valid_todate) >= t.ft_accountingdate
AND    dpe.pt_sequence &lt;= t.source_record_uniqueid 
) 
WHERE  pick1 = 1;
</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>559</xloc>
      <yloc>1307</yloc>
    </entry>
    <entry>
      <name>Drop tmp_ftt_lkup_dim_policyext1</name>
      <description/>
      <type>SQL</type>
      <sql>drop table tmp_ftt_lkup_dim_policyext1 purge;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>390</xloc>
      <yloc>1263</yloc>
    </entry>
    <entry>
      <name>If exists tmp_ftt_lkup_dim_policyext2</name>
      <description/>
      <type>TABLE_EXISTS</type>
      <tablename>tmp_ftt_lkup_dim_policyext2</tablename>
      <schemaname/>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>242</xloc>
      <yloc>1409</yloc>
    </entry>
    <entry>
      <name>Create tmp_ftt_lkup_dim_policyext2</name>
      <description/>
      <type>SQL</type>
      <sql>create table tmp_ftt_lkup_dim_policyext2 nologging PCTFREE 0 
tablespace ${G_STAGING_DB_DATA}
as
SELECT sk_recordnum,
       policyextension_id
FROM   (       
SELECT t.sk_recordnum,
       dpe.policyextension_id,
       row_number() OVER (PARTITION BY t.sk_recordnum ORDER BY dpe.record_version DESC) pick1
FROM   Dim_Policyextension dpe,
       tmp_ftt_trans_detail_1 t
WHERE  t.policy_uniqueid = dpe.policy_uniqueid
AND    trunc(dpe.valid_todate) > t.ft_accountingdate) 
WHERE  pick1 = 1;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>559</xloc>
      <yloc>1409</yloc>
    </entry>
    <entry>
      <name>Drop tmp_ftt_lkup_dim_policyext2</name>
      <description/>
      <type>SQL</type>
      <sql>drop table tmp_ftt_lkup_dim_policyext2 purge;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>393</xloc>
      <yloc>1353</yloc>
    </entry>
  </entries>
  <hops>
    <hop>
      <from>START</from>
      <to>If exists tmp_ftt_lkup_transissuecompany</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>If exists tmp_ftt_lkup_transissuecompany</from>
      <to>Drop tmp_ftt_lkup_transissuecompany</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Drop tmp_ftt_lkup_transissuecompany</from>
      <to>Create tmp_ftt_lkup_transissuecompany</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>If exists tmp_ftt_lkup_transissuecompany</from>
      <to>Create tmp_ftt_lkup_transissuecompany</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>START</from>
      <to>If exists tmp_ftt_help_assign_prd</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>If exists tmp_ftt_help_assign_prd</from>
      <to>Drop tmp_ftt_help_assign_prd</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Drop tmp_ftt_help_assign_prd</from>
      <to>Create tmp_ftt_help_assign_prd</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>If exists tmp_ftt_help_assign_prd</from>
      <to>Create tmp_ftt_help_assign_prd</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>If exists tmp_ftt_lkup_producer</from>
      <to>Drop tmp_ftt_lkup_producer</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Drop tmp_ftt_lkup_producer</from>
      <to>Create tmp_ftt_lkup_producer</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>If exists tmp_ftt_lkup_producer</from>
      <to>Create tmp_ftt_lkup_producer</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>START</from>
      <to>If exists tmp_ftt_lkup_subproducer</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>If exists tmp_ftt_lkup_subproducer</from>
      <to>Drop tmp_ftt_lkup_subproducer</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Drop tmp_ftt_lkup_subproducer</from>
      <to>Create tmp_ftt_lkup_subproducer</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>If exists tmp_ftt_lkup_subproducer</from>
      <to>Create tmp_ftt_lkup_subproducer</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>START</from>
      <to>If exists tmp_ftt_lkup_firstinsured</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>If exists tmp_ftt_lkup_firstinsured</from>
      <to>Drop tmp_ftt_lkup_firstinsured</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Drop tmp_ftt_lkup_firstinsured</from>
      <to>Create tmp_ftt_lkup_firstinsured</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>If exists tmp_ftt_lkup_firstinsured</from>
      <to>Create tmp_ftt_lkup_firstinsured</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>START</from>
      <to>If exists tmp_ftt_lkup_coveredrisk</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>If exists tmp_ftt_lkup_coveredrisk</from>
      <to>Drop tmp_ftt_lkup_coveredrisk</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Drop tmp_ftt_lkup_coveredrisk</from>
      <to>Create tmp_ftt_lkup_coveredrisk</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>If exists tmp_ftt_lkup_coveredrisk</from>
      <to>Create tmp_ftt_lkup_coveredrisk</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>START</from>
      <to>If exists tmp_ftt_lkup_coveredriskext</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>If exists tmp_ftt_lkup_coveredriskext</from>
      <to>Drop tmp_ftt_lkup_coveredriskext</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Drop tmp_ftt_lkup_coveredriskext</from>
      <to>Create tmp_ftt_lkup_coveredriskext</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>If exists tmp_ftt_lkup_coveredriskext</from>
      <to>Create tmp_ftt_lkup_coveredriskext</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>START</from>
      <to>If exists tmp_ftt_lkup_territory</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>If exists tmp_ftt_lkup_territory</from>
      <to>Drop tmp_ftt_lkup_territory</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Drop tmp_ftt_lkup_territory</from>
      <to>Create tmp_ftt_lkup_territory</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>If exists tmp_ftt_lkup_territory</from>
      <to>Create tmp_ftt_lkup_territory</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>START</from>
      <to>If exists tmp_ftt_lkup_dim_coverage</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>If exists tmp_ftt_lkup_dim_coverage</from>
      <to>Drop tmp_ftt_lkup_dim_coverage</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Drop tmp_ftt_lkup_dim_coverage</from>
      <to>Create tmp_ftt_lkup_dim_coverage</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>If exists tmp_ftt_lkup_dim_coverage</from>
      <to>Create tmp_ftt_lkup_dim_coverage</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>START</from>
      <to>If exists tmp_ftt_lkup_dim_policy1</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>If exists tmp_ftt_lkup_dim_policy1</from>
      <to>Drop tmp_ftt_lkup_dim_policy1</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Drop tmp_ftt_lkup_dim_policy1</from>
      <to>Create tmp_ftt_lkup_dim_policy1</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>If exists tmp_ftt_lkup_dim_policy1</from>
      <to>Create tmp_ftt_lkup_dim_policy1</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>START</from>
      <to>If exists tmp_ftt_lkup_dim_policy2</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>If exists tmp_ftt_lkup_dim_policy2</from>
      <to>Drop tmp_ftt_lkup_dim_policy2</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Drop tmp_ftt_lkup_dim_policy2</from>
      <to>Create tmp_ftt_lkup_dim_policy2</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>If exists tmp_ftt_lkup_dim_policy2</from>
      <to>Create tmp_ftt_lkup_dim_policy2</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>START</from>
      <to>If exists tmp_ftt_lkup_underwriter</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>If exists tmp_ftt_lkup_underwriter</from>
      <to>Drop tmp_ftt_lkup_underwriter</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Drop tmp_ftt_lkup_underwriter</from>
      <to>Create tmp_ftt_lkup_underwriter</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>If exists tmp_ftt_lkup_underwriter</from>
      <to>Create tmp_ftt_lkup_underwriter</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>START</from>
      <to>If exists tmp_ftt_lkup_classification</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>If exists tmp_ftt_lkup_classification</from>
      <to>Drop tmp_ftt_lkup_classification</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Drop tmp_ftt_lkup_classification</from>
      <to>Create tmp_ftt_lkup_classification</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>If exists tmp_ftt_lkup_classification</from>
      <to>Create tmp_ftt_lkup_classification</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>START</from>
      <to>If exists tmp_ftt_lkup_coverageext</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>If exists tmp_ftt_lkup_coverageext</from>
      <to>Drop tmp_ftt_lkup_coverageext</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Drop tmp_ftt_lkup_coverageext</from>
      <to>Create tmp_ftt_lkup_coverageext</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>If exists tmp_ftt_lkup_coverageext</from>
      <to>Create tmp_ftt_lkup_coverageext</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>START</from>
      <to>If exists tmp_ftt_lkup_dim_policyext1</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>If exists tmp_ftt_lkup_dim_policyext1</from>
      <to>Drop tmp_ftt_lkup_dim_policyext1</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Drop tmp_ftt_lkup_dim_policyext1</from>
      <to>Create tmp_ftt_lkup_dim_policyext1</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>If exists tmp_ftt_lkup_dim_policyext1</from>
      <to>Create tmp_ftt_lkup_dim_policyext1</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>START</from>
      <to>If exists tmp_ftt_lkup_dim_policyext2</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>If exists tmp_ftt_lkup_dim_policyext2</from>
      <to>Drop tmp_ftt_lkup_dim_policyext2</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Drop tmp_ftt_lkup_dim_policyext2</from>
      <to>Create tmp_ftt_lkup_dim_policyext2</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>If exists tmp_ftt_lkup_dim_policyext2</from>
      <to>Create tmp_ftt_lkup_dim_policyext2</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Create tmp_ftt_help_assign_prd</from>
      <to>If exists tmp_ftt_lkup_producer</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
  </hops>
  <notepads>
  </notepads>
  <attributes>
    <group>
      <name>JobRestart</name>
      <attribute>
        <key>UniqueConnections</key>
        <value>N</value>
      </attribute>
    </group>
  </attributes>
</job>
