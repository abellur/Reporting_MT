<job>
  <name>SBJ_FS_Create_Dim_Lkup_Tables</name>
  <description>Create dimension lookup tables for financial summary table load.</description>
  <extended_description>Date         By     Description
05/04/2016   Jma    Issue #170249. </extended_description>
  <job_version/>
  <job_status>0</job_status>
  <directory>/public/ETL/Facts/Sub-Jobs</directory>
  <created_user>-</created_user>
  <created_date>2014/10/15 16:29:07.930</created_date>
  <modified_user>-</modified_user>
  <modified_date>2016/05/04 15:27:35.019</modified_date>
  <parameters>
    </parameters>
  <connection>
    <name>4SBI_Staging</name>
    <server>${G_STAGING_DB_HOST}</server>
    <type>ORACLE</type>
    <access>Native</access>
    <database>${G_STAGING_DB_NAME}</database>
    <port>${G_STAGING_DB_PORT}</port>
    <username>${G_STAGING_DB_USERNAME}</username>
    <password>${G_STAGING_DB_PWD}</password>
    <servername/>
    <data_tablespace>${G_STAGING_DB_DATA}</data_tablespace>
    <index_tablespace>${G_STAGING_DB_INDEX}</index_tablespace>
    <attributes>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_LOWERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_UPPERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>IS_CLUSTERED</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>PORT_NUMBER</code>
        <attribute>${G_STAGING_DB_PORT}</attribute>
      </attribute>
      <attribute>
        <code>QUOTE_ALL_FIELDS</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>SUPPORTS_BOOLEAN_DATA_TYPE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>USE_POOLING</code>
        <attribute>N</attribute>
      </attribute>
    </attributes>
  </connection>
  <slaveservers>
    <slaveserver>
      <name>4Sight BI - PDI Server</name>
      <hostname>10.0.0.21</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>joe</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>Carte 1</name>
      <hostname>localhost</hostname>
      <port>9081</port>
      <webAppName/>
      <username>cluster</username>
      <password>Encrypted 2be98afc86aa7f2e4cb1aa265cd86aac8</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>DI Server</name>
      <hostname>localhost</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>joe</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_ETL_DEV</name>
      <hostname>magspentaho</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>shota</username>
      <password>Encrypted 2be98afc86aa7f2e4cb79ce63d69dbbdb</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_ETL_SERVER</name>
      <hostname>http://magspentaho</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>shota</username>
      <password>Encrypted 2be98afc86aa7f2e4cb79ce63d69dbbdb</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_ETL_TEST</name>
      <hostname>magspentahotest</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_PENTAHO</name>
      <hostname>magspentaho</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_PENTAHO_BTS</name>
      <hostname>129.144.25.104</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_PENTAHO_DEV</name>
      <hostname>magspentahodev</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>Master</name>
      <hostname>localhost</hostname>
      <port>8081</port>
      <webAppName/>
      <username>cluster</username>
      <password>Encrypted 2be98afc86aa7f2e4cb1aa265cd86aac8</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>SERVER1</name>
      <hostname>LOCALHOST</hostname>
      <port>3306</port>
      <webAppName/>
      <username>root</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>SLAVE ONE</name>
      <hostname>192.168.2.101</hostname>
      <port>3306</port>
      <webAppName/>
      <username>root</username>
      <password>Encrypted 2be98afc86aa7f2e4a418bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>SLAVE TWO</name>
      <hostname>192.168.2.101</hostname>
      <port>3306</port>
      <webAppName/>
      <username>root</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>Slave1</name>
      <hostname>localhost</hostname>
      <port>8082</port>
      <webAppName/>
      <username>cluster</username>
      <password>Encrypted 2be98afc86aa7f2e4cb1aa265cd86aac8</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>Slave2</name>
      <hostname>localhost</hostname>
      <port>8083</port>
      <webAppName/>
      <username>cluster</username>
      <password>Encrypted 2be98afc86aa7f2e4cb1aa265cd86aac8</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>Slave3</name>
      <hostname>localhost</hostname>
      <port>8084</port>
      <webAppName/>
      <username>cluster</username>
      <password>Encrypted 2be98afc86aa7f2e4cb1aa265cd86aac8</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>local DIS</name>
      <hostname>localhost</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>magspentahodev</name>
      <hostname>magspentahodev</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
  </slaveservers>
  <job-log-table>
    <connection/>
    <schema/>
    <table/>
    <size_limit_lines/>
    <interval/>
    <timeout_days/>
    <field>
      <id>ID_JOB</id>
      <enabled>Y</enabled>
      <name>ID_JOB</name>
    </field>
    <field>
      <id>CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>CHANNEL_ID</name>
    </field>
    <field>
      <id>JOBNAME</id>
      <enabled>Y</enabled>
      <name>JOBNAME</name>
    </field>
    <field>
      <id>STATUS</id>
      <enabled>Y</enabled>
      <name>STATUS</name>
    </field>
    <field>
      <id>LINES_READ</id>
      <enabled>Y</enabled>
      <name>LINES_READ</name>
    </field>
    <field>
      <id>LINES_WRITTEN</id>
      <enabled>Y</enabled>
      <name>LINES_WRITTEN</name>
    </field>
    <field>
      <id>LINES_UPDATED</id>
      <enabled>Y</enabled>
      <name>LINES_UPDATED</name>
    </field>
    <field>
      <id>LINES_INPUT</id>
      <enabled>Y</enabled>
      <name>LINES_INPUT</name>
    </field>
    <field>
      <id>LINES_OUTPUT</id>
      <enabled>Y</enabled>
      <name>LINES_OUTPUT</name>
    </field>
    <field>
      <id>LINES_REJECTED</id>
      <enabled>Y</enabled>
      <name>LINES_REJECTED</name>
    </field>
    <field>
      <id>ERRORS</id>
      <enabled>Y</enabled>
      <name>ERRORS</name>
    </field>
    <field>
      <id>STARTDATE</id>
      <enabled>Y</enabled>
      <name>STARTDATE</name>
    </field>
    <field>
      <id>ENDDATE</id>
      <enabled>Y</enabled>
      <name>ENDDATE</name>
    </field>
    <field>
      <id>LOGDATE</id>
      <enabled>Y</enabled>
      <name>LOGDATE</name>
    </field>
    <field>
      <id>DEPDATE</id>
      <enabled>Y</enabled>
      <name>DEPDATE</name>
    </field>
    <field>
      <id>REPLAYDATE</id>
      <enabled>Y</enabled>
      <name>REPLAYDATE</name>
    </field>
    <field>
      <id>LOG_FIELD</id>
      <enabled>Y</enabled>
      <name>LOG_FIELD</name>
    </field>
    <field>
      <id>EXECUTING_SERVER</id>
      <enabled>N</enabled>
      <name>EXECUTING_SERVER</name>
    </field>
    <field>
      <id>EXECUTING_USER</id>
      <enabled>N</enabled>
      <name>EXECUTING_USER</name>
    </field>
    <field>
      <id>START_JOB_ENTRY</id>
      <enabled>N</enabled>
      <name>START_JOB_ENTRY</name>
    </field>
    <field>
      <id>CLIENT</id>
      <enabled>N</enabled>
      <name>CLIENT</name>
    </field>
  </job-log-table>
  <jobentry-log-table>
    <connection/>
    <schema/>
    <table/>
    <timeout_days/>
    <field>
      <id>ID_BATCH</id>
      <enabled>Y</enabled>
      <name>ID_BATCH</name>
    </field>
    <field>
      <id>CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>CHANNEL_ID</name>
    </field>
    <field>
      <id>LOG_DATE</id>
      <enabled>Y</enabled>
      <name>LOG_DATE</name>
    </field>
    <field>
      <id>JOBNAME</id>
      <enabled>Y</enabled>
      <name>TRANSNAME</name>
    </field>
    <field>
      <id>JOBENTRYNAME</id>
      <enabled>Y</enabled>
      <name>STEPNAME</name>
    </field>
    <field>
      <id>LINES_READ</id>
      <enabled>Y</enabled>
      <name>LINES_READ</name>
    </field>
    <field>
      <id>LINES_WRITTEN</id>
      <enabled>Y</enabled>
      <name>LINES_WRITTEN</name>
    </field>
    <field>
      <id>LINES_UPDATED</id>
      <enabled>Y</enabled>
      <name>LINES_UPDATED</name>
    </field>
    <field>
      <id>LINES_INPUT</id>
      <enabled>Y</enabled>
      <name>LINES_INPUT</name>
    </field>
    <field>
      <id>LINES_OUTPUT</id>
      <enabled>Y</enabled>
      <name>LINES_OUTPUT</name>
    </field>
    <field>
      <id>LINES_REJECTED</id>
      <enabled>Y</enabled>
      <name>LINES_REJECTED</name>
    </field>
    <field>
      <id>ERRORS</id>
      <enabled>Y</enabled>
      <name>ERRORS</name>
    </field>
    <field>
      <id>RESULT</id>
      <enabled>Y</enabled>
      <name>RESULT</name>
    </field>
    <field>
      <id>NR_RESULT_ROWS</id>
      <enabled>Y</enabled>
      <name>NR_RESULT_ROWS</name>
    </field>
    <field>
      <id>NR_RESULT_FILES</id>
      <enabled>Y</enabled>
      <name>NR_RESULT_FILES</name>
    </field>
    <field>
      <id>LOG_FIELD</id>
      <enabled>N</enabled>
      <name>LOG_FIELD</name>
    </field>
    <field>
      <id>COPY_NR</id>
      <enabled>N</enabled>
      <name>COPY_NR</name>
    </field>
  </jobentry-log-table>
  <channel-log-table>
    <connection/>
    <schema/>
    <table/>
    <timeout_days/>
    <field>
      <id>ID_BATCH</id>
      <enabled>Y</enabled>
      <name>ID_BATCH</name>
    </field>
    <field>
      <id>CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>CHANNEL_ID</name>
    </field>
    <field>
      <id>LOG_DATE</id>
      <enabled>Y</enabled>
      <name>LOG_DATE</name>
    </field>
    <field>
      <id>LOGGING_OBJECT_TYPE</id>
      <enabled>Y</enabled>
      <name>LOGGING_OBJECT_TYPE</name>
    </field>
    <field>
      <id>OBJECT_NAME</id>
      <enabled>Y</enabled>
      <name>OBJECT_NAME</name>
    </field>
    <field>
      <id>OBJECT_COPY</id>
      <enabled>Y</enabled>
      <name>OBJECT_COPY</name>
    </field>
    <field>
      <id>REPOSITORY_DIRECTORY</id>
      <enabled>Y</enabled>
      <name>REPOSITORY_DIRECTORY</name>
    </field>
    <field>
      <id>FILENAME</id>
      <enabled>Y</enabled>
      <name>FILENAME</name>
    </field>
    <field>
      <id>OBJECT_ID</id>
      <enabled>Y</enabled>
      <name>OBJECT_ID</name>
    </field>
    <field>
      <id>OBJECT_REVISION</id>
      <enabled>Y</enabled>
      <name>OBJECT_REVISION</name>
    </field>
    <field>
      <id>PARENT_CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>PARENT_CHANNEL_ID</name>
    </field>
    <field>
      <id>ROOT_CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>ROOT_CHANNEL_ID</name>
    </field>
  </channel-log-table>
  <checkpoint-log-table>
    <connection/>
    <schema/>
    <table/>
    <timeout_days/>
    <max_nr_retries/>
    <run_retry_period/>
    <namespace_parameter/>
    <save_parameters/>
    <save_result_rows/>
    <save_result_files/>
    <field>
      <id>ID_JOB_RUN</id>
      <enabled>Y</enabled>
      <name>ID_JOB_RUN</name>
    </field>
    <field>
      <id>ID_JOB</id>
      <enabled>Y</enabled>
      <name>ID_JOB</name>
    </field>
    <field>
      <id>JOBNAME</id>
      <enabled>Y</enabled>
      <name>JOBNAME</name>
    </field>
    <field>
      <id>NAMESPACE</id>
      <enabled>Y</enabled>
      <name>NAMESPACE</name>
    </field>
    <field>
      <id>CHECKPOINT_NAME</id>
      <enabled>Y</enabled>
      <name>CHECKPOINT_NAME</name>
    </field>
    <field>
      <id>CHECKPOINT_COPYNR</id>
      <enabled>Y</enabled>
      <name>CHECKPOINT_COPYNR</name>
    </field>
    <field>
      <id>ATTEMPT_NR</id>
      <enabled>Y</enabled>
      <name>ATTEMPT_NR</name>
    </field>
    <field>
      <id>JOB_RUN_START_DATE</id>
      <enabled>Y</enabled>
      <name>JOB_RUN_START_DATE</name>
    </field>
    <field>
      <id>LOGDATE</id>
      <enabled>Y</enabled>
      <name>LOGDATE</name>
    </field>
    <field>
      <id>RESULT_XML</id>
      <enabled>Y</enabled>
      <name>RESULT_XML</name>
    </field>
    <field>
      <id>PARAMETER_XML</id>
      <enabled>Y</enabled>
      <name>PARAMETER_XML</name>
    </field>
  </checkpoint-log-table>
  <pass_batchid>N</pass_batchid>
  <shared_objects_file/>
  <entries>
    <entry>
      <name>Create tmp_fs_lkup_dim_account</name>
      <description/>
      <type>SQL</type>
      <sql>create table tmp_fs_lkup_dim_account nologging PCTFREE 0 
tablespace ${G_STAGING_DB_DATA}
as
SELECT i.sk_recordnum,
       max(da.account_id) account_id    
FROM   dim_account da,
       tmp_fs_month_group_ids i
WHERE  i.account1_uniqueid =  da.account_uniqueid
AND    trunc(da.valid_fromdate)   &lt;= i.period_end_date
AND    trunc(da.valid_todate)     >= i.period_end_date
GROUP  BY i.sk_recordnum;

-- If the above logic can't find proper account_id, use following logic to get account_id without comparing accounting dates.

insert into tmp_fs_lkup_dim_account 
SELECT i.sk_recordnum,
       max(da.account_id) account_id    
FROM   dim_account da,
       tmp_fs_month_group_ids i
WHERE  i.account1_uniqueid =  da.account_uniqueid
AND    NOT EXISTS 
       ( SELECT 1 
         FROM   tmp_fs_lkup_dim_account a
         WHERE  a.sk_recordnum = i.sk_recordnum)
GROUP  BY i.sk_recordnum;

COMMIT;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>546</xloc>
      <yloc>82</yloc>
    </entry>
    <entry>
      <name>Create tmp_fs_lkup_dim_accountext</name>
      <description/>
      <type>SQL</type>
      <sql>create table tmp_fs_lkup_dim_accountext nologging PCTFREE 0 
tablespace ${G_STAGING_DB_DATA}
as
SELECT i.sk_recordnum,
       max(da.ACCOUNT1EXTENSION_ID) ACCOUNT1EXTENSION_ID    
FROM   vdim_account1extension da,
       tmp_fs_month_group_ids i
WHERE  i.account1_uniqueid =  da.ACCOUNT_UNIQUEID
AND    trunc(da.valid_fromdate)   &lt;= i.period_end_date
AND    trunc(da.valid_todate)     >= i.period_end_date
GROUP  BY i.sk_recordnum;

-- If the above logic can't find proper accountextension_id, use following logic to get accountextension_id without comparing accounting dates.

insert into tmp_fs_lkup_dim_accountext
SELECT i.sk_recordnum,
       max(da.ACCOUNT1EXTENSION_ID) ACCOUNT1EXTENSION_ID    
FROM   vdim_account1extension da,
       tmp_fs_month_group_ids i
WHERE  i.account1_uniqueid =  da.ACCOUNT_UNIQUEID
AND    NOT EXISTS
       (SELECT 1 
        FROM   tmp_fs_lkup_dim_accountext a
        WHERE  i.sk_recordnum = a.sk_recordnum)
GROUP  BY i.sk_recordnum;

COMMIT;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>546</xloc>
      <yloc>190</yloc>
    </entry>
    <entry>
      <name>Create tmp_fs_lkup_dim_coverage</name>
      <description/>
      <type>SQL</type>
      <sql>create table tmp_fs_lkup_dim_coverage nologging PCTFREE 0 
tablespace ${G_STAGING_DB_DATA}
as
SELECT sk_recordnum,
       coverage_id
FROM   (       
SELECT sc.sk_recordnum,
       dc.coverage_id,
       row_number() OVER (PARTITION BY sc.sk_recordnum ORDER BY dc.coverage_id DESC) pick1
FROM   Dim_Coverage dc,
       tmp_fs_lkup_stg_coverage sc
WHERE  sc.cov_type = dc.cov_type
AND    sc.cov_code = dc.cov_code
AND    sc.cov_name = dc.cov_name
AND    sc.cov_subcode = dc.cov_subcode
AND    sc.cov_subcodename = dc.cov_subcodename) 
WHERE  pick1 = 1;
</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>546</xloc>
      <yloc>301</yloc>
    </entry>
    <entry>
      <name>START</name>
      <description/>
      <type>SPECIAL</type>
      <start>Y</start>
      <dummy>N</dummy>
      <repeat>N</repeat>
      <schedulerType>0</schedulerType>
      <intervalSeconds>0</intervalSeconds>
      <intervalMinutes>60</intervalMinutes>
      <hour>12</hour>
      <minutes>0</minutes>
      <weekDay>1</weekDay>
      <DayOfMonth>1</DayOfMonth>
      <parallel>Y</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>34</xloc>
      <yloc>914</yloc>
    </entry>
    <entry>
      <name>Create tmp_fs_lkup_dim_coverageext</name>
      <description/>
      <type>SQL</type>
      <sql>create table tmp_fs_lkup_dim_coverageext nologging PCTFREE 0 
tablespace ${G_STAGING_DB_DATA}
as
SELECT sk_recordnum,
       coverageextension_id
FROM   (       
SELECT i.sk_recordnum,
       dce.coverageextension_id,
       row_number() OVER (PARTITION BY i.sk_recordnum ORDER BY dce.coverageextension_id DESC) pick1
FROM   Dim_Coverageextension_Work dce,
       tmp_fs_month_group_ids i
WHERE  i.cov_uniqueid = dce.cov_uniqueid
AND    i.period_end_date >= trunc(dce.valid_fromdate)) 
WHERE  pick1 = 1;

-- If the above logic can't find proper coverageextension_id, use following logic to get coverageextension_id without comparing accounting dates.

INSERT INTO tmp_fs_lkup_dim_coverageext
SELECT sk_recordnum,
       coverageextension_id
FROM   (       
        SELECT i.sk_recordnum,
               dce.coverageextension_id,
               row_number() OVER (PARTITION BY i.sk_recordnum ORDER BY dce.coverageextension_id DESC) pick1
        FROM   Dim_Coverageextension_Work dce,
               tmp_fs_month_group_ids i
        WHERE  i.cov_uniqueid = dce.cov_uniqueid
        AND    NOT EXISTS
               (SELECT 1 
                FROM   tmp_fs_lkup_dim_coverageext c
                WHERE  c.sk_recordnum = i.sk_recordnum)
       ) 
WHERE  pick1 = 1;

COMMIT;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>546</xloc>
      <yloc>412</yloc>
    </entry>
    <entry>
      <name>Create tmp_fs_lkup_dim_class</name>
      <description/>
      <type>SQL</type>
      <sql>create table tmp_fs_lkup_dim_class nologging PCTFREE 0 
tablespace ${G_STAGING_DB_DATA}
as
SELECT sk_recordnum,
       classification_id
FROM   (       
SELECT sc.sk_recordnum,
       dcs.classification_id,
       row_number() OVER (PARTITION BY sc.sk_recordnum ORDER BY dcs.classification_id DESC) pick1
FROM   Dim_Classification dcs,
       tmp_fs_lkup_stg_coverage sc
WHERE  sc.cov_classcode = dcs.class_code
AND    sc.cov_classcodename = dcs.class_codename
AND    sc.cov_classsubcode = dcs.class_subcode
AND    sc.cov_classsubcodename = dcs.class_subcodename) 
WHERE  pick1 = 1;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>546</xloc>
      <yloc>522</yloc>
    </entry>
    <entry>
      <name>Create tmp_fs_lkup_dim_policy</name>
      <description/>
      <type>SQL</type>
      <sql>create table tmp_fs_lkup_dim_policy nologging PCTFREE 0 
tablespace ${G_STAGING_DB_DATA}
as
SELECT sk_recordnum,
       policy_id
FROM   (       
SELECT i.sk_recordnum,
       dp.policy_id,
       row_number() OVER (PARTITION BY i.sk_recordnum ORDER BY dp.policy_id DESC) pick1
FROM   Dim_Policy dp,
       tmp_fs_month_group_ids i
WHERE  i.pol_uniqueid = dp.pol_uniqueid
AND    trunc(dp.valid_fromdate) &lt;= i.period_end_date
AND    trunc(dp.valid_todate) >= i.period_end_date) 
WHERE  pick1 = 1;

-- If the above logic can't find proper policy_id, use following logic to get policy_id without comparing accounting dates.

INSERT INTO tmp_fs_lkup_dim_policy
SELECT sk_recordnum,
       policy_id
FROM   (       
        SELECT i.sk_recordnum,
               dp.policy_id,
               row_number() OVER (PARTITION BY i.sk_recordnum ORDER BY dp.policy_id DESC) pick1
        FROM   Dim_Policy dp,
               tmp_fs_month_group_ids i
        WHERE  i.pol_uniqueid = dp.pol_uniqueid
        AND    NOT EXISTS 
               (SELECT 1
                FROM   tmp_fs_lkup_dim_policy p
                WHERE  p.sk_recordnum = i.sk_recordnum)
       ) 
WHERE  pick1 = 1;

COMMIT;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>546</xloc>
      <yloc>624</yloc>
    </entry>
    <entry>
      <name>Create tmp_fs_lkup_dim_policyext</name>
      <description/>
      <type>SQL</type>
      <sql>create table tmp_fs_lkup_dim_policyext nologging PCTFREE 0 
tablespace ${G_STAGING_DB_DATA}
as
SELECT sk_recordnum,
       policyextension_id
FROM   (       
SELECT i.sk_recordnum,
       dpe.policyextension_id,
       row_number() OVER (PARTITION BY i.sk_recordnum ORDER BY dpe.policyextension_id DESC) pick1
FROM   Dim_Policyextension dpe,
       tmp_fs_month_group_ids i
WHERE  i.pol_uniqueid = dpe.policy_uniqueid
AND    trunc(dpe.valid_fromdate) &lt;= i.period_end_date
AND    trunc(dpe.valid_todate) >= i.period_end_date) 
WHERE  pick1 = 1;

-- If the above logic can't find proper policyextension_id, use following logic to get policyextension_id without comparing accounting dates.

INSERT INTO tmp_fs_lkup_dim_policyext
SELECT sk_recordnum,
       policyextension_id
FROM   (       
        SELECT i.sk_recordnum,
               dpe.policyextension_id,
               row_number() OVER (PARTITION BY i.sk_recordnum ORDER BY dpe.policyextension_id DESC) pick1
        FROM   Dim_Policyextension dpe,
               tmp_fs_month_group_ids i
        WHERE  i.pol_uniqueid = dpe.policy_uniqueid
        AND    NOT EXISTS 
               (SELECT 1
                FROM   tmp_fs_lkup_dim_policyext p
                WHERE  p.sk_recordnum = i.sk_recordnum)
       ) 
WHERE  pick1 = 1;

COMMIT;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>546</xloc>
      <yloc>718</yloc>
    </entry>
    <entry>
      <name>Create tmp_fs_lkup_dim_product</name>
      <description/>
      <type>SQL</type>
      <sql>create table tmp_fs_lkup_dim_product nologging PCTFREE 0 
tablespace ${G_STAGING_DB_DATA}
as
SELECT i.sk_recordnum,
       dpr.product_id
FROM   Dim_Product dpr,
       tmp_fs_lkup_stg_policy i
WHERE  i.product_uniqueid = dpr.product_uniqueid;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>546</xloc>
      <yloc>814</yloc>
    </entry>
    <entry>
      <name>Create tmp_fs_lkup_dim_coveredrisk</name>
      <description/>
      <type>SQL</type>
      <sql>create table tmp_fs_lkup_dim_coveredrisk nologging PCTFREE 0 
tablespace ${G_STAGING_DB_DATA}
as
SELECT sk_recordnum,
       coveredrisk_id
FROM   (       
SELECT i.sk_recordnum,
       dcr.coveredrisk_id,
       row_number() OVER (PARTITION BY i.sk_recordnum ORDER BY dcr.coveredrisk_id DESC) pick1
FROM   Dim_Coveredrisk_Work dcr,
       tmp_fs_month_group_ids i
WHERE  i.prsk_uniqueid = dcr.cvrsk_uniqueid) 
WHERE  pick1 = 1;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>546</xloc>
      <yloc>914</yloc>
    </entry>
    <entry>
      <name>Create tmp_fs_lkup_dim_coveredriskext</name>
      <description/>
      <type>SQL</type>
      <sql>create table tmp_fs_lkup_dim_coveredriskext nologging PCTFREE 0 
tablespace ${G_STAGING_DB_DATA}
as
SELECT sk_recordnum,
       coveredriskextension_id
FROM   (       
SELECT i.sk_recordnum,
       dcre.coveredriskextension_id,
       row_number() OVER (PARTITION BY i.sk_recordnum ORDER BY dcre.coveredriskextension_id DESC) pick1
FROM   Dim_Coveredriskext_Work dcre,
       tmp_fs_month_group_ids i
WHERE  i.prsk_uniqueid = dcre.cvrsk_uniqueid
AND    TRUNC(dcre.valid_fromdate) &lt;= i.period_end_date) 
WHERE  pick1 = 1;

-- If the above logic can't find proper coveredriskextension_id, use following logic to get coveredriskextension_id without comparing accounting dates.

INSERT INTO tmp_fs_lkup_dim_coveredriskext
SELECT sk_recordnum,
       coveredriskextension_id
FROM   (       
        SELECT i.sk_recordnum,
               dcre.coveredriskextension_id,
               row_number() OVER (PARTITION BY i.sk_recordnum ORDER BY dcre.coveredriskextension_id DESC) pick1
        FROM   Dim_Coveredriskext_Work dcre,
               tmp_fs_month_group_ids i
        WHERE  i.prsk_uniqueid = dcre.cvrsk_uniqueid
        AND    NOT EXISTS 
               (SELECT 1
                FROM   tmp_fs_lkup_dim_coveredriskext r
                WHERE  r.sk_recordnum = i.sk_recordnum)
       ) 
WHERE  pick1 = 1;

COMMIT;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>546</xloc>
      <yloc>1005</yloc>
    </entry>
    <entry>
      <name>Create tmp_fs_lkup_producer</name>
      <description/>
      <type>SQL</type>
      <sql>create table tmp_fs_lkup_producer nologging PCTFREE 0 
tablespace ${G_STAGING_DB_DATA}
as
SELECT sk_recordnum,
       PRODUCER_ID
FROM   (       
SELECT sp.sk_recordnum,
       vp.PRODUCER_ID,
       row_number() OVER (PARTITION BY sp.sk_recordnum ORDER BY vp.PRODUCER_ID DESC) pick1
FROM   Vdim_Producer vp,
       tmp_fs_lkup_stg_policy sp
WHERE  vp.PRDR_UNIQUEID = sp.producer_uniqueid) 
WHERE  pick1 = 1;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>546</xloc>
      <yloc>1106</yloc>
    </entry>
    <entry>
      <name>Create tmp_fs_lkup_subproducer</name>
      <description/>
      <type>SQL</type>
      <sql>create table tmp_fs_lkup_subproducer nologging PCTFREE 0 
tablespace ${G_STAGING_DB_DATA}
as
SELECT sk_recordnum,
       SUBPRODUCER_ID
FROM   (
SELECT sp.sk_recordnum,
       vsp.SUBPRODUCER_ID,
       row_number() OVER (PARTITION BY sp.sk_recordnum ORDER BY vsp.SUBPRODUCER_ID DESC) pick1
FROM   Vdim_Subproducer vsp,
       tmp_fs_lkup_stg_policy sp
WHERE  vsp.SUBPRDR_UNIQUEID = sp.subproducer_uniqueid) 
WHERE  pick1 = 1;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>546</xloc>
      <yloc>1203</yloc>
    </entry>
    <entry>
      <name>Create tmp_fs_lkup_underwriter</name>
      <description/>
      <type>SQL</type>
      <sql>create table tmp_fs_lkup_underwriter nologging PCTFREE 0 
tablespace ${G_STAGING_DB_DATA}
as
SELECT sk_recordnum,
       UNDERWRITER_ID
FROM   (
SELECT sp.sk_recordnum,
       vu.UNDERWRITER_ID,
       row_number() OVER (PARTITION BY sp.sk_recordnum ORDER BY vu.UNDERWRITER_ID DESC) pick1
FROM   Vdim_Underwriter vu,
       tmp_fs_lkup_stg_policy sp
WHERE  vu.UW_UNIQUEID = sp.underwriter_uniqueid) 
WHERE  pick1 = 1;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>546</xloc>
      <yloc>1301</yloc>
    </entry>
    <entry>
      <name>Create tmp_fs_lkup_firstinsured</name>
      <description/>
      <type>SQL</type>
      <sql>create table tmp_fs_lkup_firstinsured nologging PCTFREE 0 
tablespace ${G_STAGING_DB_DATA}
as
SELECT sk_recordnum,
       FIRSTINSURED_ID
FROM   (
SELECT /*+ use_hash(sp vfi) */
       sp.sk_recordnum,
       vfi.FIRSTINSURED_ID,
       row_number() OVER (PARTITION BY sp.sk_recordnum ORDER BY vfi.FIRSTINSURED_ID DESC) pick1
FROM   Vdim_Firstinsured vfi,
       tmp_fs_lkup_stg_policy sp
WHERE  vfi.FINSD_UNIQUEID = sp.firstinsured_uniqueid) 
WHERE  pick1 = 1;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>546</xloc>
      <yloc>1397</yloc>
    </entry>
    <entry>
      <name>Create tmp_fs_lkup_accounthldr</name>
      <description/>
      <type>SQL</type>
      <sql>create table tmp_fs_lkup_accounthldr nologging PCTFREE 0 
tablespace ${G_STAGING_DB_DATA}
as
SELECT sk_recordnum,
       ACCOUNTHOLDER_ID
FROM   (
SELECT /*+ use_hash(sp vfi) */
       sa.sk_recordnum,
       va.ACCOUNTHOLDER_ID,
       row_number() OVER (PARTITION BY sa.sk_recordnum ORDER BY va.ACCOUNTHOLDER_ID DESC) pick1
FROM   Vdim_Accountholder va,
       tmp_fs_lkup_stg_account sa
WHERE  va.ACCOUNTHOLDER_UNIQUEID = sa.accountholder_uniqueid) 
WHERE  pick1 = 1;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>546</xloc>
      <yloc>1491</yloc>
    </entry>
    <entry>
      <name>Create tmp_fs_lkup_dim_claim</name>
      <description/>
      <type>SQL</type>
      <sql>create table tmp_fs_lkup_dim_claim nologging PCTFREE 0 
tablespace ${G_STAGING_DB_DATA}
as
SELECT sk_recordnum,
       claim_id
FROM   (       
        SELECT i.sk_recordnum,
               dcl.claim_id,
               row_number() OVER (PARTITION BY i.sk_recordnum ORDER BY dcl.claim_id DESC) pick1
        FROM   Dim_Claim dcl,
               tmp_fs_month_group_ids i
        WHERE  i.clm_uniqueid = dcl.clm_uniqueid
        AND    i.period_start_date &lt;= trunc(dcl.valid_todate)
        AND    i.period_end_date >= trunc(dcl.valid_fromdate) 
       )
WHERE  pick1 = 1;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>546</xloc>
      <yloc>1582</yloc>
    </entry>
    <entry>
      <name>Create tmp_fs_lkup_billing_company</name>
      <description/>
      <type>SQL</type>
      <sql>create table tmp_fs_lkup_billing_company nologging PCTFREE 0 
tablespace ${G_STAGING_DB_DATA}
as
SELECT sk_recordnum,
       BILLINGCOMPANY_ID
FROM   (       
SELECT sa.sk_recordnum,
       vbc.BILLINGCOMPANY_ID,
       row_number() OVER (PARTITION BY sa.sk_recordnum ORDER BY vbc.BILLINGCOMPANY_ID DESC) pick1
FROM   Vdim_Billingcompany vbc,
       tmp_fs_lkup_stg_account sa
WHERE  vbc.BILLINGCOMPANY_UNIQUEID = sa.billingcompany_uniqueid) 
WHERE  pick1 = 1;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>546</xloc>
      <yloc>1665</yloc>
    </entry>
  </entries>
  <hops>
    <hop>
      <from>START</from>
      <to>Create tmp_fs_lkup_dim_coveredrisk</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>START</from>
      <to>Create tmp_fs_lkup_dim_product</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>START</from>
      <to>Create tmp_fs_lkup_dim_policyext</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>START</from>
      <to>Create tmp_fs_lkup_dim_policy</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>START</from>
      <to>Create tmp_fs_lkup_dim_coveredriskext</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>START</from>
      <to>Create tmp_fs_lkup_producer</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>START</from>
      <to>Create tmp_fs_lkup_subproducer</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>START</from>
      <to>Create tmp_fs_lkup_underwriter</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>START</from>
      <to>Create tmp_fs_lkup_dim_class</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>START</from>
      <to>Create tmp_fs_lkup_firstinsured</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>START</from>
      <to>Create tmp_fs_lkup_accounthldr</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>START</from>
      <to>Create tmp_fs_lkup_dim_claim</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>START</from>
      <to>Create tmp_fs_lkup_billing_company</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>START</from>
      <to>Create tmp_fs_lkup_dim_coverageext</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>START</from>
      <to>Create tmp_fs_lkup_dim_coverage</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>START</from>
      <to>Create tmp_fs_lkup_dim_accountext</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>START</from>
      <to>Create tmp_fs_lkup_dim_account</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
  </hops>
  <notepads>
  </notepads>
  <attributes>
    <group>
      <name>JobRestart</name>
      <attribute>
        <key>UniqueConnections</key>
        <value>N</value>
      </attribute>
    </group>
  </attributes>
</job>
