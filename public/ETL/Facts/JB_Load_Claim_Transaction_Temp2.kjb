<job>
  <name>JB_Load_Claim_Transaction_Temp2</name>
  <description>Load policy, risk and coverage information for claims.</description>
  <extended_description/>
  <job_version/>
  <job_status>0</job_status>
  <directory>/public/ETL/Facts</directory>
  <created_user>-</created_user>
  <created_date>2014/11/07 07:44:46.025</created_date>
  <modified_user>-</modified_user>
  <modified_date>2018/05/22 15:28:00.771</modified_date>
  <parameters>
    </parameters>
  <connection>
    <name>4SBI_Staging</name>
    <server>${G_STAGING_DB_HOST}</server>
    <type>ORACLE</type>
    <access>Native</access>
    <database>${G_STAGING_DB_NAME}</database>
    <port>${G_STAGING_DB_PORT}</port>
    <username>${G_STAGING_DB_USERNAME}</username>
    <password>${G_STAGING_DB_PWD}</password>
    <servername/>
    <data_tablespace>${G_STAGING_DB_DATA}</data_tablespace>
    <index_tablespace>${G_STAGING_DB_INDEX}</index_tablespace>
    <attributes>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_LOWERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_UPPERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>IS_CLUSTERED</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>PORT_NUMBER</code>
        <attribute>${G_STAGING_DB_PORT}</attribute>
      </attribute>
      <attribute>
        <code>QUOTE_ALL_FIELDS</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>SUPPORTS_BOOLEAN_DATA_TYPE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>USE_POOLING</code>
        <attribute>N</attribute>
      </attribute>
    </attributes>
  </connection>
  <slaveservers>
    <slaveserver>
      <name>4Sight BI - PDI Server</name>
      <hostname>10.0.0.21</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>joe</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>Carte 1</name>
      <hostname>localhost</hostname>
      <port>9081</port>
      <webAppName/>
      <username>cluster</username>
      <password>Encrypted 2be98afc86aa7f2e4cb1aa265cd86aac8</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>DI Server</name>
      <hostname>localhost</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>joe</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_ETL_DEV</name>
      <hostname>magspentaho</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>shota</username>
      <password>Encrypted 2be98afc86aa7f2e4cb79ce63d69dbbdb</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_ETL_SERVER</name>
      <hostname>http://magspentaho</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>shota</username>
      <password>Encrypted 2be98afc86aa7f2e4cb79ce63d69dbbdb</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_ETL_TEST</name>
      <hostname>magspentahotest</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_PENTAHO</name>
      <hostname>magspentaho</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_PENTAHO_BTS</name>
      <hostname>129.144.25.104</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>MM_PENTAHO_DEV</name>
      <hostname>magspentahodev</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>Master</name>
      <hostname>localhost</hostname>
      <port>8081</port>
      <webAppName/>
      <username>cluster</username>
      <password>Encrypted 2be98afc86aa7f2e4cb1aa265cd86aac8</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>SERVER1</name>
      <hostname>LOCALHOST</hostname>
      <port>3306</port>
      <webAppName/>
      <username>root</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>SLAVE ONE</name>
      <hostname>192.168.2.101</hostname>
      <port>3306</port>
      <webAppName/>
      <username>root</username>
      <password>Encrypted 2be98afc86aa7f2e4a418bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>SLAVE TWO</name>
      <hostname>192.168.2.101</hostname>
      <port>3306</port>
      <webAppName/>
      <username>root</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>Slave1</name>
      <hostname>localhost</hostname>
      <port>8082</port>
      <webAppName/>
      <username>cluster</username>
      <password>Encrypted 2be98afc86aa7f2e4cb1aa265cd86aac8</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>Slave2</name>
      <hostname>localhost</hostname>
      <port>8083</port>
      <webAppName/>
      <username>cluster</username>
      <password>Encrypted 2be98afc86aa7f2e4cb1aa265cd86aac8</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>Slave3</name>
      <hostname>localhost</hostname>
      <port>8084</port>
      <webAppName/>
      <username>cluster</username>
      <password>Encrypted 2be98afc86aa7f2e4cb1aa265cd86aac8</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>local DIS</name>
      <hostname>localhost</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>N</master>
      <sslMode>N</sslMode>
    </slaveserver>
    <slaveserver>
      <name>magspentahodev</name>
      <hostname>magspentahodev</hostname>
      <port>9080</port>
      <webAppName>pentaho-di</webAppName>
      <username>admin</username>
      <password>Encrypted 2be98afc86aa7f2e4bb18bd63c99dbdde</password>
      <proxy_hostname/>
      <proxy_port/>
      <non_proxy_hosts/>
      <master>Y</master>
      <sslMode>N</sslMode>
    </slaveserver>
  </slaveservers>
  <job-log-table>
    <connection/>
    <schema/>
    <table/>
    <size_limit_lines/>
    <interval/>
    <timeout_days/>
    <field>
      <id>ID_JOB</id>
      <enabled>Y</enabled>
      <name>ID_JOB</name>
    </field>
    <field>
      <id>CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>CHANNEL_ID</name>
    </field>
    <field>
      <id>JOBNAME</id>
      <enabled>Y</enabled>
      <name>JOBNAME</name>
    </field>
    <field>
      <id>STATUS</id>
      <enabled>Y</enabled>
      <name>STATUS</name>
    </field>
    <field>
      <id>LINES_READ</id>
      <enabled>Y</enabled>
      <name>LINES_READ</name>
    </field>
    <field>
      <id>LINES_WRITTEN</id>
      <enabled>Y</enabled>
      <name>LINES_WRITTEN</name>
    </field>
    <field>
      <id>LINES_UPDATED</id>
      <enabled>Y</enabled>
      <name>LINES_UPDATED</name>
    </field>
    <field>
      <id>LINES_INPUT</id>
      <enabled>Y</enabled>
      <name>LINES_INPUT</name>
    </field>
    <field>
      <id>LINES_OUTPUT</id>
      <enabled>Y</enabled>
      <name>LINES_OUTPUT</name>
    </field>
    <field>
      <id>LINES_REJECTED</id>
      <enabled>Y</enabled>
      <name>LINES_REJECTED</name>
    </field>
    <field>
      <id>ERRORS</id>
      <enabled>Y</enabled>
      <name>ERRORS</name>
    </field>
    <field>
      <id>STARTDATE</id>
      <enabled>Y</enabled>
      <name>STARTDATE</name>
    </field>
    <field>
      <id>ENDDATE</id>
      <enabled>Y</enabled>
      <name>ENDDATE</name>
    </field>
    <field>
      <id>LOGDATE</id>
      <enabled>Y</enabled>
      <name>LOGDATE</name>
    </field>
    <field>
      <id>DEPDATE</id>
      <enabled>Y</enabled>
      <name>DEPDATE</name>
    </field>
    <field>
      <id>REPLAYDATE</id>
      <enabled>Y</enabled>
      <name>REPLAYDATE</name>
    </field>
    <field>
      <id>LOG_FIELD</id>
      <enabled>Y</enabled>
      <name>LOG_FIELD</name>
    </field>
    <field>
      <id>EXECUTING_SERVER</id>
      <enabled>N</enabled>
      <name>EXECUTING_SERVER</name>
    </field>
    <field>
      <id>EXECUTING_USER</id>
      <enabled>N</enabled>
      <name>EXECUTING_USER</name>
    </field>
    <field>
      <id>START_JOB_ENTRY</id>
      <enabled>N</enabled>
      <name>START_JOB_ENTRY</name>
    </field>
    <field>
      <id>CLIENT</id>
      <enabled>N</enabled>
      <name>CLIENT</name>
    </field>
  </job-log-table>
  <jobentry-log-table>
    <connection/>
    <schema/>
    <table/>
    <timeout_days/>
    <field>
      <id>ID_BATCH</id>
      <enabled>Y</enabled>
      <name>ID_BATCH</name>
    </field>
    <field>
      <id>CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>CHANNEL_ID</name>
    </field>
    <field>
      <id>LOG_DATE</id>
      <enabled>Y</enabled>
      <name>LOG_DATE</name>
    </field>
    <field>
      <id>JOBNAME</id>
      <enabled>Y</enabled>
      <name>TRANSNAME</name>
    </field>
    <field>
      <id>JOBENTRYNAME</id>
      <enabled>Y</enabled>
      <name>STEPNAME</name>
    </field>
    <field>
      <id>LINES_READ</id>
      <enabled>Y</enabled>
      <name>LINES_READ</name>
    </field>
    <field>
      <id>LINES_WRITTEN</id>
      <enabled>Y</enabled>
      <name>LINES_WRITTEN</name>
    </field>
    <field>
      <id>LINES_UPDATED</id>
      <enabled>Y</enabled>
      <name>LINES_UPDATED</name>
    </field>
    <field>
      <id>LINES_INPUT</id>
      <enabled>Y</enabled>
      <name>LINES_INPUT</name>
    </field>
    <field>
      <id>LINES_OUTPUT</id>
      <enabled>Y</enabled>
      <name>LINES_OUTPUT</name>
    </field>
    <field>
      <id>LINES_REJECTED</id>
      <enabled>Y</enabled>
      <name>LINES_REJECTED</name>
    </field>
    <field>
      <id>ERRORS</id>
      <enabled>Y</enabled>
      <name>ERRORS</name>
    </field>
    <field>
      <id>RESULT</id>
      <enabled>Y</enabled>
      <name>RESULT</name>
    </field>
    <field>
      <id>NR_RESULT_ROWS</id>
      <enabled>Y</enabled>
      <name>NR_RESULT_ROWS</name>
    </field>
    <field>
      <id>NR_RESULT_FILES</id>
      <enabled>Y</enabled>
      <name>NR_RESULT_FILES</name>
    </field>
    <field>
      <id>LOG_FIELD</id>
      <enabled>N</enabled>
      <name>LOG_FIELD</name>
    </field>
    <field>
      <id>COPY_NR</id>
      <enabled>N</enabled>
      <name>COPY_NR</name>
    </field>
  </jobentry-log-table>
  <channel-log-table>
    <connection/>
    <schema/>
    <table/>
    <timeout_days/>
    <field>
      <id>ID_BATCH</id>
      <enabled>Y</enabled>
      <name>ID_BATCH</name>
    </field>
    <field>
      <id>CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>CHANNEL_ID</name>
    </field>
    <field>
      <id>LOG_DATE</id>
      <enabled>Y</enabled>
      <name>LOG_DATE</name>
    </field>
    <field>
      <id>LOGGING_OBJECT_TYPE</id>
      <enabled>Y</enabled>
      <name>LOGGING_OBJECT_TYPE</name>
    </field>
    <field>
      <id>OBJECT_NAME</id>
      <enabled>Y</enabled>
      <name>OBJECT_NAME</name>
    </field>
    <field>
      <id>OBJECT_COPY</id>
      <enabled>Y</enabled>
      <name>OBJECT_COPY</name>
    </field>
    <field>
      <id>REPOSITORY_DIRECTORY</id>
      <enabled>Y</enabled>
      <name>REPOSITORY_DIRECTORY</name>
    </field>
    <field>
      <id>FILENAME</id>
      <enabled>Y</enabled>
      <name>FILENAME</name>
    </field>
    <field>
      <id>OBJECT_ID</id>
      <enabled>Y</enabled>
      <name>OBJECT_ID</name>
    </field>
    <field>
      <id>OBJECT_REVISION</id>
      <enabled>Y</enabled>
      <name>OBJECT_REVISION</name>
    </field>
    <field>
      <id>PARENT_CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>PARENT_CHANNEL_ID</name>
    </field>
    <field>
      <id>ROOT_CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>ROOT_CHANNEL_ID</name>
    </field>
  </channel-log-table>
  <checkpoint-log-table>
    <connection/>
    <schema/>
    <table/>
    <timeout_days/>
    <max_nr_retries/>
    <run_retry_period/>
    <namespace_parameter/>
    <save_parameters/>
    <save_result_rows/>
    <save_result_files/>
    <field>
      <id>ID_JOB_RUN</id>
      <enabled>Y</enabled>
      <name>ID_JOB_RUN</name>
    </field>
    <field>
      <id>ID_JOB</id>
      <enabled>Y</enabled>
      <name>ID_JOB</name>
    </field>
    <field>
      <id>JOBNAME</id>
      <enabled>Y</enabled>
      <name>JOBNAME</name>
    </field>
    <field>
      <id>NAMESPACE</id>
      <enabled>Y</enabled>
      <name>NAMESPACE</name>
    </field>
    <field>
      <id>CHECKPOINT_NAME</id>
      <enabled>Y</enabled>
      <name>CHECKPOINT_NAME</name>
    </field>
    <field>
      <id>CHECKPOINT_COPYNR</id>
      <enabled>Y</enabled>
      <name>CHECKPOINT_COPYNR</name>
    </field>
    <field>
      <id>ATTEMPT_NR</id>
      <enabled>Y</enabled>
      <name>ATTEMPT_NR</name>
    </field>
    <field>
      <id>JOB_RUN_START_DATE</id>
      <enabled>Y</enabled>
      <name>JOB_RUN_START_DATE</name>
    </field>
    <field>
      <id>LOGDATE</id>
      <enabled>Y</enabled>
      <name>LOGDATE</name>
    </field>
    <field>
      <id>RESULT_XML</id>
      <enabled>Y</enabled>
      <name>RESULT_XML</name>
    </field>
    <field>
      <id>PARAMETER_XML</id>
      <enabled>Y</enabled>
      <name>PARAMETER_XML</name>
    </field>
  </checkpoint-log-table>
  <pass_batchid>N</pass_batchid>
  <shared_objects_file/>
  <entries>
    <entry>
      <name>START</name>
      <description/>
      <type>SPECIAL</type>
      <start>Y</start>
      <dummy>N</dummy>
      <repeat>N</repeat>
      <schedulerType>0</schedulerType>
      <intervalSeconds>0</intervalSeconds>
      <intervalMinutes>60</intervalMinutes>
      <hour>12</hour>
      <minutes>0</minutes>
      <weekDay>1</weekDay>
      <DayOfMonth>1</DayOfMonth>
      <parallel>Y</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>39</xloc>
      <yloc>357</yloc>
    </entry>
    <entry>
      <name>Pol Date exists?</name>
      <description/>
      <type>TABLE_EXISTS</type>
      <tablename>tmp_clm_txn_pol_date</tablename>
      <schemaname/>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>343</xloc>
      <yloc>125</yloc>
    </entry>
    <entry>
      <name>Drop pol date</name>
      <description/>
      <type>SQL</type>
      <sql>drop table tmp_clm_txn_pol_date purge;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>430</xloc>
      <yloc>25</yloc>
    </entry>
    <entry>
      <name>Create pol date</name>
      <description/>
      <type>SQL</type>
      <sql>create table tmp_clm_txn_pol_date
nologging 
pctfree 0
tablespace ${G_STAGING_DB_DATA} as
select t.id,
       t.ct_changeeffectivedate,
       policy_uniqueid,greatest(nvl((select min(valid_fromdate)
                      from dim_policy dp
                     where dp.pol_uniqueid = t.policy_uniqueid
                       and not exists
                     (select 'x'
                              from dim_policy dp
                             where dp.pol_uniqueid = t.policy_uniqueid
                               and txn.ct_changeeffectivedate between dp.valid_fromdate and
                                   dp.valid_todate)),
                    to_date('01/01/1900',
                            'mm/dd/yyyy')),
                txn.ct_changeeffectivedate) pol_lkup_date
  from tmp_clm_txn_clm t,
       tmp_clm_txn_txn txn
 where txn.id = t.id;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>519</xloc>
      <yloc>125</yloc>
    </entry>
    <entry>
      <name>Pol exists?</name>
      <description/>
      <type>TABLE_EXISTS</type>
      <tablename>tmp_clm_txn_pol</tablename>
      <schemaname/>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>684</xloc>
      <yloc>125</yloc>
    </entry>
    <entry>
      <name>Drop pol </name>
      <description/>
      <type>SQL</type>
      <sql>drop table tmp_clm_txn_pol purge;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>758</xloc>
      <yloc>30</yloc>
    </entry>
    <entry>
      <name>Create pol</name>
      <description/>
      <type>SQL</type>
      <sql>create table tmp_clm_txn_pol
nologging 
pctfree 0
tablespace ${G_STAGING_DB_DATA} as
 WITH m AS (
       SELECT STGPOLICY_ID
       FROM   (SELECT P1.STGPOLICY_ID, 
                      row_number() OVER (PARTITION BY dt.policy_uniqueid ORDER BY P1.STGPOLICY_ID DESC) pick1
                 FROM STG_POLICY P1,
                      tmp_clm_txn_pol_date dt
                WHERE P1.POLICY_UNIQUEID = DT.POLICY_UNIQUEID
                  AND P1.POL_TRANSACTIONACCOUNTINGDATE &lt;= DT.POL_LKUP_DATE) X
       WHERE   x.pick1 = 1)
select id, 
        producer_uniqueid,
        underwriter_uniqueid,
        firstinsured_uniqueid,
        to_number(to_char(pol_effectivedate,'yyyymmdd')) poleffectivedate_id,
        to_number(to_char(pol_expirationdate,'yyyymmdd')) polexpirationdate_id,
        (select max(co.company_id)
           from vdim_company co
          where p.company_uniqueid = co.comp_uniqueid) company_id,
        -- Issue 164532
        NVL((select max(policy_id)
               from dim_policy dp
              where dp.pol_uniqueid = dt.policy_uniqueid 
                and dt.ct_changeeffectivedate >= dp.valid_fromdate
                and dt.ct_changeeffectivedate  &lt; dp.valid_todate),
             (select max(policy_id)
               from dim_policy dp
              where dp.pol_uniqueid = dt.policy_uniqueid )) policy_id,
        NVL((select max(policyextension_id) 
               from dim_policyextension dpx
              where dpx.policy_uniqueid = dt.policy_uniqueid 
                and dt.ct_changeeffectivedate >= dpx.valid_fromdate
                and dt.ct_changeeffectivedate  &lt; dpx.valid_todate),
            (select max(policyextension_id) 
               from dim_policyextension dpx
              where dpx.policy_uniqueid = dt.policy_uniqueid )) policyextension_id,
        (select max(legalentity_id)
           from dim_legalentity le
          where p.underwriter_uniqueid = le.lenty_uniqueid
            and le.lenty_role = 'UNDERWRITER') underwriter_id,
        (select max(legalentity_id)
           from dim_legalentity le
          where p.producer_uniqueid = le.lenty_uniqueid
            and le.lenty_role = 'PRODUCER') producer_id, 
        (select max(legalentity_id)
           from dim_legalentity le
          where p.firstinsured_uniqueid = le.lenty_uniqueid
            and le.lenty_role = 'INSURED') firstinsured_id                        
  from  tmp_clm_txn_pol_date dt,
        stg_policy p, 
        m
 where p.policy_uniqueid = dt.policy_uniqueid
   and p.stgpolicy_id = m.stgpolicy_id;
              

-- Logic for claims against Velocity Policy              
insert into tmp_clm_txn_pol
WITH m AS (
SELECT * 
FROM   (
SELECT dt.id,
       vsp.offeringcompnay_uniqueid company_uniqueid,
       vspt.agent_uniqueid producer_uniqueid,
       to_number(to_char(vspt.term_start_date,'yyyymmdd')) poleffectivedate_id,
       to_number(to_char(vspt.term_end_date,'yyyymmdd')) polexpirationdate_id, 
       vspv.nameinsured_uniqueid firstinsured_uniqueid, 
       vspv.underwriter_uniqueid,
       row_number() OVER (PARTITION BY dt.id ORDER BY vspv.transaction_uniqueid DESC) pick1
FROM   vl_stg_policy vsp, vl_stg_policyterm vspt, vl_stg_policyversion vspv, 
       tmp_clm_txn_pol_date dt
WHERE  vsp.policyversion_uniqueid = vspt.policyversion_uniqueid
AND    vsp.transaction_uniqueid = vspt.transaction_uniqueid
AND    vspv.policyversion_uniqueid = vsp.policyversion_uniqueid
AND    vspv.transaction_uniqueid = vsp.transaction_uniqueid
AND    vsp.policy_number || '^' || vspt.policyterm_uniqueid  = dt.policy_uniqueid) x
WHERE  x.pick1 = 1)
select dt.id, 
        producer_uniqueid,
        underwriter_uniqueid,
        firstinsured_uniqueid,
        m.poleffectivedate_id,
        m.polexpirationdate_id,
        (select max(co.company_id)
           from vdim_company co
          where m.company_uniqueid = co.comp_uniqueid) company_id,
        -- Issue 164532
        NVL((select max(policy_id)
               from dim_policy dp
              where dp.pol_uniqueid = dt.policy_uniqueid 
                and dt.ct_changeeffectivedate >= dp.valid_fromdate
                and dt.ct_changeeffectivedate  &lt; dp.valid_todate),
            (select max(policy_id)
               from dim_policy dp
              where dp.pol_uniqueid = dt.policy_uniqueid )) policy_id,
        NVL((select max(policyextension_id) 
               from dim_policyextension dpx
              where dpx.policy_uniqueid = dt.policy_uniqueid 
                and dt.ct_changeeffectivedate >= dpx.valid_fromdate
                and dt.ct_changeeffectivedate  &lt; dpx.valid_todate),
            (select max(policyextension_id) 
               from dim_policyextension dpx
              where dpx.policy_uniqueid = dt.policy_uniqueid )) policyextension_id,
        (select max(legalentity_id)
           from dim_legalentity le
          where m.underwriter_uniqueid = le.lenty_uniqueid
            and le.lenty_role = 'UNDERWRITER') underwriter_id,
        (select max(legalentity_id)
           from dim_legalentity le
          where m.producer_uniqueid = le.lenty_uniqueid
            and le.lenty_role = 'PRODUCER') producer_id, 
        (select max(legalentity_id)
           from dim_legalentity le
          where m.firstinsured_uniqueid = le.lenty_uniqueid
            and le.lenty_role = 'INSURED') firstinsured_id                        
  from  tmp_clm_txn_pol_date dt, m
 WHERE  dt.id = m.id
;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>847</xloc>
      <yloc>125</yloc>
    </entry>
    <entry>
      <name>Cov id exists?</name>
      <description/>
      <type>TABLE_EXISTS</type>
      <tablename>tmp_clm_txn_cov_id</tablename>
      <schemaname/>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>346</xloc>
      <yloc>357</yloc>
    </entry>
    <entry>
      <name>Drop cov id</name>
      <description/>
      <type>SQL</type>
      <sql>drop table tmp_clm_txn_cov_id purge;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>430</xloc>
      <yloc>257</yloc>
    </entry>
    <entry>
      <name>Create cov id</name>
      <description/>
      <type>SQL</type>
      <sql>create table tmp_clm_txn_cov_id
nologging 
pctfree 0
tablespace ${G_STAGING_DB_DATA} as
select id,
       c.ct_changeeffectivedate,
       -- 164532 
       c.coverage_pk,       
       MAX(s.stgcoverage_id) coverage_id
  from stg_coverage s,
       tmp_clm_txn_clm c
 where s.source_pk = c.coverage_pk
   and s.cov_transactionaccountingdate &lt;= c.ct_changeeffectivedate  
 group by id, c.ct_changeeffectivedate, 
       -- 164532 
       c.coverage_pk;

insert
  into tmp_clm_txn_cov_id
select id,
       c.ct_changeeffectivedate,
       -- 164532
       c.coverage_pk, 
       max(s.stgcoverage_id) coverage_id
  from stg_coverage s, 
       tmp_clm_txn_clm c
 where s.source_pk = c.coverage_pk
   and not exists(select 'x'
                    from tmp_clm_txn_cov_id id
                   where id.id = c.id)   
   group by id,
       c.ct_changeeffectivedate,
       -- 164532
       c.coverage_pk; 
commit;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>519</xloc>
      <yloc>357</yloc>
    </entry>
    <entry>
      <name>Cov exists?</name>
      <description/>
      <type>TABLE_EXISTS</type>
      <tablename>tmp_clm_txn_cov</tablename>
      <schemaname/>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>685</xloc>
      <yloc>357</yloc>
    </entry>
    <entry>
      <name>Drop cov</name>
      <description/>
      <type>SQL</type>
      <sql>drop table tmp_clm_txn_cov purge;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>758</xloc>
      <yloc>259</yloc>
    </entry>
    <entry>
      <name>Create cov</name>
      <description/>
      <type>SQL</type>
      <sql>create table tmp_clm_txn_cov
nologging 
pctfree 0
tablespace ${G_STAGING_DB_DATA} as
select id,
       to_number(to_char(cov_effectivedate,'yyyymmdd')) coverageeffectivedate_id,
       to_number(to_char(s.cov_expirationdate,'yyyymmdd')) coverageexpirationdate_id,
       -- 164532
       NVL((select MAX(coverageextension_id)
           from dim_coverageextension x
          where x.source_pk = s.source_pk
            and x.valid_fromdate &lt;= ct.ct_changeeffectivedate
            and x.valid_todate    > ct.ct_changeeffectivedate),
           (select MAX(coverageextension_id)
                  from dim_coverageextension x
                 where x.source_pk = s.source_pk)
        ) coverageextension_id,
       -- 184741
        (select max(limit_id)
           from dim_limit l
          where l.cov_limit1 = nvl(s.cov_limit1,0)
            and nvl(l.cov_limit1type,'UNK') = nvl(s.cov_limit1type,'UNK')
            and l.cov_limit2 = nvl(s.cov_limit2,0)
            and nvl(l.cov_limit2type,'UNK') = nvl(s.cov_limit2type,'UNK')) limit_id,
         (select max(deductible_id)
            from dim_deductible d
           where d.cov_deductible1 = nvl(s.cov_deductible1,0)
             and nvl(d.cov_deductible1type,'UNK') = nvl(s.cov_deductible1type,'UNK')
             and d.cov_deductible2 = nvl(s.cov_deductible2,0)
             and nvl(d.cov_deductible2type,'UNK') = nvl(s.cov_deductible2type,'UNK') 
             and d.cov_deductible3 = nvl(s.cov_deductible3,0)
             and nvl(d.cov_deductible3type,'UNK') = nvl(s.cov_deductible3type,'UNK')) deductible_id,
       -- end of update for 184741.
          (select max(coverage_id)
             from dim_coverage dc
            where dc.cov_type = s.cov_type
              and dc.cov_code = s.cov_code
              and dc.cov_name = s.cov_name
              and dc.cov_description = s.cov_description
              and dc.cov_subcode = s.cov_subcode
              and dc.cov_subcodename = s.cov_subcodename
              and dc.cov_subcodedescription = s.cov_subcodedescription
              and dc.cov_asl = s.cov_asl
              and dc.cov_subline = s.cov_subline) coverage_id,
        (select max(classification_id)
           from dim_classification c
          where c.class_code = s.cov_classcode
            and c.class_codedescription = s.cov_classcodedescription) classification_id
   from stg_coverage s,
        tmp_clm_txn_cov_id ct
 where ct.coverage_id = s.stgcoverage_id;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>847</xloc>
      <yloc>357</yloc>
    </entry>
    <entry>
      <name>Risk exists?</name>
      <description/>
      <type>TABLE_EXISTS</type>
      <tablename>tmp_clm_txn_risk</tablename>
      <schemaname/>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>357</xloc>
      <yloc>589</yloc>
    </entry>
    <entry>
      <name>Drop risk</name>
      <description/>
      <type>SQL</type>
      <sql>drop table tmp_clm_txn_risk purge;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>430</xloc>
      <yloc>489</yloc>
    </entry>
    <entry>
      <name>Create risk</name>
      <description/>
      <type>SQL</type>
      <sql>create table tmp_clm_txn_risk
nologging 
pctfree 0
tablespace ${G_STAGING_DB_DATA} as
SELECT x.id,
       x.primaryrisk_uniqueid,
      (select MAX(territory_id)
                from dim_territory t
               where t.terr_code = x.rsk_territorycode
                 and t.terr_name = x.rsk_territoryname) territory_id,
             (select MAX(geography_id)
                from dim_geography g
               where g.geo_city       = x.rsk_city
                 and g.geo_state      = x.rsk_state
                 and g.geo_county     = x.rsk_county
                 and g.geo_postalcode = x.rsk_postalcode
                 and g.geo_country    = x.rsk_country) coveredrisklocation_id,
             -- 164532
			 -- #1 Get records that risk start/end dates in dim_coveredriskextension
			 -- match the date in coverage_insured_xref table. 
             NVL((select MAX(coveredriskextension_id)
                    from dim_coveredriskextension rx
                   where rx.risk_pk = x.risk_pk
                     and x.ct_changeeffectivedate >= rx.valid_fromdate
                     and x.ct_changeeffectivedate  &lt; rx.valid_todate ),
					 -- #2 If can not get data by #1, try to get risk data without checking valid_fromto dates
                 (select MAX(coveredriskextension_id)
                    from dim_coveredriskextension rx
                   where rx.risk_pk = x.risk_pk)
             ) coveredriskextension_id,
             (select max(coveredrisk_id)
                from dim_coveredrisk dr
               where dr.cvrsk_uniqueid = x.primaryrisk_uniqueid) coveredrisk_id
FROM  
     (SELECT id,
             r.rsk_territorycode,
             r.rsk_territoryname,
             r.rsk_city,
             r.rsk_state,
             r.rsk_county,
             r.rsk_postalcode,
             r.rsk_country,
             c.ct_changeeffectivedate,
             c.primaryrisk_uniqueid ,  
             -- 164532 
             c.risk_pk,     
             row_number() OVER (PARTITION BY c.id ORDER BY r.stgrisk_id DESC) pick1
        from tmp_clm_txn_clm c,
             stg_risk            r
       where r.risk_pk = c.risk_pk
         AND r.rsk_transactionaccountingdate &lt;= c.ct_changeeffectivedate) x
WHERE x.pick1 = 1;

-- 164532 
-- If the above query miss some records in tmp_clm_txn_clm table due to the comparison of
-- rsk_transactionaccountingdate and c.ct_changeeffectivedate, use following logic to get data 
-- for those records.
insert into tmp_clm_txn_risk
SELECT x.id,
       x.primaryrisk_uniqueid,
      (select MAX(territory_id)
                from dim_territory t
               where t.terr_code = x.rsk_territorycode
                 and t.terr_name = x.rsk_territoryname) territory_id,
             (select MAX(geography_id)
                from dim_geography g
               where g.geo_city       = x.rsk_city
                 and g.geo_state      = x.rsk_state
                 and g.geo_county     = x.rsk_county
                 and g.geo_postalcode = x.rsk_postalcode
                 and g.geo_country    = x.rsk_country) coveredrisklocation_id,
             -- 164532
			 -- #1 Get records that risk start/end dates in dim_coveredriskextension
			 -- match the date in coverage_insured_xref table. 
             NVL((select MAX(coveredriskextension_id)
                    from dim_coveredriskextension rx
                   where rx.risk_pk = x.risk_pk
                     and x.ct_changeeffectivedate >= rx.valid_fromdate
                     and x.ct_changeeffectivedate  &lt; rx.valid_todate ),
					 -- #2 If can not get data by #1, try to get risk data without checking valid_fromto dates
                 (select MAX(coveredriskextension_id)
                    from dim_coveredriskextension rx
                   where rx.risk_pk = x.risk_pk)
             ) coveredriskextension_id,
             (select max(coveredrisk_id)
                from dim_coveredrisk dr
               where dr.cvrsk_uniqueid = x.primaryrisk_uniqueid) coveredrisk_id
FROM  
     (SELECT id,
             r.rsk_territorycode,
             r.rsk_territoryname,
             r.rsk_city,
             r.rsk_state,
             r.rsk_county,
             r.rsk_postalcode,
             r.rsk_country,
             c.ct_changeeffectivedate,
             c.primaryrisk_uniqueid ,  
             -- 164532
             c.risk_pk, 
             row_number() OVER (PARTITION BY c.id ORDER BY r.stgrisk_id DESC) pick1
        from tmp_clm_txn_clm c,
             stg_risk            r
       where r.risk_pk = c.risk_pk
         and not exists
             (select 'x'
                from tmp_clm_txn_risk id
               where id.id = c.id)) x
WHERE x.pick1 = 1;

commit;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>4SBI_Staging</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>519</xloc>
      <yloc>589</yloc>
    </entry>
  </entries>
  <hops>
    <hop>
      <from>START</from>
      <to>Pol Date exists?</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>Pol Date exists?</from>
      <to>Drop pol date</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Drop pol date</from>
      <to>Create pol date</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Pol Date exists?</from>
      <to>Create pol date</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Create pol date</from>
      <to>Pol exists?</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Pol exists?</from>
      <to>Drop pol </to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Drop pol </from>
      <to>Create pol</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Pol exists?</from>
      <to>Create pol</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>START</from>
      <to>Cov id exists?</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>Cov id exists?</from>
      <to>Drop cov id</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Drop cov id</from>
      <to>Create cov id</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Cov id exists?</from>
      <to>Create cov id</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Create cov id</from>
      <to>Cov exists?</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Cov exists?</from>
      <to>Drop cov</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Drop cov</from>
      <to>Create cov</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Cov exists?</from>
      <to>Create cov</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>START</from>
      <to>Risk exists?</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>Risk exists?</from>
      <to>Drop risk</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Drop risk</from>
      <to>Create risk</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Risk exists?</from>
      <to>Create risk</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
  </hops>
  <notepads>
  </notepads>
  <attributes>
    <group>
      <name>JobRestart</name>
      <attribute>
        <key>UniqueConnections</key>
        <value>N</value>
      </attribute>
    </group>
  </attributes>
</job>
